cscope 15 $HOME/glibc/glibc-2.24/malloc -q 0000001964 0000252508
	@arena.c

20 
	~<°dboﬁ.h
>

24 
	#HEAP_MIN_SIZE
 (32 * 1024)

	)

25 #i‚de‡
HEAP_MAX_SIZE


26 #ifde‡
DEFAULT_MMAP_THRESHOLD_MAX


27 
	#HEAP_MAX_SIZE
 (2 * 
DEFAULT_MMAP_THRESHOLD_MAX
)

	)

29 
	#HEAP_MAX_SIZE
 (1024 * 1024Ë

	)

42 
	#t›
(
¨_±r
Ë(◊r_±r)->
t›
)

	)

48 
	s_hóp_öfo


50 
m°©e
 
	m¨_±r
;

51 
_hóp_öfo
 *
	m¥ev
;

52 
size_t
 
	msize
;

53 
size_t
 
	mm¥Ÿe˘_size
;

58 
	m∑d
[-6 * 
SIZE_SZ
 & 
MALLOC_ALIGN_MASK
];

59 } 
	thóp_öfo
;

63 
ßnôy_check_hóp_öfo_Æignmít
[( (
hóp_öfo
)

64 + 2 * 
SIZE_SZ
Ë% 
MALLOC_ALIGNMENT


69 
__thªad
 
m°©e
 
thªad_¨ía
 
	g©åibuã_és_modñ_õ
;

76 
muãx_t
 
	g‰ì_li°_lock
 = 
_LIBC_LOCK_INITIALIZER
;

77 
size_t
 
	g«ª«s
 = 1;

78 
m°©e
 
	g‰ì_li°
;

92 
muãx_t
 
	gli°_lock
 = 
_LIBC_LOCK_INITIALIZER
;

95 
	g__mÆloc_öôülized
 = -1;

108 
	#¨ía_gë
(
±r
, 
size
) do { \

109 
±r
 = 
thªad_¨ía
; \

110 
	`¨ía_lock
 (
±r
, 
size
); \

111 } 0)

	)

113 
	#¨ía_lock
(
±r
, 
size
) do { \

114 i‡(
±r
 && !
	`¨ía_is_c‹ru±
 (ptr)) \

115 (Ë
	`muãx_lock
 (&
±r
->
muãx
); \

117 
±r
 = 
	`¨ía_gë2
 ((
size
), 
NULL
); \

118 } 0)

	)

122 
	#hóp_f‹_±r
(
±r
) \

123 ((
hóp_öfo
 *Ë((Ë(
±r
Ë& ~(
HEAP_MAX_SIZE
 - 1)))

	)

124 
	#¨ía_f‹_chunk
(
±r
) \

125 (
	`chunk_n⁄_maö_¨ía
 (
±r
Ë? 
	`hóp_f‹_±r
 (±r)->
¨_±r
 : &
maö_¨ía
)

	)

139 
öã∫Æ_fun˘i⁄


140 
	$__mÆloc_f‹k_lock_∑ª¡
 ()

142 i‡(
__mÆloc_öôülized
 < 1)

148 (Ë
	`muãx_lock
 (&
li°_lock
);

150 
m°©e
 
¨_±r
 = &
maö_¨ía
;; )

152 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

153 
¨_±r
 =ár_±r->
√xt
;

154 i‡(
¨_±r
 =&
maö_¨ía
)

157 
	}
}

160 
öã∫Æ_fun˘i⁄


161 
	$__mÆloc_f‹k_u∆ock_∑ª¡
 ()

163 i‡(
__mÆloc_öôülized
 < 1)

166 
m°©e
 
¨_±r
 = &
maö_¨ía
;; )

168 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

169 
¨_±r
 =ár_±r->
√xt
;

170 i‡(
¨_±r
 =&
maö_¨ía
)

173 (Ë
	`muãx_u∆ock
 (&
li°_lock
);

174 
	}
}

177 
öã∫Æ_fun˘i⁄


178 
	$__mÆloc_f‹k_u∆ock_chûd
 ()

180 i‡(
__mÆloc_öôülized
 < 1)

185 
	`muãx_öô
 (&
‰ì_li°_lock
);

186 i‡(
thªad_¨ía
 !
NULL
)

187 
thªad_¨ía
->
©èched_thªads
 = 1;

188 
‰ì_li°
 = 
NULL
;

189 
m°©e
 
¨_±r
 = &
maö_¨ía
;; )

191 
	`muãx_öô
 (&
¨_±r
->
muãx
);

192 i‡(
¨_±r
 !
thªad_¨ía
)

195 
¨_±r
->
©èched_thªads
 = 0;

196 
¨_±r
->
√xt_‰ì
 = 
‰ì_li°
;

197 
‰ì_li°
 = 
¨_±r
;

199 
¨_±r
 =ár_±r->
√xt
;

200 i‡(
¨_±r
 =&
maö_¨ía
)

204 
	`muãx_öô
 (&
li°_lock
);

205 
	}
}

208 
	~<°rög.h
>

209 **
_ívú⁄
;

212 
öã∫Æ_fun˘i⁄


213 
	$√xt_ív_íåy
 (***
posôi⁄
)

215 **
cuºít
 = *
posôi⁄
;

216 *
ªsu…
 = 
NULL
;

218 *
cuºít
 !
NULL
)

220 i‡(
	`__buûtö_ex≥˘
 ((*
cuºít
)[0] == 'M', 0)

221 && (*
cuºít
)[1] == 'A'

222 && (*
cuºít
)[2] == 'L'

223 && (*
cuºít
)[3] == 'L'

224 && (*
cuºít
)[4] == 'O'

225 && (*
cuºít
)[5] == 'C'

226 && (*
cuºít
)[6] == '_')

228 
ªsu…
 = &(*
cuºít
)[7];

231 *
posôi⁄
 = ++
cuºít
;

236 ++
cuºít
;

239  
ªsu…
;

240 
	}
}

243 #ifde‡
SHARED


245 
	$__Áûög_m‹ec‹e
 (
±rdiff_t
 
d
)

247  (*Ë
MORECORE_FAILURE
;

248 
	}
}

250 
dl_›í_hook
 *
_dl_›í_hook
;

251 
libc_hiddí_¥Ÿo
 (
_dl_›í_hook
);

255 
	$±mÆloc_öô
 ()

257 i‡(
__mÆloc_öôülized
 >= 0)

260 
__mÆloc_öôülized
 = 0;

262 #ifde‡
SHARED


265 
Dl_öfo
 
di
;

266 
lök_m≠
 *
l
;

268 i‡(
_dl_›í_hook
 !
NULL


269 || (
	`_dl_addr
 (
±mÆloc_öô
, &
di
, &
l
, 
NULL
) != 0

270 && 
l
->
l_ns
 !
LM_ID_BASE
))

271 
__m‹ec‹e
 = 
__Áûög_m‹ec‹e
;

274 
thªad_¨ía
 = &
maö_¨ía
;

275 c⁄° *
s
 = 
NULL
;

276 i‡(
	`__glibc_likñy
 (
_ívú⁄
 !
NULL
))

278 **
ru≈
 = 
_ívú⁄
;

279 *
ívlöe
;

281 
	`__buûtö_ex≥˘
 ((
ívlöe
 = 
	`√xt_ív_íåy
 (&
ru≈
)Ë!
NULL
,

284 
size_t
 
Àn
 = 
	`°rc•n
 (
ívlöe
, "=");

286 i‡(
ívlöe
[
Àn
] != '=')

292 
Àn
)

295 i‡(
	`memcmp
 (
ívlöe
, "CHECK_", 6) == 0)

296 
s
 = &
ívlöe
[7];

299 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

301 i‡(
	`memcmp
 (
ívlöe
, "TOP_PAD_", 8) == 0)

302 
	`__libc_mÆl›t
 (
M_TOP_PAD
, 
	`©oi
 (&
ívlöe
[9]));

303 i‡(
	`memcmp
 (
ívlöe
, "PERTURB_", 8) == 0)

304 
	`__libc_mÆl›t
 (
M_PERTURB
, 
	`©oi
 (&
ívlöe
[9]));

308 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

310 i‡(
	`memcmp
 (
ívlöe
, "MMAP_MAX_", 9) == 0)

311 
	`__libc_mÆl›t
 (
M_MMAP_MAX
, 
	`©oi
 (&
ívlöe
[10]));

312 i‡(
	`memcmp
 (
ívlöe
, "ARENA_MAX", 9) == 0)

313 
	`__libc_mÆl›t
 (
M_ARENA_MAX
, 
	`©oi
 (&
ívlöe
[10]));

317 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

319 i‡(
	`memcmp
 (
ívlöe
, "ARENA_TEST", 10) == 0)

320 
	`__libc_mÆl›t
 (
M_ARENA_TEST
, 
	`©oi
 (&
ívlöe
[11]));

324 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

326 i‡(
	`memcmp
 (
ívlöe
, "TRIM_THRESHOLD_", 15) == 0)

327 
	`__libc_mÆl›t
 (
M_TRIM_THRESHOLD
, 
	`©oi
 (&
ívlöe
[16]));

328 i‡(
	`memcmp
 (
ívlöe
, "MMAP_THRESHOLD_", 15) == 0)

329 
	`__libc_mÆl›t
 (
M_MMAP_THRESHOLD
, 
	`©oi
 (&
ívlöe
[16]));

337 i‡(
s
 && s[0])

339 
	`__libc_mÆl›t
 (
M_CHECK_ACTION
, (Ë(
s
[0] - '0'));

340 i‡(
check_a˘i⁄
 != 0)

341 
	`__mÆloc_check_öô
 ();

343 #i‡
HAVE_MALLOC_INIT_HOOK


344 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__mÆloc_öôülize_hook
);

345 i‡(
hook
 !
NULL
)

346 (*
hook
)();

348 
__mÆloc_öôülized
 = 1;

349 
	}
}

353 #i‡
MALLOC_DEBUG
 > 1

358 
	$dump_hóp
 (
hóp_öfo
 *
hóp
)

360 *
±r
;

361 
mchunk±r
 
p
;

363 
	`Ârötf
 (
°dîr
, "Hó∞%p, sizê%10lx:\n", 
hóp
, (Ëhóp->
size
);

364 
±r
 = (
hóp
->
¨_±r
 !(
m°©e
) (heap + 1)) ?

365 (*Ë(
hóp
 + 1Ë: (*Ë(hó∞+ 1Ë+  (
mÆloc_°©e
);

366 
p
 = (
mchunk±r
Ë(((Ë
±r
 + 
MALLOC_ALIGN_MASK
) &

367 ~
MALLOC_ALIGN_MASK
);

370 
	`Ârötf
 (
°dîr
, "chunk %∞sizê%10lx", 
p
, (Ëp->
size
);

371 i‡(
p
 =
	`t›
 (
hóp
->
¨_±r
))

373 
	`Ârötf
 (
°dîr
, " (top)\n");

376 i‡(
p
->
size
 =(0 | 
PREV_INUSE
))

378 
	`Ârötf
 (
°dîr
, " (fence)\n");

381 
	`Ârötf
 (
°dîr
, "\n");

382 
p
 = 
	`√xt_chunk
 (p);

384 
	}
}

395 *
	gÆig√d_hóp_¨ó
;

400 
hóp_öfo
 *

401 
öã∫Æ_fun˘i⁄


402 
	$√w_hóp
 (
size_t
 
size
, size_à
t›_∑d
)

404 
size_t
 
∑gesize
 = 
	`GLRO
 (
dl_∑gesize
);

405 *
p1
, *
p2
;

406 
ul
;

407 
hóp_öfo
 *
h
;

409 i‡(
size
 + 
t›_∑d
 < 
HEAP_MIN_SIZE
)

410 
size
 = 
HEAP_MIN_SIZE
;

411 i‡(
size
 + 
t›_∑d
 <
HEAP_MAX_SIZE
)

412 
size
 +
t›_∑d
;

413 i‡(
size
 > 
HEAP_MAX_SIZE
)

416 
size
 = 
HEAP_MAX_SIZE
;

417 
size
 = 
	`ALIGN_UP
 (size, 
∑gesize
);

423 
p2
 = 
MAP_FAILED
;

424 i‡(
Æig√d_hóp_¨ó
)

426 
p2
 = (*Ë
	`MMAP
 (
Æig√d_hóp_¨ó
, 
HEAP_MAX_SIZE
, 
PROT_NONE
,

427 
MAP_NORESERVE
);

428 
Æig√d_hóp_¨ó
 = 
NULL
;

429 i‡(
p2
 !
MAP_FAILED
 && ((Ëp2 & (
HEAP_MAX_SIZE
 - 1)))

431 
	`__munm≠
 (
p2
, 
HEAP_MAX_SIZE
);

432 
p2
 = 
MAP_FAILED
;

435 i‡(
p2
 =
MAP_FAILED
)

437 
p1
 = (*Ë
	`MMAP
 (0, 
HEAP_MAX_SIZE
 << 1, 
PROT_NONE
, 
MAP_NORESERVE
);

438 i‡(
p1
 !
MAP_FAILED
)

440 
p2
 = (*Ë(((Ë
p1
 + (
HEAP_MAX_SIZE
 - 1))

441 & ~(
HEAP_MAX_SIZE
 - 1));

442 
ul
 = 
p2
 - 
p1
;

443 i‡(
ul
)

444 
	`__munm≠
 (
p1
, 
ul
);

446 
Æig√d_hóp_¨ó
 = 
p2
 + 
HEAP_MAX_SIZE
;

447 
	`__munm≠
 (
p2
 + 
HEAP_MAX_SIZE
, HEAP_MAX_SIZE - 
ul
);

453 
p2
 = (*Ë
	`MMAP
 (0, 
HEAP_MAX_SIZE
, 
PROT_NONE
, 
MAP_NORESERVE
);

454 i‡(
p2
 =
MAP_FAILED
)

457 i‡((Ë
p2
 & (
HEAP_MAX_SIZE
 - 1))

459 
	`__munm≠
 (
p2
, 
HEAP_MAX_SIZE
);

464 i‡(
	`__m¥Ÿe˘
 (
p2
, 
size
, 
PROT_READ
 | 
PROT_WRITE
) != 0)

466 
	`__munm≠
 (
p2
, 
HEAP_MAX_SIZE
);

469 
h
 = (
hóp_öfo
 *Ë
p2
;

470 
h
->
size
 = size;

471 
h
->
m¥Ÿe˘_size
 = 
size
;

472 
	`LIBC_PROBE
 (
mem‹y_hóp_√w
, 2, 
h
, h->
size
);

473  
h
;

474 
	}
}

480 
	$grow_hóp
 (
hóp_öfo
 *
h
, 
diff
)

482 
size_t
 
∑gesize
 = 
	`GLRO
 (
dl_∑gesize
);

483 
√w_size
;

485 
diff
 = 
	`ALIGN_UP
 (diff, 
∑gesize
);

486 
√w_size
 = (Ë
h
->
size
 + 
diff
;

487 i‡((Ë
√w_size
 > (Ë
HEAP_MAX_SIZE
)

490 i‡((Ë
√w_size
 > 
h
->
m¥Ÿe˘_size
)

492 i‡(
	`__m¥Ÿe˘
 ((*Ë
h
 + h->
m¥Ÿe˘_size
,

493 (Ë
√w_size
 - 
h
->
m¥Ÿe˘_size
,

494 
PROT_READ
 | 
PROT_WRITE
) != 0)

497 
h
->
m¥Ÿe˘_size
 = 
√w_size
;

500 
h
->
size
 = 
√w_size
;

501 
	`LIBC_PROBE
 (
mem‹y_hóp_m‹e
, 2, 
h
, h->
size
);

503 
	}
}

508 
	$shrök_hóp
 (
hóp_öfo
 *
h
, 
diff
)

510 
√w_size
;

512 
√w_size
 = (Ë
h
->
size
 - 
diff
;

513 i‡(
√w_size
 < (Ë (*
h
))

518 i‡(
	`__glibc_u∆ikñy
 (
	`check_may_shrök_hóp
 ()))

520 i‡((*Ë
	`MMAP
 ((*Ë
h
 + 
√w_size
, 
diff
, 
PROT_NONE
,

521 
MAP_FIXED
Ë=(*Ë
MAP_FAILED
)

524 
h
->
m¥Ÿe˘_size
 = 
√w_size
;

527 
	`__madvi£
 ((*Ë
h
 + 
√w_size
, 
diff
, 
MADV_DONTNEED
);

530 
h
->
size
 = 
√w_size
;

531 
	`LIBC_PROBE
 (
mem‹y_hóp_Àss
, 2, 
h
, h->
size
);

533 
	}
}

537 
	#dñëe_hóp
(
hóp
) \

539 i‡((*Ë(
hóp
Ë+ 
HEAP_MAX_SIZE
 =
Æig√d_hóp_¨ó
) \

540 
Æig√d_hóp_¨ó
 = 
NULL
; \

541 
	`__munm≠
 ((*Ë(
hóp
), 
HEAP_MAX_SIZE
); \

542 } 0)

	)

545 
öã∫Æ_fun˘i⁄


546 
	$hóp_åim
 (
hóp_öfo
 *
hóp
, 
size_t
 
∑d
)

548 
m°©e
 
¨_±r
 = 
hóp
->ar_ptr;

549 
∑gesz
 = 
	`GLRO
 (
dl_∑gesize
);

550 
mchunk±r
 
t›_chunk
 = 
	`t›
 (
¨_±r
), 
p
, 
bck
, 
fwd
;

551 
hóp_öfo
 *
¥ev_hóp
;

552 
√w_size
, 
t›_size
, 
t›_¨ó
, 
exåa
, 
¥ev_size
, 
mißlign
;

555 
t›_chunk
 =
	`chunk_©_off£t
 (
hóp
,  (*heap)))

557 
¥ev_hóp
 = 
hóp
->
¥ev
;

558 
¥ev_size
 = 
¥ev_hóp
->
size
 - (
MINSIZE
 - 2 * 
SIZE_SZ
);

559 
p
 = 
	`chunk_©_off£t
 (
¥ev_hóp
, 
¥ev_size
);

561 
mißlign
 = ((Ë
p
Ë& 
MALLOC_ALIGN_MASK
;

562 
p
 = 
	`chunk_©_off£t
 (
¥ev_hóp
, 
¥ev_size
 - 
mißlign
);

563 
	`as£π
 (
p
->
size
 =(0 | 
PREV_INUSE
));

564 
p
 = 
	`¥ev_chunk
 (p);

565 
√w_size
 = 
	`chunksize
 (
p
Ë+ (
MINSIZE
 - 2 * 
SIZE_SZ
Ë+ 
mißlign
;

566 
	`as£π
 (
√w_size
 > 0 &&Çew_sizê< (Ë(2 * 
MINSIZE
));

567 i‡(!
	`¥ev_öu£
 (
p
))

568 
√w_size
 +
p
->
¥ev_size
;

569 
	`as£π
 (
√w_size
 > 0 &&Çew_sizê< 
HEAP_MAX_SIZE
);

570 i‡(
√w_size
 + (
HEAP_MAX_SIZE
 - 
¥ev_hóp
->
size
Ë< 
∑d
 + 
MINSIZE
 + 
∑gesz
)

572 
¨_±r
->
sy°em_mem
 -
hóp
->
size
;

573 
	`LIBC_PROBE
 (
mem‹y_hóp_‰ì
, 2, 
hóp
, hóp->
size
);

574 
	`dñëe_hóp
 (
hóp
);

575 
hóp
 = 
¥ev_hóp
;

576 i‡(!
	`¥ev_öu£
 (
p
))

578 
p
 = 
	`¥ev_chunk
 (p);

579 
	`u∆ök
 (
¨_±r
, 
p
, 
bck
, 
fwd
);

581 
	`as£π
 (((Ë((*Ë
p
 + 
√w_size
Ë& (
∑gesz
 - 1)) == 0);

582 
	`as£π
 (((*Ë
p
 + 
√w_size
Ë=((*Ë
hóp
 + hóp->
size
));

583 
	`t›
 (
¨_±r
Ë
t›_chunk
 = 
p
;

584 
	`£t_hód
 (
t›_chunk
, 
√w_size
 | 
PREV_INUSE
);

591 
t›_size
 = 
	`chunksize
 (
t›_chunk
);

592 i‡(()(
t›_size
) <

593 ()(
mp_
.
åim_thªshﬁd
))

596 
t›_¨ó
 = 
t›_size
 - 
MINSIZE
 - 1;

597 i‡(
t›_¨ó
 < 0 || (
size_t
Ët›_¨ó <
∑d
)

601 
exåa
 = 
	`ALIGN_DOWN
(
t›_¨ó
 - 
∑d
, 
∑gesz
);

602 i‡(
exåa
 == 0)

606 i‡(
	`shrök_hóp
 (
hóp
, 
exåa
) != 0)

609 
¨_±r
->
sy°em_mem
 -
exåa
;

612 
	`£t_hód
 (
t›_chunk
, (
t›_size
 - 
exåa
Ë| 
PREV_INUSE
);

615 
	}
}

622 
	$dëach_¨ía
 (
m°©e
 
ª∂a˚d_¨ía
)

624 i‡(
ª∂a˚d_¨ía
 !
NULL
)

626 
	`as£π
 (
ª∂a˚d_¨ía
->
©èched_thªads
 > 0);

631 --
ª∂a˚d_¨ía
->
©èched_thªads
;

633 
	}
}

635 
m°©e


636 
	$_öt_√w_¨ía
 (
size_t
 
size
)

638 
m°©e
 
a
;

639 
hóp_öfo
 *
h
;

640 *
±r
;

641 
mißlign
;

643 
h
 = 
	`√w_hóp
 (
size
 + ( (*hË+  (*
a
Ë+ 
MALLOC_ALIGNMENT
),

644 
mp_
.
t›_∑d
);

645 i‡(!
h
)

650 
h
 = 
	`√w_hóp
 ( (*hË+  (*
a
Ë+ 
MALLOC_ALIGNMENT
, 
mp_
.
t›_∑d
);

651 i‡(!
h
)

654 
a
 = 
h
->
¨_±r
 = (
m°©e
) (h + 1);

655 
	`mÆloc_öô_°©e
 (
a
);

656 
a
->
©èched_thªads
 = 1;

658 
a
->
sy°em_mem
 =á->
max_sy°em_mem
 = 
h
->
size
;

661 
±r
 = (*Ë(
a
 + 1);

662 
mißlign
 = (Ë
	`chunk2mem
 (
±r
Ë& 
MALLOC_ALIGN_MASK
;

663 i‡(
mißlign
 > 0)

664 
±r
 +
MALLOC_ALIGNMENT
 - 
mißlign
;

665 
	`t›
 (
a
Ë(
mchunk±r
Ë
±r
;

666 
	`£t_hód
 (
	`t›
 (
a
), (((*Ë
h
 + h->
size
Ë- 
±r
Ë| 
PREV_INUSE
);

668 
	`LIBC_PROBE
 (
mem‹y_¨ía_√w
, 2, 
a
, 
size
);

669 
m°©e
 
ª∂a˚d_¨ía
 = 
thªad_¨ía
;

670 
thªad_¨ía
 = 
a
;

671 
	`muãx_öô
 (&
a
->
muãx
);

673 (Ë
	`muãx_lock
 (&
li°_lock
);

676 
a
->
√xt
 = 
maö_¨ía
.next;

680 
	`©omic_wrôe_b¨rõr
 ();

681 
maö_¨ía
.
√xt
 = 
a
;

683 (Ë
	`muãx_u∆ock
 (&
li°_lock
);

685 (Ë
	`muãx_lock
 (&
‰ì_li°_lock
);

686 
	`dëach_¨ía
 (
ª∂a˚d_¨ía
);

687 (Ë
	`muãx_u∆ock
 (&
‰ì_li°_lock
);

699 (Ë
	`muãx_lock
 (&
a
->
muãx
);

701  
a
;

702 
	}
}

706 
m°©e


707 
	$gë_‰ì_li°
 ()

709 
m°©e
 
ª∂a˚d_¨ía
 = 
thªad_¨ía
;

710 
m°©e
 
ªsu…
 = 
‰ì_li°
;

711 i‡(
ªsu…
 !
NULL
)

713 (Ë
	`muãx_lock
 (&
‰ì_li°_lock
);

714 
ªsu…
 = 
‰ì_li°
;

715 i‡(
ªsu…
 !
NULL
)

717 
‰ì_li°
 = 
ªsu…
->
√xt_‰ì
;

720 
	`as£π
 (
ªsu…
->
©èched_thªads
 == 0);

721 
ªsu…
->
©èched_thªads
 = 1;

723 
	`dëach_¨ía
 (
ª∂a˚d_¨ía
);

725 (Ë
	`muãx_u∆ock
 (&
‰ì_li°_lock
);

727 i‡(
ªsu…
 !
NULL
)

729 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªu£_‰ì_li°
, 1, 
ªsu…
);

730 (Ë
	`muãx_lock
 (&
ªsu…
->
muãx
);

731 
thªad_¨ía
 = 
ªsu…
;

735  
ªsu…
;

736 
	}
}

741 
	$ªmove_‰om_‰ì_li°
 (
m°©e
 
¨ía
)

743 
m°©e
 *
¥evious
 = &
‰ì_li°
;

744 
m°©e
 
p
 = 
‰ì_li°
;Ö !
NULL
;Ö =Ö->
√xt_‰ì
)

746 
	`as£π
 (
p
->
©èched_thªads
 == 0);

747 i‡(
p
 =
¨ía
)

750 *
¥evious
 = 
p
->
√xt_‰ì
;

754 
¥evious
 = &
p
->
√xt_‰ì
;

756 
	}
}

761 
m°©e


762 
	$ªu£d_¨ía
 (
m°©e
 
avoid_¨ía
)

764 
m°©e
 
ªsu…
;

766 
m°©e
 
√xt_to_u£
;

767 i‡(
√xt_to_u£
 =
NULL
)

768 
√xt_to_u£
 = &
maö_¨ía
;

772 
ªsu…
 = 
√xt_to_u£
;

775 i‡(!
	`¨ía_is_c‹ru±
 (
ªsu…
Ë&& !
	`muãx_åylock
 (&ªsu…->
muãx
))

776 
out
;

779 
ªsu…
 =Ñesu…->
√xt
;

781 
ªsu…
 !
√xt_to_u£
);

785 i‡(
ªsu…
 =
avoid_¨ía
)

786 
ªsu…
 =Ñesu…->
√xt
;

789 
m°©e
 
begö
 = 
ªsu…
;

790 
	`¨ía_is_c‹ru±
 (
ªsu…
Ë||Ñesu… =
avoid_¨ía
)

792 
ªsu…
 =Ñesu…->
√xt
;

793 i‡(
ªsu…
 =
begö
)

797  
NULL
;

801 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªu£_waô
, 3, &
ªsu…
->
muãx
,Ñesu…, 
avoid_¨ía
);

802 (Ë
	`muãx_lock
 (&
ªsu…
->
muãx
);

804 
out
:

808 
m°©e
 
ª∂a˚d_¨ía
 = 
thªad_¨ía
;

809 (Ë
	`muãx_lock
 (&
‰ì_li°_lock
);

810 
	`dëach_¨ía
 (
ª∂a˚d_¨ía
);

820 
	`ªmove_‰om_‰ì_li°
 (
ªsu…
);

822 ++
ªsu…
->
©èched_thªads
;

824 (Ë
	`muãx_u∆ock
 (&
‰ì_li°_lock
);

827 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªu£
, 2, 
ªsu…
, 
avoid_¨ía
);

828 
thªad_¨ía
 = 
ªsu…
;

829 
√xt_to_u£
 = 
ªsu…
->
√xt
;

831  
ªsu…
;

832 
	}
}

834 
m°©e


835 
öã∫Æ_fun˘i⁄


836 
	$¨ía_gë2
 (
size_t
 
size
, 
m°©e
 
avoid_¨ía
)

838 
m°©e
 
a
;

840 
size_t
 
«ª«s_limô
;

842 
a
 = 
	`gë_‰ì_li°
 ();

843 i‡(
a
 =
NULL
)

846 i‡(
«ª«s_limô
 == 0)

848 i‡(
mp_
.
¨ía_max
 != 0)

849 
«ª«s_limô
 = 
mp_
.
¨ía_max
;

850 i‡(
«ª«s
 > 
mp_
.
¨ía_ã°
)

852 
n
 = 
	`__gë_≈rocs
 ();

854 i‡(
n
 >= 1)

855 
«ª«s_limô
 = 
	`NARENAS_FROM_NCORES
 (
n
);

859 
«ª«s_limô
 = 
	`NARENAS_FROM_NCORES
 (2);

862 
ª≥©
:;

863 
size_t
 
n
 = 
«ª«s
;

871 i‡(
	`__glibc_u∆ikñy
 (
n
 <
«ª«s_limô
 - 1))

873 i‡(
	`ˇtomic_com∑ª_™d_exch™ge_boﬁ_acq
 (&
«ª«s
, 
n
 + 1,Ç))

874 
ª≥©
;

875 
a
 = 
	`_öt_√w_¨ía
 (
size
);

876 i‡(
	`__glibc_u∆ikñy
 (
a
 =
NULL
))

877 
	`ˇtomic_de¸emít
 (&
«ª«s
);

880 
a
 = 
	`ªu£d_¨ía
 (
avoid_¨ía
);

882  
a
;

883 
	}
}

889 
m°©e


890 
	$¨ía_gë_ªåy
 (
m°©e
 
¨_±r
, 
size_t
 
byãs
)

892 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªåy
, 2, 
byãs
, 
¨_±r
);

893 i‡(
¨_±r
 !&
maö_¨ía
)

895 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

897 i‡(
	`¨ía_is_c‹ru±
 (&
maö_¨ía
))

898  
NULL
;

900 
¨_±r
 = &
maö_¨ía
;

901 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

905 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

906 
¨_±r
 = 
	`¨ía_gë2
 (
byãs
,ár_ptr);

909  
¨_±r
;

910 
	}
}

912 
__©åibuã__
 ((
£˘i⁄
 ("__libc_thread_freeres_fn")))

913 
	$¨ía_thªad_‰ìªs
 ()

915 
m°©e
 
a
 = 
thªad_¨ía
;

916 
thªad_¨ía
 = 
NULL
;

918 i‡(
a
 !
NULL
)

920 (Ë
	`muãx_lock
 (&
‰ì_li°_lock
);

923 
	`as£π
 (
a
->
©èched_thªads
 > 0);

924 i‡(--
a
->
©èched_thªads
 == 0)

926 
a
->
√xt_‰ì
 = 
‰ì_li°
;

927 
‰ì_li°
 = 
a
;

929 (Ë
	`muãx_u∆ock
 (&
‰ì_li°_lock
);

931 
	}
}

932 
ãxt_£t_ñemít
 (
__libc_thªad_sub‰ìªs
, 
¨ía_thªad_‰ìªs
);

	@hooks.c

28 
	$mÆloc_hook_öi
 (
size_t
 
sz
, c⁄° *
ˇŒî
)

30 
__mÆloc_hook
 = 
NULL
;

31 
	`±mÆloc_öô
 ();

32  
	`__libc_mÆloc
 (
sz
);

33 
	}
}

36 
	$ªÆloc_hook_öi
 (*
±r
, 
size_t
 
sz
, c⁄° *
ˇŒî
)

38 
__mÆloc_hook
 = 
NULL
;

39 
__ªÆloc_hook
 = 
NULL
;

40 
	`±mÆloc_öô
 ();

41  
	`__libc_ªÆloc
 (
±r
, 
sz
);

42 
	}
}

45 
	$memÆign_hook_öi
 (
size_t
 
Æignmít
, size_à
sz
, c⁄° *
ˇŒî
)

47 
__memÆign_hook
 = 
NULL
;

48 
	`±mÆloc_öô
 ();

49  
	`__libc_memÆign
 (
Æignmít
, 
sz
);

50 
	}
}

53 
	gusög_mÆloc_checkög
;

68 
	gdißŒow_mÆloc_check
;

72 
	$__mÆloc_check_öô
 ()

74 i‡(
dißŒow_mÆloc_check
)

76 
dißŒow_mÆloc_check
 = 0;

79 
usög_mÆloc_checkög
 = 1;

80 
__mÆloc_hook
 = 
mÆloc_check
;

81 
__‰ì_hook
 = 
‰ì_check
;

82 
__ªÆloc_hook
 = 
ªÆloc_check
;

83 
__memÆign_hook
 = 
memÆign_check
;

84 
	}
}

92 
	$magicbyã
 (c⁄° *
p
)

94 
magic
;

96 
magic
 = (((
uöçå_t
Ë
p
 >> 3) ^ ((uintptr_t)Ö >> 11)) & 0xFF;

98 i‡(
magic
 == 1)

99 ++
magic
;

100  
magic
;

101 
	}
}

110 
size_t


111 
	$mÆloc_check_gë_size
 (
mchunk±r
 
p
)

113 
size_t
 
size
;

114 
c
;

115 
magic
 = 
	`magicbyã
 (
p
);

117 
	`as£π
 (
usög_mÆloc_checkög
 == 1);

119 
size
 = 
	`chunksize
 (
p
Ë- 1 + (
	`chunk_is_mm≠≥d
 (pË? 0 : 
SIZE_SZ
);

120 (
c
 = ((*Ë
p
)[
size
]Ë!
magic
;

121 
size
 -
c
)

123 i‡(
c
 <0 || 
size
 < (¯+ 2 * 
SIZE_SZ
))

125 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "malloc_check_get_size: memory corruption",

126 
	`chunk2mem
 (
p
),

127 
	`chunk_is_mm≠≥d
 (
p
Ë? 
NULL
 : 
	`¨ía_f‹_chunk
 (p));

133  
size
 - 2 * 
SIZE_SZ
;

134 
	}
}

140 
öã∫Æ_fun˘i⁄


141 
	$mem2mem_check
 (*
±r
, 
size_t
 
ªq_sz
)

143 
mchunk±r
 
p
;

144 *
m_±r
 = 
±r
;

145 
size_t
 
max_sz
, 
block_sz
, 
i
;

146 
magic
;

148 i‡(!
±r
)

149  
±r
;

151 
p
 = 
	`mem2chunk
 (
±r
);

152 
magic
 = 
	`magicbyã
 (
p
);

153 
max_sz
 = 
	`chunksize
 (
p
Ë- 2 * 
SIZE_SZ
;

154 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

155 
max_sz
 +
SIZE_SZ
;

156 
i
 = 
max_sz
 - 1; i > 
ªq_sz
; i -
block_sz
)

158 
block_sz
 = 
	`MIN
 (
i
 - 
ªq_sz
, 0xff);

161 i‡(
block_sz
 =
magic
)

162 --
block_sz
;

164 
m_±r
[
i
] = 
block_sz
;

166 
m_±r
[
ªq_sz
] = 
magic
;

167  (*Ë
m_±r
;

168 
	}
}

173 
mchunk±r


174 
öã∫Æ_fun˘i⁄


175 
	$mem2chunk_check
 (*
mem
, **
magic_p
)

177 
mchunk±r
 
p
;

178 
INTERNAL_SIZE_T
 
sz
, 
c
;

179 
magic
;

181 i‡(!
	`Æig√d_OK
 (
mem
))

182  
NULL
;

184 
p
 = 
	`mem2chunk
 (
mem
);

185 
sz
 = 
	`chunksize
 (
p
);

186 
magic
 = 
	`magicbyã
 (
p
);

187 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

190 
c⁄tig
 = 
	`c⁄tiguous
 (&
maö_¨ía
);

191 i‡((
c⁄tig
 &&

192 ((*Ë
p
 < 
mp_
.
sbrk_ba£
 ||

193 ((*Ë
p
 + 
sz
Ë>(
mp_
.
sbrk_ba£
 + 
maö_¨ía
.
sy°em_mem
))) ||

194 
sz
 < 
MINSIZE
 || sz & 
MALLOC_ALIGN_MASK
 || !
	`öu£
 (
p
) ||

195 (!
	`¥ev_öu£
 (
p
Ë&& (p->
¥ev_size
 & 
MALLOC_ALIGN_MASK
 ||

196 (
c⁄tig
 && (*Ë
	`¥ev_chunk
 (
p
Ë< 
mp_
.
sbrk_ba£
) ||

197 
	`√xt_chunk
 (
	`¥ev_chunk
 (
p
)) !=Ö)))

198  
NULL
;

200 
sz
 +
SIZE_SZ
 - 1; (
c
 = ((*Ë
p
)[sz]Ë!
magic
; sz -= c)

202 i‡(
c
 =0 || 
sz
 < (¯+ 2 * 
SIZE_SZ
))

203  
NULL
;

208 
off£t
, 
∑ge_mask
 = 
	`GLRO
 (
dl_∑gesize
) - 1;

213 
off£t
 = (Ë
mem
 & 
∑ge_mask
;

214 i‡((
off£t
 !
MALLOC_ALIGNMENT
 && offset != 0 && offset != 0x10 &&

215 
off£t
 != 0x20 && offset != 0x40 && offset != 0x80 && offset != 0x100 &&

216 
off£t
 != 0x200 && offset != 0x400 && offset != 0x800 && offset != 0x1000 &&

217 
off£t
 < 0x2000) ||

218 !
	`chunk_is_mm≠≥d
 (
p
Ë|| (p->
size
 & 
PREV_INUSE
) ||

219 ((((Ë
p
 -Ö->
¥ev_size
Ë& 
∑ge_mask
) != 0) ||

220 ((
p
->
¥ev_size
 + 
sz
Ë& 
∑ge_mask
) != 0)

221  
NULL
;

223 
sz
 -1; (
c
 = ((*Ë
p
)[sz]Ë!
magic
; sz -= c)

225 i‡(
c
 =0 || 
sz
 < (¯+ 2 * 
SIZE_SZ
))

226  
NULL
;

229 ((*Ë
p
)[
sz
] ^= 0xFF;

230 i‡(
magic_p
)

231 *
magic_p
 = (*Ë
p
 + 
sz
;

232  
p
;

233 
	}
}

239 
öã∫Æ_fun˘i⁄


240 
	$t›_check
 ()

242 
mchunk±r
 
t
 = 
	`t›
 (&
maö_¨ía
);

243 *
brk
, *
√w_brk
;

244 
INTERNAL_SIZE_T
 
‰⁄t_mißlign
, 
sbrk_size
;

245 
∑gesz
 = 
	`GLRO
 (
dl_∑gesize
);

247 i‡(
t
 =
	`öôül_t›
 (&
maö_¨ía
) ||

248 (!
	`chunk_is_mm≠≥d
 (
t
) &&

249 
	`chunksize
 (
t
Ë>
MINSIZE
 &&

250 
	`¥ev_öu£
 (
t
) &&

251 (!
	`c⁄tiguous
 (&
maö_¨ía
) ||

252 (*Ë
t
 + 
	`chunksize
 (tË=
mp_
.
sbrk_ba£
 + 
maö_¨ía
.
sy°em_mem
)))

255 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "mÆloc:Å› chunk i†c‹ru±", 
t
,

256 &
maö_¨ía
);

259 
brk
 = 
	`MORECORE
 (0);

260 
‰⁄t_mißlign
 = (Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
;

261 i‡(
‰⁄t_mißlign
 > 0)

262 
‰⁄t_mißlign
 = 
MALLOC_ALIGNMENT
 - front_misalign;

263 
sbrk_size
 = 
‰⁄t_mißlign
 + 
mp_
.
t›_∑d
 + 
MINSIZE
;

264 
sbrk_size
 +
∑gesz
 - ((Ë(
brk
 + sbrk_size) & (pagesz - 1));

265 
√w_brk
 = (*Ë(
	`MORECORE
 (
sbrk_size
));

266 i‡(
√w_brk
 =(*Ë(
MORECORE_FAILURE
))

268 
	`__£t_î∫o
 (
ENOMEM
);

272 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

273 i‡(
hook
)

274 (*
hook
)();

275 
maö_¨ía
.
sy°em_mem
 = (
√w_brk
 - 
mp_
.
sbrk_ba£
Ë+ 
sbrk_size
;

277 
	`t›
 (&
maö_¨ía
Ë(
mchunk±r
Ë(
brk
 + 
‰⁄t_mißlign
);

278 
	`£t_hód
 (
	`t›
 (&
maö_¨ía
), (
sbrk_size
 - 
‰⁄t_mißlign
Ë| 
PREV_INUSE
);

281 
	}
}

284 
	$mÆloc_check
 (
size_t
 
sz
, c⁄° *
ˇŒî
)

286 *
vi˘im
;

288 i‡(
sz
 + 1 == 0)

290 
	`__£t_î∫o
 (
ENOMEM
);

291  
NULL
;

294 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

295 
vi˘im
 = (
	`t›_check
 (Ë>0Ë? 
	`_öt_mÆloc
 (&
maö_¨ía
, 
sz
 + 1Ë: 
NULL
;

296 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

297  
	`mem2mem_check
 (
vi˘im
, 
sz
);

298 
	}
}

301 
	$‰ì_check
 (*
mem
, c⁄° *
ˇŒî
)

303 
mchunk±r
 
p
;

305 i‡(!
mem
)

308 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

309 
p
 = 
	`mem2chunk_check
 (
mem
, 
NULL
);

310 i‡(!
p
)

312 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

314 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "‰ì(): invÆidÖoöãr", 
mem
,

315 &
maö_¨ía
);

318 i‡(
	`chunk_is_mm≠≥d
 (
p
))

320 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

321 
	`munm≠_chunk
 (
p
);

324 
	`_öt_‰ì
 (&
maö_¨ía
, 
p
, 1);

325 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

326 
	}
}

329 
	$ªÆloc_check
 (*
ﬁdmem
, 
size_t
 
byãs
, c⁄° *
ˇŒî
)

331 
INTERNAL_SIZE_T
 
nb
;

332 *
√wmem
 = 0;

333 *
magic_p
;

335 i‡(
byãs
 + 1 == 0)

337 
	`__£t_î∫o
 (
ENOMEM
);

338  
NULL
;

340 i‡(
ﬁdmem
 == 0)

341  
	`mÆloc_check
 (
byãs
, 
NULL
);

343 i‡(
byãs
 == 0)

345 
	`‰ì_check
 (
ﬁdmem
, 
NULL
);

346  
NULL
;

348 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

349 c⁄° 
mchunk±r
 
ﬁdp
 = 
	`mem2chunk_check
 (
ﬁdmem
, &
magic_p
);

350 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

351 i‡(!
ﬁdp
)

353 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "ªÆloc(): invÆidÖoöãr", 
ﬁdmem
,

354 &
maö_¨ía
);

355  
	`mÆloc_check
 (
byãs
, 
NULL
);

357 c⁄° 
INTERNAL_SIZE_T
 
ﬁdsize
 = 
	`chunksize
 (
ﬁdp
);

359 
	`checked_ªque°2size
 (
byãs
 + 1, 
nb
);

360 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

362 i‡(
	`chunk_is_mm≠≥d
 (
ﬁdp
))

364 #i‡
HAVE_MREMAP


365 
mchunk±r
 
√wp
 = 
	`mªm≠_chunk
 (
ﬁdp
, 
nb
);

366 i‡(
√wp
)

367 
√wmem
 = 
	`chunk2mem
 (
√wp
);

372 i‡(
ﬁdsize
 - 
SIZE_SZ
 >
nb
)

373 
√wmem
 = 
ﬁdmem
;

377 i‡(
	`t›_check
 () >= 0)

378 
√wmem
 = 
	`_öt_mÆloc
 (&
maö_¨ía
, 
byãs
 + 1);

379 i‡(
√wmem
)

381 
	`mem˝y
 (
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 2 * 
SIZE_SZ
);

382 
	`munm≠_chunk
 (
ﬁdp
);

389 i‡(
	`t›_check
 () >= 0)

391 
INTERNAL_SIZE_T
 
nb
;

392 
	`checked_ªque°2size
 (
byãs
 + 1, 
nb
);

393 
√wmem
 = 
	`_öt_ªÆloc
 (&
maö_¨ía
, 
ﬁdp
, 
ﬁdsize
, 
nb
);

400 i‡(
√wmem
 =
NULL
)

401 *
magic_p
 ^= 0xFF;

403 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

405  
	`mem2mem_check
 (
√wmem
, 
byãs
);

406 
	}
}

409 
	$memÆign_check
 (
size_t
 
Æignmít
, size_à
byãs
, c⁄° *
ˇŒî
)

411 *
mem
;

413 i‡(
Æignmít
 <
MALLOC_ALIGNMENT
)

414  
	`mÆloc_check
 (
byãs
, 
NULL
);

416 i‡(
Æignmít
 < 
MINSIZE
)

417 
Æignmít
 = 
MINSIZE
;

421 i‡(
Æignmít
 > 
SIZE_MAX
 / 2 + 1)

423 
	`__£t_î∫o
 (
EINVAL
);

428 i‡(
byãs
 > 
SIZE_MAX
 - 
Æignmít
 - 
MINSIZE
)

430 
	`__£t_î∫o
 (
ENOMEM
);

435 i‡(!
	`powîof2
 (
Æignmít
))

437 
size_t
 
a
 = 
MALLOC_ALIGNMENT
 * 2;

438 
a
 < 
Æignmít
)

439 
a
 <<= 1;

440 
Æignmít
 = 
a
;

443 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

444 
mem
 = (
	`t›_check
 (Ë>0Ë? 
	`_öt_memÆign
 (&
maö_¨ía
, 
Æignmít
, 
byãs
 + 1) :

445 
NULL
;

446 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

447  
	`mem2mem_check
 (
mem
, 
byãs
);

448 
	}
}

467 
	#MALLOC_STATE_MAGIC
 0x444c4541l

	)

468 
	#MALLOC_STATE_VERSION
 (0 * 0x100»+ 5lË

	)

470 
	smÆloc_ßve_°©e


472 
	mmagic
;

473 
	mvîsi⁄
;

474 
mbö±r
 
	mav
[
NBINS
 * 2 + 2];

475 *
	msbrk_ba£
;

476 
	msbrked_mem_byãs
;

477 
	måim_thªshﬁd
;

478 
	mt›_∑d
;

479 
	mn_mm≠s_max
;

480 
	mmm≠_thªshﬁd
;

481 
	mcheck_a˘i⁄
;

482 
	mmax_sbrked_mem
;

483 
	mmax_tŸÆ_mem
;

484 
	mn_mm≠s
;

485 
	mmax_n_mm≠s
;

486 
	mmm≠≥d_mem
;

487 
	mmax_mm≠≥d_mem
;

488 
	musög_mÆloc_checkög
;

489 
	mmax_Á°
;

490 
	m¨ía_ã°
;

491 
	m¨ía_max
;

492 
	m«ª«s
;

496 
	$__mÆloc_gë_°©e
 ()

498 
mÆloc_ßve_°©e
 *
ms
;

499 
i
;

500 
mbö±r
 
b
;

502 
ms
 = (
mÆloc_ßve_°©e
 *Ë
	`__libc_mÆloc
 ( (*ms));

503 i‡(!
ms
)

506 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

507 
	`mÆloc_c⁄sﬁid©e
 (&
maö_¨ía
);

508 
ms
->
magic
 = 
MALLOC_STATE_MAGIC
;

509 
ms
->
vîsi⁄
 = 
MALLOC_STATE_VERSION
;

510 
ms
->
av
[0] = 0;

511 
ms
->
av
[1] = 0;

512 
ms
->
av
[2] = 
	`t›
 (&
maö_¨ía
);

513 
ms
->
av
[3] = 0;

514 
i
 = 1; i < 
NBINS
; i++)

516 
b
 = 
	`bö_©
 (&
maö_¨ía
, 
i
);

517 i‡(
	`fú°
 (
b
) == b)

518 
ms
->
av
[2 * 
i
 + 2] = ms->av[2 * i + 3] = 0;

521 
ms
->
av
[2 * 
i
 + 2] = 
	`fú°
 (
b
);

522 
ms
->
av
[2 * 
i
 + 3] = 
	`œ°
 (
b
);

525 
ms
->
sbrk_ba£
 = 
mp_
.sbrk_base;

526 
ms
->
sbrked_mem_byãs
 = 
maö_¨ía
.
sy°em_mem
;

527 
ms
->
åim_thªshﬁd
 = 
mp_
.trim_threshold;

528 
ms
->
t›_∑d
 = 
mp_
.top_pad;

529 
ms
->
n_mm≠s_max
 = 
mp_
.n_mmaps_max;

530 
ms
->
mm≠_thªshﬁd
 = 
mp_
.mmap_threshold;

531 
ms
->
check_a˘i⁄
 = check_action;

532 
ms
->
max_sbrked_mem
 = 
maö_¨ía
.
max_sy°em_mem
;

533 
ms
->
max_tŸÆ_mem
 = 0;

534 
ms
->
n_mm≠s
 = 
mp_
.n_mmaps;

535 
ms
->
max_n_mm≠s
 = 
mp_
.max_n_mmaps;

536 
ms
->
mm≠≥d_mem
 = 
mp_
.mmapped_mem;

537 
ms
->
max_mm≠≥d_mem
 = 
mp_
.max_mmapped_mem;

538 
ms
->
usög_mÆloc_checkög
 = using_malloc_checking;

539 
ms
->
max_Á°
 = 
	`gë_max_Á°
 ();

540 
ms
->
¨ía_ã°
 = 
mp_
.arena_test;

541 
ms
->
¨ía_max
 = 
mp_
.arena_max;

542 
ms
->
«ª«s
 =Çarenas;

543 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

544  (*Ë
ms
;

545 
	}
}

548 
	$__mÆloc_£t_°©e
 (*
m•å
)

550 
mÆloc_ßve_°©e
 *
ms
 = (mÆloc_ßve_°©ê*Ë
m•å
;

552 i‡(
ms
->
magic
 !
MALLOC_STATE_MAGIC
)

556 i‡((
ms
->
vîsi⁄
 & ~0xfÊË> (
MALLOC_STATE_VERSION
 & ~0xffl))

566 
__mÆloc_hook
 = 
NULL
;

567 
__ªÆloc_hook
 = 
NULL
;

568 
__‰ì_hook
 = 
NULL
;

569 
__memÆign_hook
 = 
NULL
;

570 
usög_mÆloc_checkög
 = 0;

579 
mchunk±r
 
chunk
 = 
NULL
;

581 
size_t
 *
ˇndid©e
 = (size_à*Ë
ms
->
sbrk_ba£
;

582 
size_t
 *
íd
 = (size_à*Ë(
ms
->
sbrk_ba£
 + ms->
sbrked_mem_byãs
);

583 
ˇndid©e
 < 
íd
)

584 i‡(*
ˇndid©e
 != 0)

586 
chunk
 = 
	`mem2chunk
 ((*Ë(
ˇndid©e
 + 1));

590 ++
ˇndid©e
;

592 i‡(
chunk
 =
NULL
)

597 
mchunk±r
 
t›
 = 
ms
->
av
[2];

598 
chunk
 < 
t›
)

600 i‡(
	`öu£
 (
chunk
))

603 
size_t
 
size
 = 
	`chunksize
 (
chunk
);

604 
	`£t_hód
 (
chunk
, 
size
 | 
IS_MMAPPED
);

606 
chunk
 = 
	`√xt_chunk
 (chunk);

610 
dum≥d_maö_¨ía_°¨t
 = (
mchunk±r
Ë
ms
->
sbrk_ba£
;

611 
dum≥d_maö_¨ía_íd
 = 
t›
;

614 
	}
}

	@malloc-hooks.h

19 #i‚de‡
_MALLOC_HOOKS_H


20 
	#_MALLOC_HOOKS_H


	)

22 (*
__mÆloc_öôülize_hook
) ();

	@malloc-internal.h

19 #i‚de‡
_MALLOC_INTERNAL_H


20 
	#_MALLOC_INTERNAL_H


	)

23 
	$__mÆloc_f‹k_lock_∑ª¡
 (Ë
öã∫Æ_fun˘i⁄
 
©åibuã_hiddí
;

26 
	$__mÆloc_f‹k_u∆ock_∑ª¡
 (Ë
öã∫Æ_fun˘i⁄
 
©åibuã_hiddí
;

29 
	$__mÆloc_f‹k_u∆ock_chûd
 (Ë
öã∫Æ_fun˘i⁄
 
©åibuã_hiddí
;

	@malloc.c

212 

	)

215 
	~<°ddef.h
>

216 
	~<°dlib.h
>

217 
	~<uni°d.h
>

219 
	~<mÆloc-machöe.h
>

220 
	~<mÆloc-sysdï.h
>

222 
	~<©omic.h
>

223 
	~<_ôﬂ.h
>

224 
	~<bôs/w‹dsize.h
>

225 
	~<sys/sysöfo.h
>

227 
	~<ldsodefs.h
>

229 
	~<uni°d.h
>

230 
	~<°dio.h
>

231 
	~<î∫o.h
>

233 
	~<shlib-com∑t.h
>

236 
	~<°döt.h
>

239 
	~<°d¨g.h
>

242 
	~<sys/∑øm.h
>

245 
	~<libc-öã∫Æ.h
>

247 
	~<mÆloc/mÆloc-öã∫Æ.h
>

277 #i‚de‡
MALLOC_DEBUG


278 
	#MALLOC_DEBUG
 0

	)

281 #ifde‡
NDEBUG


282 
	#as£π
(
ex¥
Ë((Ë0)

	)

284 
	#as£π
(
ex¥
) \

285 ((
ex¥
) \

287 : 
	`__mÆloc_as£π
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

289 c⁄° *
__¥og«me
;

292 
	$__mÆloc_as£π
 (c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
,

293 c⁄° *
fun˘i⁄
)

295 (Ë
	`__fx¥ötf
 (
NULL
, "%s%s%s:%u: %s%sAssertion `%s' failed.\n",

296 
__¥og«me
, __progname[0] ? ": " : "",

297 
fûe
, 
löe
,

298 
fun˘i⁄
 ? function : "", function ? ": " : "",

299 
as£πi⁄
);

300 
	`fÊush
 (
°dîr
);

301 
	`ab‹t
 ();

302 
	}
}

337 #i‚de‡
INTERNAL_SIZE_T


338 
	#INTERNAL_SIZE_T
 
size_t


	)

342 
	#SIZE_SZ
 ((
INTERNAL_SIZE_T
))

	)

354 #i‚de‡
MALLOC_ALIGNMENT


355 
	#MALLOC_ALIGNMENT
 (2 * 
SIZE_SZ
 < 
	`__Æignof__
 () \

356 ? 
	`__Æignof__
 (Ë: 2 * 
SIZE_SZ
)

	)

360 
	#MALLOC_ALIGN_MASK
 (
MALLOC_ALIGNMENT
 - 1)

	)

371 #i‚de‡
REALLOC_ZERO_BYTES_FREES


372 
	#REALLOC_ZERO_BYTES_FREES
 1

	)

391 #i‚de‡
TRIM_FASTBINS


392 
	#TRIM_FASTBINS
 0

	)

397 
	#MORECORE
 (*
__m‹ec‹e
)

	)

398 
	#MORECORE_FAILURE
 0

	)

399 * 
__deÁu…_m‹ec‹e
 (
±rdiff_t
);

400 *(*
	g__m‹ec‹e
)(
	g±rdiff_t
Ë
__deÁu…_m‹ec‹e
;

403 
	~<°rög.h
>

417 #i‚de‡
MORECORE


418 
	#MORECORE
 
sbrk


	)

428 #i‚de‡
MORECORE_FAILURE


429 
	#MORECORE_FAILURE
 (-1)

	)

442 #i‚de‡
MORECORE_CONTIGUOUS


443 
	#MORECORE_CONTIGUOUS
 1

	)

464 #i‚de‡
MORECORE_CLEARS


465 
	#MORECORE_CLEARS
 1

	)

481 #i‚de‡
MMAP_AS_MORECORE_SIZE


482 
	#MMAP_AS_MORECORE_SIZE
 (1024 * 1024)

	)

490 #i‚de‡
HAVE_MREMAP


491 
	#HAVE_MREMAP
 0

	)

497 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_24
)

498 
	#HAVE_MALLOC_INIT_HOOK
 1

	)

500 
	#HAVE_MALLOC_INIT_HOOK
 0

	)

537 * 
__libc_mÆloc
(
size_t
);

538 
	$libc_hiddí_¥Ÿo
 (
__libc_mÆloc
)

551 
	`__libc_‰ì
(*);

552 
	$libc_hiddí_¥Ÿo
 (
__libc_‰ì
)

559 * 
	`__libc_ˇŒoc
(
size_t
, size_t);

588 * 
	`__libc_ªÆloc
(*, 
size_t
);

589 
	$libc_hiddí_¥Ÿo
 (
__libc_ªÆloc
)

603 * 
	`__libc_memÆign
(
size_t
, size_t);

604 
	$libc_hiddí_¥Ÿo
 (
__libc_memÆign
)

611 * 
	`__libc_vÆloc
(
size_t
);

636 
	`__libc_mÆl›t
(, );

637 
	$libc_hiddí_¥Ÿo
 (
__libc_mÆl›t
)

662 
mÆlöfo
 
	`__libc_mÆlöfo
();

670 * 
	`__libc_pvÆloc
(
size_t
);

696 
	`__mÆloc_åim
(
size_t
);

713 
size_t
 
	`__mÆloc_ußbÀ_size
(*);

735 
	`__mÆloc_°©s
();

743 * 
	`__mÆloc_gë_°©e
();

751 
	`__mÆloc_£t_°©e
(*);

758 
	`__posix_memÆign
(**, 
size_t
, size_t);

789 #i‚de‡
M_MXFAST


790 
	#M_MXFAST
 1

	)

793 #i‚de‡
DEFAULT_MXFAST


794 
	#DEFAULT_MXFAST
 (64 * 
SIZE_SZ
 / 4)

	)

858 
	#M_TRIM_THRESHOLD
 -1

	)

860 #i‚de‡
DEFAULT_TRIM_THRESHOLD


861 
	#DEFAULT_TRIM_THRESHOLD
 (128 * 1024)

	)

891 
	#M_TOP_PAD
 -2

	)

893 #i‚de‡
DEFAULT_TOP_PAD


894 
	#DEFAULT_TOP_PAD
 (0)

	)

902 #i‚de‡
DEFAULT_MMAP_THRESHOLD_MIN


903 
	#DEFAULT_MMAP_THRESHOLD_MIN
 (128 * 1024)

	)

906 #i‚de‡
DEFAULT_MMAP_THRESHOLD_MAX


911 #i‡
__WORDSIZE
 == 32

912 
	#DEFAULT_MMAP_THRESHOLD_MAX
 (512 * 1024)

	)

914 
	#DEFAULT_MMAP_THRESHOLD_MAX
 (4 * 1024 * 1024 * ())

	)

1010 
	#M_MMAP_THRESHOLD
 -3

	)

1012 #i‚de‡
DEFAULT_MMAP_THRESHOLD


1013 
	#DEFAULT_MMAP_THRESHOLD
 
DEFAULT_MMAP_THRESHOLD_MIN


	)

1027 
	#M_MMAP_MAX
 -4

	)

1029 #i‚de‡
DEFAULT_MMAP_MAX


1030 
	#DEFAULT_MMAP_MAX
 (65536)

	)

1033 
	~<mÆloc.h
>

1035 #i‚de‡
RETURN_ADDRESS


1036 
	#RETURN_ADDRESS
(
X_
Ë(
NULL
)

	)

1042 #i‚de‡
öã∫Æ_fun˘i⁄


1043 
	#öã∫Æ_fun˘i⁄


	)

1047 
mÆloc_chunk
;

1048 
mÆloc_chunk
* 
	tmchunk±r
;

1052 * 
	`_öt_mÆloc
(
m°©e
, 
size_t
);

1053 
	`_öt_‰ì
(
m°©e
, 
mchunk±r
, );

1054 * 
	`_öt_ªÆloc
(
m°©e
, 
mchunk±r
, 
INTERNAL_SIZE_T
,

1055 
INTERNAL_SIZE_T
);

1056 * 
	`_öt_memÆign
(
m°©e
, 
size_t
, size_t);

1057 * 
	`_mid_memÆign
(
size_t
, size_t, *);

1059 
	`mÆloc_¥öãº
(
a˘i⁄
, c⁄° *
°r
, *
±r
, 
m°©e
 
av
);

1061 * 
öã∫Æ_fun˘i⁄
 
	`mem2mem_check
(*
p
, 
size_t
 
sz
);

1062 
öã∫Æ_fun˘i⁄
 
	`t›_check
();

1063 
öã∫Æ_fun˘i⁄
 
	`munm≠_chunk
(
mchunk±r
 
p
);

1064 #i‡
HAVE_MREMAP


1065 
mchunk±r
 
öã∫Æ_fun˘i⁄
 
	`mªm≠_chunk
(mchunk±∏
p
, 
size_t
 
√w_size
);

1068 * 
	`mÆloc_check
(
size_t
 
sz
, c⁄° *
ˇŒî
);

1069 
	`‰ì_check
(* 
mem
, c⁄° *
ˇŒî
);

1070 * 
	`ªÆloc_check
(* 
ﬁdmem
, 
size_t
 
byãs
,

1071 c⁄° *
ˇŒî
);

1072 * 
	`memÆign_check
(
size_t
 
Æignmít
, size_à
byãs
,

1073 c⁄° *
ˇŒî
);

1078 
	~<f˙é.h
>

1079 
	~<sys/mm™.h
>

1081 #i‡!
	`deföed
(
MAP_ANONYMOUS
Ë&& deföed(
MAP_ANON
)

1082 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

1085 #i‚de‡
MAP_NORESERVE


1086 
	#MAP_NORESERVE
 0

	)

1089 
	#MMAP
(
addr
, 
size
, 
¥Ÿ
, 
Êags
) \

1090 
	`__mm≠
((
addr
), (
size
), (
¥Ÿ
), (
Êags
)|
MAP_ANONYMOUS
|
MAP_PRIVATE
, -1, 0)

	)

1104 
	smÆloc_chunk
 {

1106 
INTERNAL_SIZE_T
 
¥ev_size
;

1107 
INTERNAL_SIZE_T
 
size
;

1109 
mÆloc_chunk
* 
fd
;

1110 
mÆloc_chunk
* 
bk
;

1113 
mÆloc_chunk
* 
fd_√xtsize
;

1114 
mÆloc_chunk
* 
bk_√xtsize
;

1211 
	#chunk2mem
(
p
Ë((*)((*)’Ë+ 2*
SIZE_SZ
))

	)

1212 
	#mem2chunk
(
mem
Ë((
mchunk±r
)((*)(memË- 2*
SIZE_SZ
))

	)

1215 
	#MIN_CHUNK_SIZE
 (
	`off£tof
(
mÆloc_chunk
, 
fd_√xtsize
))

	)

1219 
	#MINSIZE
 \

1220 ()(((
MIN_CHUNK_SIZE
+
MALLOC_ALIGN_MASK
Ë& ~MALLOC_ALIGN_MASK))

	)

1224 
	#Æig√d_OK
(
m
Ë((()(mË& 
MALLOC_ALIGN_MASK
Ë=0)

	)

1226 
	#mißlig√d_chunk
(
p
) \

1227 ((
uöçå_t
)(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
 ? (
p
Ë: 
	`chunk2mem
 (p)) \

1228 & 
MALLOC_ALIGN_MASK
)

	)

1237 
	#REQUEST_OUT_OF_RANGE
(
ªq
) \

1238 ((Ë(
ªq
) >= \

1239 (Ë(
INTERNAL_SIZE_T
Ë(-2 * 
MINSIZE
))

	)

1243 
	#ªque°2size
(
ªq
) \

1244 (((
ªq
Ë+ 
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
 < 
MINSIZE
) ? \

1245 
MINSIZE
 : \

1246 ((
ªq
Ë+ 
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
Ë& ~MALLOC_ALIGN_MASK)

	)

1250 
	#checked_ªque°2size
(
ªq
, 
sz
) \

1251 i‡(
	`REQUEST_OUT_OF_RANGE
 (
ªq
)) { \

1252 
	`__£t_î∫o
 (
ENOMEM
); \

1254 
	}
} \

1255 (
sz
Ë
	`ªque°2size
 (
ªq
);

	)

1263 
	#PREV_INUSE
 0x1

	)

1266 
	#¥ev_öu£
(
p
Ë(’)->
size
 & 
PREV_INUSE
)

	)

1270 
	#IS_MMAPPED
 0x2

	)

1273 
	#chunk_is_mm≠≥d
(
p
Ë(’)->
size
 & 
IS_MMAPPED
)

	)

1279 
	#NON_MAIN_ARENA
 0x4

	)

1282 
	#chunk_n⁄_maö_¨ía
(
p
Ë(’)->
size
 & 
NON_MAIN_ARENA
)

	)

1293 
	#SIZE_BITS
 (
PREV_INUSE
 | 
IS_MMAPPED
 | 
NON_MAIN_ARENA
)

	)

1296 
	#chunksize
(
p
Ë(’)->
size
 & ~(
SIZE_BITS
))

	)

1300 
	#√xt_chunk
(
p
Ë((
mchunk±r
Ë(((*Ë’)Ë+ (’)->
size
 & ~
SIZE_BITS
)))

	)

1303 
	#¥ev_chunk
(
p
Ë((
mchunk±r
Ë(((*Ë’)Ë- (’)->
¥ev_size
)))

	)

1306 
	#chunk_©_off£t
(
p
, 
s
Ë((
mchunk±r
Ë(((*Ë’)Ë+ (s)))

	)

1309 
	#öu£
(
p
) \

1310 ((((
mchunk±r
Ë(((*Ë(
p
)Ë+ (’)->
size
 & ~
SIZE_BITS
)))->sizeË& 
PREV_INUSE
)

	)

1313 
	#£t_öu£
(
p
) \

1314 ((
mchunk±r
Ë(((*Ë(
p
)Ë+ (’)->
size
 & ~
SIZE_BITS
)))->sizê|
PREV_INUSE


	)

1316 
	#˛ór_öu£
(
p
) \

1317 ((
mchunk±r
Ë(((*Ë(
p
)Ë+ (’)->
size
 & ~
SIZE_BITS
)))->sizê&~(
PREV_INUSE
)

	)

1321 
	#öu£_bô_©_off£t
(
p
, 
s
) \

1322 (((
mchunk±r
Ë(((*Ë(
p
)Ë+ (
s
)))->
size
 & 
PREV_INUSE
)

	)

1324 
	#£t_öu£_bô_©_off£t
(
p
, 
s
) \

1325 (((
mchunk±r
Ë(((*Ë(
p
)Ë+ (
s
)))->
size
 |
PREV_INUSE
)

	)

1327 
	#˛ór_öu£_bô_©_off£t
(
p
, 
s
) \

1328 (((
mchunk±r
Ë(((*Ë(
p
)Ë+ (
s
)))->
size
 &~(
PREV_INUSE
))

	)

1332 
	#£t_hód_size
(
p
, 
s
Ë(’)->
size
 = ((’)->sizê& 
SIZE_BITS
Ë| (s)))

	)

1335 
	#£t_hód
(
p
, 
s
Ë(’)->
size
 = (s))

	)

1338 
	#£t_foŸ
(
p
, 
s
Ë(((
mchunk±r
Ë((*Ë’Ë+ (s)))->
¥ev_size
 = (s))

	)

1392 
mÆloc_chunk
 *
	tmbö±r
;

1395 
	#bö_©
(
m
, 
i
) \

1396 (
mbö±r
Ë(((*Ë&((
m
)->
bös
[((
i
) - 1) * 2])) \

1397 - 
	`off£tof
 (
mÆloc_chunk
, 
fd
))

	)

1400 
	#√xt_bö
(
b
Ë((
mbö±r
Ë((*Ë(bË+ ( (
mchunk±r
Ë<< 1)))

	)

1403 
	#fú°
(
b
Ë((b)->
fd
)

	)

1404 
	#œ°
(
b
Ë((b)->
bk
)

	)

1407 
	#u∆ök
(
AV
, 
P
, 
BK
, 
FD
) { \

1408 i‡(
	`__buûtö_ex≥˘
 (
	`chunksize
(
P
Ë!
	`√xt_chunk
(P)->
¥ev_size
, 0)) \

1409 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "c‹ru±ed sizêvs.Öªv_size", 
P
, 
AV
); \

1410 
FD
 = 
P
->
fd
; \

1411 
BK
 = 
P
->
bk
; \

1412 i‡(
	`__buûtö_ex≥˘
 (
FD
->
bk
 !
P
 || 
BK
->
fd
 != P, 0)) \

1413 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "c‹ru±ed doubÀ-lökedÜi°", 
P
, 
AV
); \

1415 
FD
->
bk
 = 
BK
; \

1416 
BK
->
fd
 = 
FD
; \

1417 i‡(!
	`ö_smÆlbö_ønge
 (
P
->
size
) \

1418 && 
	`__buûtö_ex≥˘
 (
P
->
fd_√xtsize
 !
NULL
, 0)) { \

1419 i‡(
	`__buûtö_ex≥˘
 (
P
->
fd_√xtsize
->
bk_√xtsize
 != P, 0) \

1420 || 
	`__buûtö_ex≥˘
 (
P
->
bk_√xtsize
->
fd_√xtsize
 != P, 0)) \

1421 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, \

1423 
P
, 
AV
); \

1424 i‡(
FD
->
fd_√xtsize
 =
NULL
) { \

1425 i‡(
P
->
fd_√xtsize
 == P) \

1426 
FD
->
fd_√xtsize
 = FD->
bk_√xtsize
 = FD; \

1428 
FD
->
fd_√xtsize
 = 
P
->fd_nextsize; \

1429 
FD
->
bk_√xtsize
 = 
P
->bk_nextsize; \

1430 
P
->
fd_√xtsize
->
bk_√xtsize
 = 
FD
; \

1431 
P
->
bk_√xtsize
->
fd_√xtsize
 = 
FD
; \

1434 
P
->
fd_√xtsize
->
bk_√xtsize
 = P->bk_nextsize; \

1435 
P
->
bk_√xtsize
->
fd_√xtsize
 = P->fd_nextsize; \

1439 }

	)

1465 
	#NBINS
 128

	)

1466 
	#NSMALLBINS
 64

	)

1467 
	#SMALLBIN_WIDTH
 
MALLOC_ALIGNMENT


	)

1468 
	#SMALLBIN_CORRECTION
 (
MALLOC_ALIGNMENT
 > 2 * 
SIZE_SZ
)

	)

1469 
	#MIN_LARGE_SIZE
 ((
NSMALLBINS
 - 
SMALLBIN_CORRECTION
Ë* 
SMALLBIN_WIDTH
)

	)

1471 
	#ö_smÆlbö_ønge
(
sz
) \

1472 ((Ë(
sz
Ë< (Ë
MIN_LARGE_SIZE
)

	)

1474 
	#smÆlbö_ödex
(
sz
) \

1475 ((
SMALLBIN_WIDTH
 =16 ? (((Ë(
sz
)) >> 4) : ((() (sz)) >> 3))\

1476 + 
SMALLBIN_CORRECTION
)

	)

1478 
	#œrgebö_ödex_32
(
sz
) \

1479 (((((Ë(
sz
)) >> 6) <= 38) ? 56 + ((() (sz)) >> 6) :\

1480 ((((Ë(
sz
)) >> 9) <= 20) ? 91 + ((() (sz)) >> 9) :\

1481 ((((Ë(
sz
)) >> 12) <= 10) ? 110 + ((() (sz)) >> 12) :\

1482 ((((Ë(
sz
)) >> 15) <= 4) ? 119 + ((() (sz)) >> 15) :\

1483 ((((Ë(
sz
)) >> 18) <= 2) ? 124 + ((() (sz)) >> 18) :\

1484 126)

	)

1486 
	#œrgebö_ödex_32_big
(
sz
) \

1487 (((((Ë(
sz
)) >> 6) <= 45) ? 49 + ((() (sz)) >> 6) :\

1488 ((((Ë(
sz
)) >> 9) <= 20) ? 91 + ((() (sz)) >> 9) :\

1489 ((((Ë(
sz
)) >> 12) <= 10) ? 110 + ((() (sz)) >> 12) :\

1490 ((((Ë(
sz
)) >> 15) <= 4) ? 119 + ((() (sz)) >> 15) :\

1491 ((((Ë(
sz
)) >> 18) <= 2) ? 124 + ((() (sz)) >> 18) :\

1492 126)

	)

1497 
	#œrgebö_ödex_64
(
sz
) \

1498 (((((Ë(
sz
)) >> 6) <= 48) ? 48 + ((() (sz)) >> 6) :\

1499 ((((Ë(
sz
)) >> 9) <= 20) ? 91 + ((() (sz)) >> 9) :\

1500 ((((Ë(
sz
)) >> 12) <= 10) ? 110 + ((() (sz)) >> 12) :\

1501 ((((Ë(
sz
)) >> 15) <= 4) ? 119 + ((() (sz)) >> 15) :\

1502 ((((Ë(
sz
)) >> 18) <= 2) ? 124 + ((() (sz)) >> 18) :\

1503 126)

	)

1505 
	#œrgebö_ödex
(
sz
) \

1506 (
SIZE_SZ
 =8 ? 
	`œrgebö_ödex_64
 (
sz
) \

1507 : 
MALLOC_ALIGNMENT
 =16 ? 
	`œrgebö_ödex_32_big
 (
sz
) \

1508 : 
	`œrgebö_ödex_32
 (
sz
))

	)

1510 
	#bö_ödex
(
sz
) \

1511 ((
	`ö_smÆlbö_ønge
 (
sz
)Ë? 
	`smÆlbö_ödex
 (szË: 
	`œrgebö_ödex
 (sz))

	)

1529 
	#uns‹ãd_chunks
(
M
Ë(
	`bö_©
 (M, 1))

	)

1550 
	#öôül_t›
(
M
Ë(
	`uns‹ãd_chunks
 (M))

	)

1564 
	#BINMAPSHIFT
 5

	)

1565 
	#BITSPERMAP
 (1U << 
BINMAPSHIFT
)

	)

1566 
	#BINMAPSIZE
 (
NBINS
 / 
BITSPERMAP
)

	)

1568 
	#idx2block
(
i
Ë((iË>> 
BINMAPSHIFT
)

	)

1569 
	#idx2bô
(
i
Ë((1U << ((iË& ((1U << 
BINMAPSHIFT
Ë- 1))))

	)

1571 
	#m¨k_bö
(
m
, 
i
Ë((m)->
böm≠
[
	`idx2block
 (i)] |
	`idx2bô
 (i))

	)

1572 
	#unm¨k_bö
(
m
, 
i
Ë((m)->
böm≠
[
	`idx2block
 (i)] &~(
	`idx2bô
 (i)))

	)

1573 
	#gë_böm≠
(
m
, 
i
Ë((m)->
böm≠
[
	`idx2block
 (i)] & 
	`idx2bô
 (i))

	)

1592 
mÆloc_chunk
 *
	tmÁ°bö±r
;

1593 
	#Á°bö
(
¨_±r
, 
idx
Ë(◊r_±r)->
Á°bösY
[idx])

	)

1596 
	#Á°bö_ödex
(
sz
) \

1597 ((((Ë(
sz
)Ë>> (
SIZE_SZ
 =8 ? 4 : 3)Ë- 2)

	)

1601 
	#MAX_FAST_SIZE
 (80 * 
SIZE_SZ
 / 4)

	)

1603 
	#NFASTBINS
 (
	`Á°bö_ödex
 (
	`ªque°2size
 (
MAX_FAST_SIZE
)Ë+ 1)

	)

1616 
	#FASTBIN_CONSOLIDATION_THRESHOLD
 (65536UL)

	)

1633 
	#FASTCHUNKS_BIT
 (1U)

	)

1635 
	#have_Á°chunks
(
M
Ë(((M)->
Êags
 & 
FASTCHUNKS_BIT
Ë=0)

	)

1636 
	#˛ór_Á°chunks
(
M
Ë
	`ˇtomic_‹
 (&(M)->
Êags
, 
FASTCHUNKS_BIT
)

	)

1637 
	#£t_Á°chunks
(
M
Ë
	`ˇtomic_™d
 (&(M)->
Êags
, ~
FASTCHUNKS_BIT
)

	)

1648 
	#NONCONTIGUOUS_BIT
 (2U)

	)

1650 
	#c⁄tiguous
(
M
Ë(((M)->
Êags
 & 
NONCONTIGUOUS_BIT
Ë=0)

	)

1651 
	#n⁄c⁄tiguous
(
M
Ë(((M)->
Êags
 & 
NONCONTIGUOUS_BIT
Ë!0)

	)

1652 
	#£t_n⁄c⁄tiguous
(
M
Ë((M)->
Êags
 |
NONCONTIGUOUS_BIT
)

	)

1653 
	#£t_c⁄tiguous
(
M
Ë((M)->
Êags
 &~
NONCONTIGUOUS_BIT
)

	)

1659 
	#ARENA_CORRUPTION_BIT
 (4U)

	)

1661 
	#¨ía_is_c‹ru±
(
A
Ë(((A)->
Êags
 & 
ARENA_CORRUPTION_BIT
))

	)

1662 
	#£t_¨ía_c‹ru±
(
A
Ë((A)->
Êags
 |
ARENA_CORRUPTION_BIT
)

	)

1671 
	#£t_max_Á°
(
s
) \

1672 
globÆ_max_Á°
 = (((
s
) == 0) \

1673 ? 
SMALLBIN_WIDTH
 : ((
s
 + 
SIZE_SZ
Ë& ~
MALLOC_ALIGN_MASK
))

	)

1674 
	#gë_max_Á°
(Ë
globÆ_max_Á°


	)

1681 
	smÆloc_°©e


1684 
muãx_t
 
	mmuãx
;

1687 
	mÊags
;

1690 
mÁ°bö±r
 
	mÁ°bösY
[
NFASTBINS
];

1693 
mchunk±r
 
	mt›
;

1696 
mchunk±r
 
	mœ°_ªmaödî
;

1699 
mchunk±r
 
	mbös
[
NBINS
 * 2 - 2];

1702 
	mböm≠
[
BINMAPSIZE
];

1705 
mÆloc_°©e
 *
	m√xt
;

1709 
mÆloc_°©e
 *
	m√xt_‰ì
;

1714 
INTERNAL_SIZE_T
 
	m©èched_thªads
;

1717 
INTERNAL_SIZE_T
 
	msy°em_mem
;

1718 
INTERNAL_SIZE_T
 
	mmax_sy°em_mem
;

1721 
	smÆloc_∑r


1724 
	måim_thªshﬁd
;

1725 
INTERNAL_SIZE_T
 
	mt›_∑d
;

1726 
INTERNAL_SIZE_T
 
	mmm≠_thªshﬁd
;

1727 
INTERNAL_SIZE_T
 
	m¨ía_ã°
;

1728 
INTERNAL_SIZE_T
 
	m¨ía_max
;

1731 
	mn_mm≠s
;

1732 
	mn_mm≠s_max
;

1733 
	mmax_n_mm≠s
;

1737 
	mno_dyn_thªshﬁd
;

1740 
INTERNAL_SIZE_T
 
	mmm≠≥d_mem
;

1741 
INTERNAL_SIZE_T
 
	mmax_mm≠≥d_mem
;

1744 *
	msbrk_ba£
;

1753 
mÆloc_°©e
 
	gmaö_¨ía
 =

1755 .
muãx
 = 
_LIBC_LOCK_INITIALIZER
,

1756 .
	g√xt
 = &
maö_¨ía
,

1757 .
	g©èched_thªads
 = 1

1765 
mchunk±r
 
	gdum≥d_maö_¨ía_°¨t
;

1766 
mchunk±r
 
	gdum≥d_maö_¨ía_íd
;

1770 
	#DUMPED_MAIN_ARENA_CHUNK
(
p
) \

1771 ((
p
Ë>
dum≥d_maö_¨ía_°¨t
 && (pË< 
dum≥d_maö_¨ía_íd
)

	)

1775 
mÆloc_∑r
 
	gmp_
 =

1777 .
t›_∑d
 = 
DEFAULT_TOP_PAD
,

1778 .
	gn_mm≠s_max
 = 
DEFAULT_MMAP_MAX
,

1779 .
	gmm≠_thªshﬁd
 = 
DEFAULT_MMAP_THRESHOLD
,

1780 .
	gåim_thªshﬁd
 = 
DEFAULT_TRIM_THRESHOLD
,

1781 
	#NARENAS_FROM_NCORES
(
n
Ë(“Ë* ( (Ë=4 ? 2 : 8))

	)

1782 .
	g¨ía_ã°
 = 
NARENAS_FROM_NCORES
 (1)

1787 
	#M_ARENA_TEST
 -7

	)

1788 
	#M_ARENA_MAX
 -8

	)

1792 
INTERNAL_SIZE_T
 
	gglobÆ_max_Á°
;

1805 
	$mÆloc_öô_°©e
 (
m°©e
 
av
)

1807 
i
;

1808 
mbö±r
 
bö
;

1811 
i
 = 1; i < 
NBINS
; ++i)

1813 
bö
 = 
	`bö_©
 (
av
, 
i
);

1814 
bö
->
fd
 = bö->
bk
 = bin;

1817 #i‡
MORECORE_CONTIGUOUS


1818 i‡(
av
 !&
maö_¨ía
)

1820 
	`£t_n⁄c⁄tiguous
 (
av
);

1821 i‡(
av
 =&
maö_¨ía
)

1822 
	`£t_max_Á°
 (
DEFAULT_MXFAST
);

1823 
av
->
Êags
 |
FASTCHUNKS_BIT
;

1825 
av
->
t›
 = 
	`öôül_t›
 (av);

1826 
	}
}

1832 *
sysmÆloc
 (
INTERNAL_SIZE_T
, 
m°©e
);

1833 
sy°rim
 (
size_t
, 
m°©e
);

1834 
mÆloc_c⁄sﬁid©e
 (
m°©e
);

1841 #i‚de‡
wók_v¨übÀ


1844 
	#wók_v¨übÀ
 
wók_fun˘i⁄


	)

1848 *
	$mÆloc_hook_öi
 (
size_t
 
sz
,

1849 c⁄° *
ˇŒî
Ë
__THROW
;

1850 *
	$ªÆloc_hook_öi
 (*
±r
, 
size_t
 
sz
,

1851 c⁄° *
ˇŒî
Ë
__THROW
;

1852 *
	$memÆign_hook_öi
 (
size_t
 
Æignmít
, size_à
sz
,

1853 c⁄° *
ˇŒî
Ë
__THROW
;

1855 #i‡
HAVE_MALLOC_INIT_HOOK


1856 
	$wók_v¨übÀ
 (*
__mÆloc_öôülize_hook
Ë(Ë
NULL
;

1857 
	`com∑t_symbﬁ
 (
libc
, 
__mÆloc_öôülize_hook
,

1858 
__mÆloc_öôülize_hook
, 
GLIBC_2_0
);

1861 
	$wók_v¨übÀ
 (*
__‰ì_hook
Ë(*
__±r
,

1862 c⁄° *Ë
NULL
;

1863 *
	$wók_v¨übÀ
 (*
__mÆloc_hook
)

1864 (
size_t
 
__size
, c⁄° *Ë
mÆloc_hook_öi
;

1865 *
	$wók_v¨übÀ
 (*
__ªÆloc_hook
)

1866 (*
__±r
, 
size_t
 
__size
, const *)

1867 
ªÆloc_hook_öi
;

1868 *
	$wók_v¨übÀ
 (*
__memÆign_hook
)

1869 (
size_t
 
__Æignmít
, size_à
__size
, const *)

1870 
memÆign_hook_öi
;

1871 
	$wók_v¨übÀ
 (*
__a·î_m‹ec‹e_hook
Ë(Ë
NULL
;

1876 #i‚de‡
DEFAULT_CHECK_ACTION


1877 
	#DEFAULT_CHECK_ACTION
 3

	)

1880 
check_a˘i⁄
 = 
DEFAULT_CHECK_ACTION
;

1885 
≥πurb_byã
;

1888 
	$Æloc_≥πurb
 (*
p
, 
size_t
 
n
)

1890 i‡(
	`__glibc_u∆ikñy
 (
≥πurb_byã
))

1891 
	`mem£t
 (
p
, 
≥πurb_byã
 ^ 0xff, 
n
);

1892 
	}
}

1895 
	$‰ì_≥πurb
 (*
p
, 
size_t
 
n
)

1897 i‡(
	`__glibc_u∆ikñy
 (
≥πurb_byã
))

1898 
	`mem£t
 (
p
, 
≥πurb_byã
, 
n
);

1899 
	}
}

1903 
	~<°≠-¥obe.h
>

1906 
	~"¨ía.c
"

1918 #i‡!
MALLOC_DEBUG


1920 
	#check_chunk
(
A
, 
P
)

	)

1921 
	#check_‰ì_chunk
(
A
, 
P
)

	)

1922 
	#check_öu£_chunk
(
A
, 
P
)

	)

1923 
	#check_ªmÆlo˚d_chunk
(
A
, 
P
, 
N
)

	)

1924 
	#check_mÆlo˚d_chunk
(
A
, 
P
, 
N
)

	)

1925 
	#check_mÆloc_°©e
(
A
)

	)

1929 
	#check_chunk
(
A
, 
P
Ë
	`do_check_chunk
 (A, P)

	)

1930 
	#check_‰ì_chunk
(
A
, 
P
Ë
	`do_check_‰ì_chunk
 (A, P)

	)

1931 
	#check_öu£_chunk
(
A
, 
P
Ë
	`do_check_öu£_chunk
 (A, P)

	)

1932 
	#check_ªmÆlo˚d_chunk
(
A
, 
P
, 
N
Ë
	`do_check_ªmÆlo˚d_chunk
 (A, P, N)

	)

1933 
	#check_mÆlo˚d_chunk
(
A
, 
P
, 
N
Ë
	`do_check_mÆlo˚d_chunk
 (A, P, N)

	)

1934 
	#check_mÆloc_°©e
(
A
Ë
	`do_check_mÆloc_°©e
 (A)

	)

1941 
	$do_check_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
)

1943 
sz
 = 
	`chunksize
 (
p
);

1945 *
max_addªss
 = (*Ë(
av
->
t›
Ë+ 
	`chunksize
 (av->top);

1946 *
mö_addªss
 = 
max_addªss
 - 
av
->
sy°em_mem
;

1948 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

1951 i‡(
p
 !
av
->
t›
)

1953 i‡(
	`c⁄tiguous
 (
av
))

1955 
	`as£π
 (((*Ë
p
Ë>
mö_addªss
);

1956 
	`as£π
 (((*Ë
p
 + 
sz
Ë<((*Ë(
av
->
t›
)));

1962 
	`as£π
 ((Ë(
sz
Ë>
MINSIZE
);

1964 
	`as£π
 (
	`¥ev_öu£
 (
p
));

1967 i‡(!
	`DUMPED_MAIN_ARENA_CHUNK
 (
p
))

1970 i‡(
	`c⁄tiguous
 (
av
Ë&&áv->
t›
 !
	`öôül_t›
 (av))

1972 
	`as£π
 (((*Ë
p
Ë< 
mö_addªss
 || ((*ËpË>
max_addªss
);

1975 
	`as£π
 (((
p
->
¥ev_size
 + 
sz
Ë& (
	`GLRO
 (
dl_∑gesize
) - 1)) == 0);

1977 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

1979 
	}
}

1986 
	$do_check_‰ì_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
)

1988 
INTERNAL_SIZE_T
 
sz
 = 
p
->
size
 & ~(
PREV_INUSE
 | 
NON_MAIN_ARENA
);

1989 
mchunk±r
 
√xt
 = 
	`chunk_©_off£t
 (
p
, 
sz
);

1991 
	`do_check_chunk
 (
av
, 
p
);

1994 
	`as£π
 (!
	`öu£
 (
p
));

1995 
	`as£π
 (!
	`chunk_is_mm≠≥d
 (
p
));

1998 i‡((Ë(
sz
Ë>
MINSIZE
)

2000 
	`as£π
 ((
sz
 & 
MALLOC_ALIGN_MASK
) == 0);

2001 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

2003 
	`as£π
 (
√xt
->
¥ev_size
 =
sz
);

2005 
	`as£π
 (
	`¥ev_öu£
 (
p
));

2006 
	`as£π
 (
√xt
 =
av
->
t›
 || 
	`öu£
 (next));

2009 
	`as£π
 (
p
->
fd
->
bk
 ==Ö);

2010 
	`as£π
 (
p
->
bk
->
fd
 ==Ö);

2013 
	`as£π
 (
sz
 =
SIZE_SZ
);

2014 
	}
}

2021 
	$do_check_öu£_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
)

2023 
mchunk±r
 
√xt
;

2025 
	`do_check_chunk
 (
av
, 
p
);

2027 i‡(
	`chunk_is_mm≠≥d
 (
p
))

2031 
	`as£π
 (
	`öu£
 (
p
));

2033 
√xt
 = 
	`√xt_chunk
 (
p
);

2039 i‡(!
	`¥ev_öu£
 (
p
))

2042 
mchunk±r
 
¥v
 = 
	`¥ev_chunk
 (
p
);

2043 
	`as£π
 (
	`√xt_chunk
 (
¥v
Ë=
p
);

2044 
	`do_check_‰ì_chunk
 (
av
, 
¥v
);

2047 i‡(
√xt
 =
av
->
t›
)

2049 
	`as£π
 (
	`¥ev_öu£
 (
√xt
));

2050 
	`as£π
 (
	`chunksize
 (
√xt
Ë>
MINSIZE
);

2052 i‡(!
	`öu£
 (
√xt
))

2053 
	`do_check_‰ì_chunk
 (
av
, 
√xt
);

2054 
	}
}

2061 
	$do_check_ªmÆlo˚d_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
, 
INTERNAL_SIZE_T
 
s
)

2063 
INTERNAL_SIZE_T
 
sz
 = 
p
->
size
 & ~(
PREV_INUSE
 | 
NON_MAIN_ARENA
);

2065 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

2067 
	`as£π
 (
av
 =
	`¨ía_f‹_chunk
 (
p
));

2068 i‡(
	`chunk_n⁄_maö_¨ía
 (
p
))

2069 
	`as£π
 (
av
 !&
maö_¨ía
);

2071 
	`as£π
 (
av
 =&
maö_¨ía
);

2074 
	`do_check_öu£_chunk
 (
av
, 
p
);

2077 
	`as£π
 ((
sz
 & 
MALLOC_ALIGN_MASK
) == 0);

2078 
	`as£π
 ((Ë(
sz
Ë>
MINSIZE
);

2080 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

2082 
	`as£π
 ((Ë(
sz
Ë- (Ë(
s
) >= 0);

2083 
	`as£π
 ((Ë(
sz
Ë- (Ë(
s
 + 
MINSIZE
) < 0);

2084 
	}
}

2091 
	$do_check_mÆlo˚d_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
, 
INTERNAL_SIZE_T
 
s
)

2094 
	`do_check_ªmÆlo˚d_chunk
 (
av
, 
p
, 
s
);

2106 
	`as£π
 (
	`¥ev_öu£
 (
p
));

2107 
	}
}

2122 
	$do_check_mÆloc_°©e
 (
m°©e
 
av
)

2124 
i
;

2125 
mchunk±r
 
p
;

2126 
mchunk±r
 
q
;

2127 
mbö±r
 
b
;

2128 
idx
;

2129 
INTERNAL_SIZE_T
 
size
;

2130 
tŸÆ
 = 0;

2131 
max_Á°_bö
;

2134 
	`as£π
 ( (
INTERNAL_SIZE_T
) <=  (*));

2137 
	`as£π
 ((
MALLOC_ALIGNMENT
 & (MALLOC_ALIGNMENT - 1)) == 0);

2140 i‡(
av
->
t›
 =0 ||áv->t› =
	`öôül_t›
 (av))

2144 
	`as£π
 (
	`powîof2
(
	`GLRO
 (
dl_∑gesize
)));

2147 i‡(
av
 =&
maö_¨ía
 && 
	`c⁄tiguous
 (av))

2148 
	`as£π
 ((*Ë
mp_
.
sbrk_ba£
 + 
av
->
sy°em_mem
 ==

2149 (*Ë
av
->
t›
 + 
	`chunksize
 (av->top));

2154 
	`as£π
 ((
	`gë_max_Á°
 (Ë& ~1Ë<
	`ªque°2size
 (
MAX_FAST_SIZE
));

2156 
max_Á°_bö
 = 
	`Á°bö_ödex
 (
	`gë_max_Á°
 ());

2158 
i
 = 0; i < 
NFASTBINS
; ++i)

2160 
p
 = 
	`Á°bö
 (
av
, 
i
);

2174 i‡(
av
 =&
maö_¨ía
 && 
i
 > 
max_Á°_bö
)

2175 
	`as£π
 (
p
 == 0);

2177 
p
 != 0)

2180 
	`do_check_öu£_chunk
 (
av
, 
p
);

2181 
tŸÆ
 +
	`chunksize
 (
p
);

2183 
	`as£π
 (
	`Á°bö_ödex
 (
	`chunksize
 (
p
)Ë=
i
);

2184 
p
 =Ö->
fd
;

2188 i‡(
tŸÆ
 != 0)

2189 
	`as£π
 (
	`have_Á°chunks
 (
av
));

2190 i‡(!
	`have_Á°chunks
 (
av
))

2191 
	`as£π
 (
tŸÆ
 == 0);

2194 
i
 = 1; i < 
NBINS
; ++i)

2196 
b
 = 
	`bö_©
 (
av
, 
i
);

2199 i‡(
i
 >= 2)

2201 
böbô
 = 
	`gë_böm≠
 (
av
, 
i
);

2202 
em±y
 = 
	`œ°
 (
b
) == b;

2203 i‡(!
böbô
)

2204 
	`as£π
 (
em±y
);

2205 i‡(!
em±y
)

2206 
	`as£π
 (
böbô
);

2209 
p
 = 
	`œ°
 (
b
);Ö !b;Ö =Ö->
bk
)

2212 
	`do_check_‰ì_chunk
 (
av
, 
p
);

2213 
size
 = 
	`chunksize
 (
p
);

2214 
tŸÆ
 +
size
;

2215 i‡(
i
 >= 2)

2218 
idx
 = 
	`bö_ödex
 (
size
);

2219 
	`as£π
 (
idx
 =
i
);

2221 
	`as£π
 (
p
->
bk
 =
b
 ||

2222 (Ë
	`chunksize
 (
p
->
bk
) >= () chunksize (p));

2224 i‡(!
	`ö_smÆlbö_ønge
 (
size
))

2226 i‡(
p
->
fd_√xtsize
 !
NULL
)

2228 i‡(
p
->
fd_√xtsize
 ==Ö)

2229 
	`as£π
 (
p
->
bk_√xtsize
 ==Ö);

2232 i‡(
p
->
fd_√xtsize
 =
	`fú°
 (
b
))

2233 
	`as£π
 (
	`chunksize
 (
p
Ë< chunksizê’->
fd_√xtsize
));

2235 
	`as£π
 (
	`chunksize
 (
p
Ë> chunksizê’->
fd_√xtsize
));

2237 i‡(
p
 =
	`fú°
 (
b
))

2238 
	`as£π
 (
	`chunksize
 (
p
Ë> chunksizê’->
bk_√xtsize
));

2240 
	`as£π
 (
	`chunksize
 (
p
Ë< chunksizê’->
bk_√xtsize
));

2244 
	`as£π
 (
p
->
bk_√xtsize
 =
NULL
);

2247 i‡(!
	`ö_smÆlbö_ønge
 (
size
))

2248 
	`as£π
 (
p
->
fd_√xtsize
 =
NULL
 &&Ö->
bk_√xtsize
 == NULL);

2250 
q
 = 
	`√xt_chunk
 (
p
);

2251 (
q
 !
av
->
t›
 && 
	`öu£
 (q) &&

2252 (Ë(
	`chunksize
 (
q
)Ë>
MINSIZE
);

2253 
q
 = 
	`√xt_chunk
 (q))

2254 
	`do_check_öu£_chunk
 (
av
, 
q
);

2259 
	`check_chunk
 (
av
,áv->
t›
);

2260 
	}
}

2265 
	~"hooks.c
"

2278 
	$sysmÆloc
 (
INTERNAL_SIZE_T
 
nb
, 
m°©e
 
av
)

2280 
mchunk±r
 
ﬁd_t›
;

2281 
INTERNAL_SIZE_T
 
ﬁd_size
;

2282 *
ﬁd_íd
;

2284 
size
;

2285 *
brk
;

2287 
c‹ª˘i⁄
;

2288 *
¢d_brk
;

2290 
INTERNAL_SIZE_T
 
‰⁄t_mißlign
;

2291 
INTERNAL_SIZE_T
 
íd_mißlign
;

2292 *
Æig√d_brk
;

2294 
mchunk±r
 
p
;

2295 
mchunk±r
 
ªmaödî
;

2296 
ªmaödî_size
;

2299 
size_t
 
∑gesize
 = 
	`GLRO
 (
dl_∑gesize
);

2300 
boﬁ
 
åõd_mm≠
 = 
Ál£
;

2310 i‡(
av
 =
NULL


2311 || ((Ë(
nb
Ë>(Ë(
mp_
.
mm≠_thªshﬁd
)

2312 && (
mp_
.
n_mm≠s
 < mp_.
n_mm≠s_max
)))

2314 *
mm
;

2316 
åy_mm≠
:

2325 i‡(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
)

2326 
size
 = 
	`ALIGN_UP
 (
nb
 + 
SIZE_SZ
, 
∑gesize
);

2328 
size
 = 
	`ALIGN_UP
 (
nb
 + 
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
, 
∑gesize
);

2329 
åõd_mm≠
 = 
åue
;

2332 i‡((Ë(
size
Ë> (Ë(
nb
))

2334 
mm
 = (*Ë(
	`MMAP
 (0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 0));

2336 i‡(
mm
 !
MAP_FAILED
)

2346 i‡(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
)

2351 
	`as£π
 (((
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
mm
Ë& 
MALLOC_ALIGN_MASK
) == 0);

2352 
‰⁄t_mißlign
 = 0;

2355 
‰⁄t_mißlign
 = (
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
mm
Ë& 
MALLOC_ALIGN_MASK
;

2356 i‡(
‰⁄t_mißlign
 > 0)

2358 
c‹ª˘i⁄
 = 
MALLOC_ALIGNMENT
 - 
‰⁄t_mißlign
;

2359 
p
 = (
mchunk±r
Ë(
mm
 + 
c‹ª˘i⁄
);

2360 
p
->
¥ev_size
 = 
c‹ª˘i⁄
;

2361 
	`£t_hód
 (
p
, (
size
 - 
c‹ª˘i⁄
Ë| 
IS_MMAPPED
);

2365 
p
 = (
mchunk±r
Ë
mm
;

2366 
p
->
¥ev_size
 = 0;

2367 
	`£t_hód
 (
p
, 
size
 | 
IS_MMAPPED
);

2372 
√w
 = 
	`©omic_exch™ge_™d_add
 (&
mp_
.
n_mm≠s
, 1) + 1;

2373 
	`©omic_max
 (&
mp_
.
max_n_mm≠s
, 
√w
);

2375 
sum
;

2376 
sum
 = 
	`©omic_exch™ge_™d_add
 (&
mp_
.
mm≠≥d_mem
, 
size
) + size;

2377 
	`©omic_max
 (&
mp_
.
max_mm≠≥d_mem
, 
sum
);

2379 
	`check_chunk
 (
av
, 
p
);

2381  
	`chunk2mem
 (
p
);

2387 i‡(
av
 =
NULL
)

2392 
ﬁd_t›
 = 
av
->
t›
;

2393 
ﬁd_size
 = 
	`chunksize
 (
ﬁd_t›
);

2394 
ﬁd_íd
 = (*Ë(
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
));

2396 
brk
 = 
¢d_brk
 = (*Ë(
MORECORE_FAILURE
);

2403 
	`as£π
 ((
ﬁd_t›
 =
	`öôül_t›
 (
av
Ë&& 
ﬁd_size
 == 0) ||

2404 ((Ë(
ﬁd_size
Ë>
MINSIZE
 &&

2405 
	`¥ev_öu£
 (
ﬁd_t›
) &&

2406 ((Ë
ﬁd_íd
 & (
∑gesize
 - 1)) == 0));

2409 
	`as£π
 ((Ë(
ﬁd_size
Ë< (Ë(
nb
 + 
MINSIZE
));

2412 i‡(
av
 !&
maö_¨ía
)

2414 
hóp_öfo
 *
ﬁd_hóp
, *
hóp
;

2415 
size_t
 
ﬁd_hóp_size
;

2418 
ﬁd_hóp
 = 
	`hóp_f‹_±r
 (
ﬁd_t›
);

2419 
ﬁd_hóp_size
 = 
ﬁd_hóp
->
size
;

2420 i‡((Ë(
MINSIZE
 + 
nb
 - 
ﬁd_size
) > 0

2421 && 
	`grow_hóp
 (
ﬁd_hóp
, 
MINSIZE
 + 
nb
 - 
ﬁd_size
) == 0)

2423 
av
->
sy°em_mem
 +
ﬁd_hóp
->
size
 - 
ﬁd_hóp_size
;

2424 
	`£t_hód
 (
ﬁd_t›
, (((*Ë
ﬁd_hóp
 + old_hóp->
size
) - (*) old_top)

2425 | 
PREV_INUSE
);

2427 i‡((
hóp
 = 
	`√w_hóp
 (
nb
 + (
MINSIZE
 +  (*hóp)), 
mp_
.
t›_∑d
)))

2430 
hóp
->
¨_±r
 = 
av
;

2431 
hóp
->
¥ev
 = 
ﬁd_hóp
;

2432 
av
->
sy°em_mem
 +
hóp
->
size
;

2434 
	`t›
 (
av
Ë
	`chunk_©_off£t
 (
hóp
,  (*heap));

2435 
	`£t_hód
 (
	`t›
 (
av
), (
hóp
->
size
 -  (*hóp)Ë| 
PREV_INUSE
);

2442 
ﬁd_size
 = (ﬁd_sizê- 
MINSIZE
Ë& ~
MALLOC_ALIGN_MASK
;

2443 
	`£t_hód
 (
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
 + 2 * 
SIZE_SZ
), 0 | 
PREV_INUSE
);

2444 i‡(
ﬁd_size
 >
MINSIZE
)

2446 
	`£t_hód
 (
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
), (2 * 
SIZE_SZ
Ë| 
PREV_INUSE
);

2447 
	`£t_foŸ
 (
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
), (2 * 
SIZE_SZ
));

2448 
	`£t_hód
 (
ﬁd_t›
, 
ﬁd_size
 | 
PREV_INUSE
 | 
NON_MAIN_ARENA
);

2449 
	`_öt_‰ì
 (
av
, 
ﬁd_t›
, 1);

2453 
	`£t_hód
 (
ﬁd_t›
, (
ﬁd_size
 + 2 * 
SIZE_SZ
Ë| 
PREV_INUSE
);

2454 
	`£t_foŸ
 (
ﬁd_t›
, (
ﬁd_size
 + 2 * 
SIZE_SZ
));

2457 i‡(!
åõd_mm≠
)

2459 
åy_mm≠
;

2465 
size
 = 
nb
 + 
mp_
.
t›_∑d
 + 
MINSIZE
;

2473 i‡(
	`c⁄tiguous
 (
av
))

2474 
size
 -
ﬁd_size
;

2484 
size
 = 
	`ALIGN_UP
 (size, 
∑gesize
);

2492 i‡(
size
 > 0)

2494 
brk
 = (*Ë(
	`MORECORE
 (
size
));

2495 
	`LIBC_PROBE
 (
mem‹y_sbrk_m‹e
, 2, 
brk
, 
size
);

2498 i‡(
brk
 !(*Ë(
MORECORE_FAILURE
))

2501 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

2502 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2503 (*
hook
)();

2517 i‡(
	`c⁄tiguous
 (
av
))

2518 
size
 = 
	`ALIGN_UP
 (sizê+ 
ﬁd_size
, 
∑gesize
);

2521 i‡((Ë(
size
Ë< (Ë(
MMAP_AS_MORECORE_SIZE
))

2522 
size
 = 
MMAP_AS_MORECORE_SIZE
;

2525 i‡((Ë(
size
Ë> (Ë(
nb
))

2527 *
mbrk
 = (*Ë(
	`MMAP
 (0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 0));

2529 i‡(
mbrk
 !
MAP_FAILED
)

2532 
brk
 = 
mbrk
;

2533 
¢d_brk
 = 
brk
 + 
size
;

2541 
	`£t_n⁄c⁄tiguous
 (
av
);

2546 i‡(
brk
 !(*Ë(
MORECORE_FAILURE
))

2548 i‡(
mp_
.
sbrk_ba£
 == 0)

2549 
mp_
.
sbrk_ba£
 = 
brk
;

2550 
av
->
sy°em_mem
 +
size
;

2556 i‡(
brk
 =
ﬁd_íd
 && 
¢d_brk
 =(*Ë(
MORECORE_FAILURE
))

2557 
	`£t_hód
 (
ﬁd_t›
, (
size
 + 
ﬁd_size
Ë| 
PREV_INUSE
);

2559 i‡(
	`c⁄tiguous
 (
av
Ë&& 
ﬁd_size
 && 
brk
 < 
ﬁd_íd
)

2562 
	`mÆloc_¥öãº
 (3, "bªakádju°edÅÿ‰ì mÆlo¯•a˚", 
brk
,

2563 
av
);

2587 
‰⁄t_mißlign
 = 0;

2588 
íd_mißlign
 = 0;

2589 
c‹ª˘i⁄
 = 0;

2590 
Æig√d_brk
 = 
brk
;

2593 i‡(
	`c⁄tiguous
 (
av
))

2596 i‡(
ﬁd_size
)

2597 
av
->
sy°em_mem
 +
brk
 - 
ﬁd_íd
;

2601 
‰⁄t_mißlign
 = (
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
;

2602 i‡(
‰⁄t_mißlign
 > 0)

2612 
c‹ª˘i⁄
 = 
MALLOC_ALIGNMENT
 - 
‰⁄t_mißlign
;

2613 
Æig√d_brk
 +
c‹ª˘i⁄
;

2621 
c‹ª˘i⁄
 +
ﬁd_size
;

2624 
íd_mißlign
 = (
INTERNAL_SIZE_T
Ë(
brk
 + 
size
 + 
c‹ª˘i⁄
);

2625 
c‹ª˘i⁄
 +(
	`ALIGN_UP
 (
íd_mißlign
, 
∑gesize
)) -Énd_misalign;

2627 
	`as£π
 (
c‹ª˘i⁄
 >= 0);

2628 
¢d_brk
 = (*Ë(
	`MORECORE
 (
c‹ª˘i⁄
));

2640 i‡(
¢d_brk
 =(*Ë(
MORECORE_FAILURE
))

2642 
c‹ª˘i⁄
 = 0;

2643 
¢d_brk
 = (*Ë(
	`MORECORE
 (0));

2648 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

2649 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2650 (*
hook
)();

2657 i‡(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
)

2659 
	`as£π
 (((Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
) == 0);

2662 
‰⁄t_mißlign
 = (
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
;

2663 i‡(
‰⁄t_mißlign
 > 0)

2673 
Æig√d_brk
 +
MALLOC_ALIGNMENT
 - 
‰⁄t_mißlign
;

2678 i‡(
¢d_brk
 =(*Ë(
MORECORE_FAILURE
))

2680 
¢d_brk
 = (*Ë(
	`MORECORE
 (0));

2685 i‡(
¢d_brk
 !(*Ë(
MORECORE_FAILURE
))

2687 
av
->
t›
 = (
mchunk±r
Ë
Æig√d_brk
;

2688 
	`£t_hód
 (
av
->
t›
, (
¢d_brk
 - 
Æig√d_brk
 + 
c‹ª˘i⁄
Ë| 
PREV_INUSE
);

2689 
av
->
sy°em_mem
 +
c‹ª˘i⁄
;

2700 i‡(
ﬁd_size
 != 0)

2707 
ﬁd_size
 = (ﬁd_sizê- 4 * 
SIZE_SZ
Ë& ~
MALLOC_ALIGN_MASK
;

2708 
	`£t_hód
 (
ﬁd_t›
, 
ﬁd_size
 | 
PREV_INUSE
);

2716 
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
)->
size
 =

2717 (2 * 
SIZE_SZ
Ë| 
PREV_INUSE
;

2719 
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
 + 2 * 
SIZE_SZ
)->
size
 =

2720 (2 * 
SIZE_SZ
Ë| 
PREV_INUSE
;

2723 i‡(
ﬁd_size
 >
MINSIZE
)

2725 
	`_öt_‰ì
 (
av
, 
ﬁd_t›
, 1);

2733 i‡((Ë
av
->
sy°em_mem
 > (Ë◊v->
max_sy°em_mem
))

2734 
av
->
max_sy°em_mem
 =áv->
sy°em_mem
;

2735 
	`check_mÆloc_°©e
 (
av
);

2738 
p
 = 
av
->
t›
;

2739 
size
 = 
	`chunksize
 (
p
);

2742 i‡((Ë(
size
Ë>(Ë(
nb
 + 
MINSIZE
))

2744 
ªmaödî_size
 = 
size
 - 
nb
;

2745 
ªmaödî
 = 
	`chunk_©_off£t
 (
p
, 
nb
);

2746 
av
->
t›
 = 
ªmaödî
;

2747 
	`£t_hód
 (
p
, 
nb
 | 
PREV_INUSE
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

2748 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

2749 
	`check_mÆlo˚d_chunk
 (
av
, 
p
, 
nb
);

2750  
	`chunk2mem
 (
p
);

2754 
	`__£t_î∫o
 (
ENOMEM
);

2756 
	}
}

2769 
	$sy°rim
 (
size_t
 
∑d
, 
m°©e
 
av
)

2771 
t›_size
;

2772 
exåa
;

2773 
ªÀa£d
;

2774 *
cuºít_brk
;

2775 *
√w_brk
;

2776 
size_t
 
∑gesize
;

2777 
t›_¨ó
;

2779 
∑gesize
 = 
	`GLRO
 (
dl_∑gesize
);

2780 
t›_size
 = 
	`chunksize
 (
av
->
t›
);

2782 
t›_¨ó
 = 
t›_size
 - 
MINSIZE
 - 1;

2783 i‡(
t›_¨ó
 <
∑d
)

2787 
exåa
 = 
	`ALIGN_DOWN
(
t›_¨ó
 - 
∑d
, 
∑gesize
);

2789 i‡(
exåa
 == 0)

2796 
cuºít_brk
 = (*Ë(
	`MORECORE
 (0));

2797 i‡(
cuºít_brk
 =(*Ë(
av
->
t›
Ë+ 
t›_size
)

2809 
	`MORECORE
 (-
exåa
);

2811 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

2812 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2813 (*
hook
)();

2814 
√w_brk
 = (*Ë(
	`MORECORE
 (0));

2816 
	`LIBC_PROBE
 (
mem‹y_sbrk_Àss
, 2, 
√w_brk
, 
exåa
);

2818 i‡(
√w_brk
 !(*Ë
MORECORE_FAILURE
)

2820 
ªÀa£d
 = (Ë(
cuºít_brk
 - 
√w_brk
);

2822 i‡(
ªÀa£d
 != 0)

2825 
av
->
sy°em_mem
 -
ªÀa£d
;

2826 
	`£t_hód
 (
av
->
t›
, (
t›_size
 - 
ªÀa£d
Ë| 
PREV_INUSE
);

2827 
	`check_mÆloc_°©e
 (
av
);

2833 
	}
}

2836 
öã∫Æ_fun˘i⁄


2837 
	$munm≠_chunk
 (
mchunk±r
 
p
)

2839 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
 (
p
);

2841 
	`as£π
 (
	`chunk_is_mm≠≥d
 (
p
));

2845 i‡(
	`DUMPED_MAIN_ARENA_CHUNK
 (
p
))

2848 
uöçå_t
 
block
 = (uöçå_tË
p
 -Ö->
¥ev_size
;

2849 
size_t
 
tŸÆ_size
 = 
p
->
¥ev_size
 + 
size
;

2855 i‡(
	`__buûtö_ex≥˘
 (((
block
 | 
tŸÆ_size
Ë& (
	`GLRO
 (
dl_∑gesize
) - 1)) != 0, 0))

2857 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "munmap_chunk(): invalidÖointer",

2858 
	`chunk2mem
 (
p
), 
NULL
);

2862 
	`©omic_de¸emít
 (&
mp_
.
n_mm≠s
);

2863 
	`©omic_add
 (&
mp_
.
mm≠≥d_mem
, -
tŸÆ_size
);

2868 
	`__munm≠
 ((*Ë
block
, 
tŸÆ_size
);

2869 
	}
}

2871 #i‡
HAVE_MREMAP


2873 
mchunk±r


2874 
öã∫Æ_fun˘i⁄


2875 
	$mªm≠_chunk
 (
mchunk±r
 
p
, 
size_t
 
√w_size
)

2877 
size_t
 
∑gesize
 = 
	`GLRO
 (
dl_∑gesize
);

2878 
INTERNAL_SIZE_T
 
off£t
 = 
p
->
¥ev_size
;

2879 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
 (
p
);

2880 *
˝
;

2882 
	`as£π
 (
	`chunk_is_mm≠≥d
 (
p
));

2883 
	`as£π
 (((
size
 + 
off£t
Ë& (
	`GLRO
 (
dl_∑gesize
) - 1)) == 0);

2886 
√w_size
 = 
	`ALIGN_UP
 (√w_sizê+ 
off£t
 + 
SIZE_SZ
, 
∑gesize
);

2889 i‡(
size
 + 
off£t
 =
√w_size
)

2890  
p
;

2892 
˝
 = (*Ë
	`__mªm≠
 ((*Ë
p
 - 
off£t
, 
size
 + off£t, 
√w_size
,

2893 
MREMAP_MAYMOVE
);

2895 i‡(
˝
 =
MAP_FAILED
)

2898 
p
 = (
mchunk±r
Ë(
˝
 + 
off£t
);

2900 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

2902 
	`as£π
 ((
p
->
¥ev_size
 =
off£t
));

2903 
	`£t_hód
 (
p
, (
√w_size
 - 
off£t
Ë| 
IS_MMAPPED
);

2905 
INTERNAL_SIZE_T
 
√w
;

2906 
√w
 = 
	`©omic_exch™ge_™d_add
 (&
mp_
.
mm≠≥d_mem
, 
√w_size
 - 
size
 - 
off£t
)

2907 + 
√w_size
 - 
size
 - 
off£t
;

2908 
	`©omic_max
 (&
mp_
.
max_mm≠≥d_mem
, 
√w
);

2909  
p
;

2910 
	}
}

2916 
	$__libc_mÆloc
 (
size_t
 
byãs
)

2918 
m°©e
 
¨_±r
;

2919 *
vi˘im
;

2921 *(*
hook
Ë(
size_t
, const *)

2922 
	`©omic_f‹˚d_ªad
 (
__mÆloc_hook
);

2923 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2924  (*
hook
)(
byãs
, 
	`RETURN_ADDRESS
 (0));

2926 
	`¨ía_gë
 (
¨_±r
, 
byãs
);

2928 
vi˘im
 = 
	`_öt_mÆloc
 (
¨_±r
, 
byãs
);

2931 i‡(!
vi˘im
 && 
¨_±r
 !
NULL
)

2933 
	`LIBC_PROBE
 (
mem‹y_mÆloc_ªåy
, 1, 
byãs
);

2934 
¨_±r
 = 
	`¨ía_gë_ªåy
 (¨_±r, 
byãs
);

2935 
vi˘im
 = 
	`_öt_mÆloc
 (
¨_±r
, 
byãs
);

2938 i‡(
¨_±r
 !
NULL
)

2939 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

2941 
	`as£π
 (!
vi˘im
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (victim)) ||

2942 
¨_±r
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
vi˘im
)));

2943  
vi˘im
;

2944 
	}
}

2945 
	$libc_hiddí_def
 (
__libc_mÆloc
)

2948 
	$__libc_‰ì
 (*
mem
)

2950 
m°©e
 
¨_±r
;

2951 
mchunk±r
 
p
;

2953 (*
hook
) (*, const *)

2954 
	`©omic_f‹˚d_ªad
 (
__‰ì_hook
);

2955 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2957 (*
hook
)(
mem
, 
	`RETURN_ADDRESS
 (0));

2961 i‡(
mem
 == 0)

2964 
p
 = 
	`mem2chunk
 (
mem
);

2966 i‡(
	`chunk_is_mm≠≥d
 (
p
))

2970 i‡(!
mp_
.
no_dyn_thªshﬁd


2971 && 
p
->
size
 > 
mp_
.
mm≠_thªshﬁd


2972 && 
p
->
size
 <
DEFAULT_MMAP_THRESHOLD_MAX


2973 && !
	`DUMPED_MAIN_ARENA_CHUNK
 (
p
))

2975 
mp_
.
mm≠_thªshﬁd
 = 
	`chunksize
 (
p
);

2976 
mp_
.
åim_thªshﬁd
 = 2 * mp_.
mm≠_thªshﬁd
;

2977 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_‰ì_dyn_thªshﬁds
, 2,

2978 
mp_
.
mm≠_thªshﬁd
, mp_.
åim_thªshﬁd
);

2980 
	`munm≠_chunk
 (
p
);

2984 
¨_±r
 = 
	`¨ía_f‹_chunk
 (
p
);

2985 
	`_öt_‰ì
 (
¨_±r
, 
p
, 0);

2986 
	}
}

2987 
	$libc_hiddí_def
 (
__libc_‰ì
)

2990 
	$__libc_ªÆloc
 (*
ﬁdmem
, 
size_t
 
byãs
)

2992 
m°©e
 
¨_±r
;

2993 
INTERNAL_SIZE_T
 
nb
;

2995 *
√wp
;

2997 *(*
hook
Ë(*, 
size_t
, const *) =

2998 
	`©omic_f‹˚d_ªad
 (
__ªÆloc_hook
);

2999 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

3000  (*
hook
)(
ﬁdmem
, 
byãs
, 
	`RETURN_ADDRESS
 (0));

3002 #i‡
REALLOC_ZERO_BYTES_FREES


3003 i‡(
byãs
 =0 && 
ﬁdmem
 !
NULL
)

3005 
	`__libc_‰ì
 (
ﬁdmem
);  0;

3010 i‡(
ﬁdmem
 == 0)

3011  
	`__libc_mÆloc
 (
byãs
);

3014 c⁄° 
mchunk±r
 
ﬁdp
 = 
	`mem2chunk
 (
ﬁdmem
);

3016 c⁄° 
INTERNAL_SIZE_T
 
ﬁdsize
 = 
	`chunksize
 (
ﬁdp
);

3018 i‡(
	`chunk_is_mm≠≥d
 (
ﬁdp
))

3019 
¨_±r
 = 
NULL
;

3021 
¨_±r
 = 
	`¨ía_f‹_chunk
 (
ﬁdp
);

3029 i‡((
	`__buûtö_ex≥˘
 ((
uöçå_t
Ë
ﬁdp
 > (uöçå_tË-
ﬁdsize
, 0)

3030 || 
	`__buûtö_ex≥˘
 (
	`mißlig√d_chunk
 (
ﬁdp
), 0))

3031 && !
	`DUMPED_MAIN_ARENA_CHUNK
 (
ﬁdp
))

3033 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "ªÆloc(): invÆidÖoöãr", 
ﬁdmem
,

3034 
¨_±r
);

3035  
NULL
;

3038 
	`checked_ªque°2size
 (
byãs
, 
nb
);

3040 i‡(
	`chunk_is_mm≠≥d
 (
ﬁdp
))

3044 i‡(
	`DUMPED_MAIN_ARENA_CHUNK
 (
ﬁdp
))

3047 *
√wmem
 = 
	`__libc_mÆloc
 (
byãs
);

3048 i‡(
√wmem
 == 0)

3049  
NULL
;

3054 i‡(
byãs
 > 
ﬁdsize
 - 
SIZE_SZ
)

3055 
byãs
 = 
ﬁdsize
 - 
SIZE_SZ
;

3056 
	`mem˝y
 (
√wmem
, 
ﬁdmem
, 
byãs
);

3057  
√wmem
;

3060 *
√wmem
;

3062 #i‡
HAVE_MREMAP


3063 
√wp
 = 
	`mªm≠_chunk
 (
ﬁdp
, 
nb
);

3064 i‡(
√wp
)

3065  
	`chunk2mem
 (
√wp
);

3068 i‡(
ﬁdsize
 - 
SIZE_SZ
 >
nb
)

3069  
ﬁdmem
;

3072 
√wmem
 = 
	`__libc_mÆloc
 (
byãs
);

3073 i‡(
√wmem
 == 0)

3076 
	`mem˝y
 (
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 2 * 
SIZE_SZ
);

3077 
	`munm≠_chunk
 (
ﬁdp
);

3078  
√wmem
;

3081 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

3083 
√wp
 = 
	`_öt_ªÆloc
 (
¨_±r
, 
ﬁdp
, 
ﬁdsize
, 
nb
);

3085 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

3086 
	`as£π
 (!
√wp
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (newp)) ||

3087 
¨_±r
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
√wp
)));

3089 i‡(
√wp
 =
NULL
)

3092 
	`LIBC_PROBE
 (
mem‹y_ªÆloc_ªåy
, 2, 
byãs
, 
ﬁdmem
);

3093 
√wp
 = 
	`__libc_mÆloc
 (
byãs
);

3094 i‡(
√wp
 !
NULL
)

3096 
	`mem˝y
 (
√wp
, 
ﬁdmem
, 
ﬁdsize
 - 
SIZE_SZ
);

3097 
	`_öt_‰ì
 (
¨_±r
, 
ﬁdp
, 0);

3101  
√wp
;

3102 
	}
}

3103 
	$libc_hiddí_def
 (
__libc_ªÆloc
)

3106 
	$__libc_memÆign
 (
size_t
 
Æignmít
, size_à
byãs
)

3108 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

3109  
	`_mid_memÆign
 (
Æignmít
, 
byãs
, 
addªss
);

3110 
	}
}

3113 
	$_mid_memÆign
 (
size_t
 
Æignmít
, size_à
byãs
, *
addªss
)

3115 
m°©e
 
¨_±r
;

3116 *
p
;

3118 *(*
hook
Ë(
size_t
, size_t, const *) =

3119 
	`©omic_f‹˚d_ªad
 (
__memÆign_hook
);

3120 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

3121  (*
hook
)(
Æignmít
, 
byãs
, 
addªss
);

3124 i‡(
Æignmít
 <
MALLOC_ALIGNMENT
)

3125  
	`__libc_mÆloc
 (
byãs
);

3128 i‡(
Æignmít
 < 
MINSIZE
)

3129 
Æignmít
 = 
MINSIZE
;

3133 i‡(
Æignmít
 > 
SIZE_MAX
 / 2 + 1)

3135 
	`__£t_î∫o
 (
EINVAL
);

3140 i‡(
byãs
 > 
SIZE_MAX
 - 
Æignmít
 - 
MINSIZE
)

3142 
	`__£t_î∫o
 (
ENOMEM
);

3148 i‡(!
	`powîof2
 (
Æignmít
))

3150 
size_t
 
a
 = 
MALLOC_ALIGNMENT
 * 2;

3151 
a
 < 
Æignmít
)

3152 
a
 <<= 1;

3153 
Æignmít
 = 
a
;

3156 
	`¨ía_gë
 (
¨_±r
, 
byãs
 + 
Æignmít
 + 
MINSIZE
);

3158 
p
 = 
	`_öt_memÆign
 (
¨_±r
, 
Æignmít
, 
byãs
);

3159 i‡(!
p
 && 
¨_±r
 !
NULL
)

3161 
	`LIBC_PROBE
 (
mem‹y_memÆign_ªåy
, 2, 
byãs
, 
Æignmít
);

3162 
¨_±r
 = 
	`¨ía_gë_ªåy
 (¨_±r, 
byãs
);

3163 
p
 = 
	`_öt_memÆign
 (
¨_±r
, 
Æignmít
, 
byãs
);

3166 i‡(
¨_±r
 !
NULL
)

3167 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

3169 
	`as£π
 (!
p
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (p)) ||

3170 
¨_±r
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
p
)));

3171  
p
;

3172 
	}
}

3174 
	$wók_Æüs
 (
__libc_memÆign
, 
Æig√d_Æloc
)

3175 
	$libc_hiddí_def
 (
__libc_memÆign
)

3178 
	$__libc_vÆloc
 (
size_t
 
byãs
)

3180 i‡(
__mÆloc_öôülized
 < 0)

3181 
	`±mÆloc_öô
 ();

3183 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

3184 
size_t
 
∑gesize
 = 
	`GLRO
 (
dl_∑gesize
);

3185  
	`_mid_memÆign
 (
∑gesize
, 
byãs
, 
addªss
);

3186 
	}
}

3189 
	$__libc_pvÆloc
 (
size_t
 
byãs
)

3191 i‡(
__mÆloc_öôülized
 < 0)

3192 
	`±mÆloc_öô
 ();

3194 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

3195 
size_t
 
∑gesize
 = 
	`GLRO
 (
dl_∑gesize
);

3196 
size_t
 
rounded_byãs
 = 
	`ALIGN_UP
 (
byãs
, 
∑gesize
);

3199 i‡(
byãs
 > 
SIZE_MAX
 - 2 * 
∑gesize
 - 
MINSIZE
)

3201 
	`__£t_î∫o
 (
ENOMEM
);

3205  
	`_mid_memÆign
 (
∑gesize
, 
rounded_byãs
, 
addªss
);

3206 
	}
}

3209 
	$__libc_ˇŒoc
 (
size_t
 
n
, size_à
ñem_size
)

3211 
m°©e
 
av
;

3212 
mchunk±r
 
ﬁdt›
, 
p
;

3213 
INTERNAL_SIZE_T
 
byãs
, 
sz
, 
csz
, 
ﬁdt›size
;

3214 *
mem
;

3215 
˛órsize
;

3216 
n˛órs
;

3217 
INTERNAL_SIZE_T
 *
d
;

3220 
byãs
 = 
n
 * 
ñem_size
;

3221 
	#HALF_INTERNAL_SIZE_T
 \

3222 (((
INTERNAL_SIZE_T
Ë1Ë<< (8 *  (INTERNAL_SIZE_TË/ 2))

	)

3223 i‡(
	`__buûtö_ex≥˘
 ((
n
 | 
ñem_size
Ë>
HALF_INTERNAL_SIZE_T
, 0))

3225 i‡(
ñem_size
 !0 && 
byãs
 /ÉÀm_sizê!
n
)

3227 
	`__£t_î∫o
 (
ENOMEM
);

3232 *(*
hook
Ë(
size_t
, const *) =

3233 
	`©omic_f‹˚d_ªad
 (
__mÆloc_hook
);

3234 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

3236 
sz
 = 
byãs
;

3237 
mem
 = (*
hook
)(
sz
, 
	`RETURN_ADDRESS
 (0));

3238 i‡(
mem
 == 0)

3241  
	`mem£t
 (
mem
, 0, 
sz
);

3244 
sz
 = 
byãs
;

3246 
	`¨ía_gë
 (
av
, 
sz
);

3247 i‡(
av
)

3251 #i‡
MORECORE_CLEARS


3252 
ﬁdt›
 = 
	`t›
 (
av
);

3253 
ﬁdt›size
 = 
	`chunksize
 (
	`t›
 (
av
));

3254 #i‡
MORECORE_CLEARS
 < 2

3256 i‡(
av
 =&
maö_¨ía
 &&

3257 
ﬁdt›size
 < 
mp_
.
sbrk_ba£
 + 
av
->
max_sy°em_mem
 - (*Ë
ﬁdt›
)

3258 
ﬁdt›size
 = (
mp_
.
sbrk_ba£
 + 
av
->
max_sy°em_mem
 - (*Ë
ﬁdt›
);

3260 i‡(
av
 !&
maö_¨ía
)

3262 
hóp_öfo
 *
hóp
 = 
	`hóp_f‹_±r
 (
ﬁdt›
);

3263 i‡(
ﬁdt›size
 < (*Ë
hóp
 + hóp->
m¥Ÿe˘_size
 - (*Ë
ﬁdt›
)

3264 
ﬁdt›size
 = (*Ë
hóp
 + hóp->
m¥Ÿe˘_size
 - (*Ë
ﬁdt›
;

3271 
ﬁdt›
 = 0;

3272 
ﬁdt›size
 = 0;

3274 
mem
 = 
	`_öt_mÆloc
 (
av
, 
sz
);

3277 
	`as£π
 (!
mem
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (mem)) ||

3278 
av
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
mem
)));

3280 i‡(
mem
 =0 && 
av
 !
NULL
)

3282 
	`LIBC_PROBE
 (
mem‹y_ˇŒoc_ªåy
, 1, 
sz
);

3283 
av
 = 
	`¨ía_gë_ªåy
 (av, 
sz
);

3284 
mem
 = 
	`_öt_mÆloc
 (
av
, 
sz
);

3287 i‡(
av
 !
NULL
)

3288 (Ë
	`muãx_u∆ock
 (&
av
->
muãx
);

3291 i‡(
mem
 == 0)

3294 
p
 = 
	`mem2chunk
 (
mem
);

3297 i‡(
	`chunk_is_mm≠≥d
 (
p
))

3299 i‡(
	`__buûtö_ex≥˘
 (
≥πurb_byã
, 0))

3300  
	`mem£t
 (
mem
, 0, 
sz
);

3302  
mem
;

3305 
csz
 = 
	`chunksize
 (
p
);

3307 #i‡
MORECORE_CLEARS


3308 i‡(
≥πurb_byã
 =0 && (
p
 =
ﬁdt›
 && 
csz
 > 
ﬁdt›size
))

3311 
csz
 = 
ﬁdt›size
;

3318 
d
 = (
INTERNAL_SIZE_T
 *Ë
mem
;

3319 
˛órsize
 = 
csz
 - 
SIZE_SZ
;

3320 
n˛órs
 = 
˛órsize
 /  (
INTERNAL_SIZE_T
);

3321 
	`as£π
 (
n˛órs
 >= 3);

3323 i‡(
n˛órs
 > 9)

3324  
	`mem£t
 (
d
, 0, 
˛órsize
);

3328 *(
d
 + 0) = 0;

3329 *(
d
 + 1) = 0;

3330 *(
d
 + 2) = 0;

3331 i‡(
n˛órs
 > 4)

3333 *(
d
 + 3) = 0;

3334 *(
d
 + 4) = 0;

3335 i‡(
n˛órs
 > 6)

3337 *(
d
 + 5) = 0;

3338 *(
d
 + 6) = 0;

3339 i‡(
n˛órs
 > 8)

3341 *(
d
 + 7) = 0;

3342 *(
d
 + 8) = 0;

3348  
mem
;

3349 
	}
}

3356 
	$_öt_mÆloc
 (
m°©e
 
av
, 
size_t
 
byãs
)

3358 
INTERNAL_SIZE_T
 
nb
;

3359 
idx
;

3360 
mbö±r
 
bö
;

3362 
mchunk±r
 
vi˘im
;

3363 
INTERNAL_SIZE_T
 
size
;

3364 
vi˘im_ödex
;

3366 
mchunk±r
 
ªmaödî
;

3367 
ªmaödî_size
;

3369 
block
;

3370 
bô
;

3371 
m≠
;

3373 
mchunk±r
 
fwd
;

3374 
mchunk±r
 
bck
;

3376 c⁄° *
îr°r
 = 
NULL
;

3387 
	`checked_ªque°2size
 (
byãs
, 
nb
);

3391 i‡(
	`__glibc_u∆ikñy
 (
av
 =
NULL
))

3393 *
p
 = 
	`sysmÆloc
 (
nb
, 
av
);

3394 i‡(
p
 !
NULL
)

3395 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3396  
p
;

3405 i‡((Ë(
nb
Ë<(Ë(
	`gë_max_Á°
 ()))

3407 
idx
 = 
	`Á°bö_ödex
 (
nb
);

3408 
mÁ°bö±r
 *
fb
 = &
	`Á°bö
 (
av
, 
idx
);

3409 
mchunk±r
 
µ
 = *
fb
;

3412 
vi˘im
 = 
µ
;

3413 i‡(
vi˘im
 =
NULL
)

3416 (
µ
 = 
	`ˇtomic_com∑ª_™d_exch™ge_vÆ_acq
 (
fb
, 
vi˘im
->
fd
, victim))

3417 !
vi˘im
);

3418 i‡(
vi˘im
 != 0)

3420 i‡(
	`__buûtö_ex≥˘
 (
	`Á°bö_ödex
 (
	`chunksize
 (
vi˘im
)Ë!
idx
, 0))

3422 
îr°r
 = "malloc(): memory corruption (fast)";

3423 
îrout
:

3424 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, 
îr°r
, 
	`chunk2mem
 (
vi˘im
), 
av
);

3425  
NULL
;

3427 
	`check_ªmÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3428 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3429 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3430  
p
;

3442 i‡(
	`ö_smÆlbö_ønge
 (
nb
))

3444 
idx
 = 
	`smÆlbö_ödex
 (
nb
);

3445 
bö
 = 
	`bö_©
 (
av
, 
idx
);

3447 i‡((
vi˘im
 = 
	`œ°
 (
bö
)) != bin)

3449 i‡(
vi˘im
 == 0)

3450 
	`mÆloc_c⁄sﬁid©e
 (
av
);

3453 
bck
 = 
vi˘im
->
bk
;

3454 i‡(
	`__glibc_u∆ikñy
 (
bck
->
fd
 !
vi˘im
))

3456 
îr°r
 = "malloc(): smallbin doubleÜinkedÜist corrupted";

3457 
îrout
;

3459 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
nb
);

3460 
bö
->
bk
 = 
bck
;

3461 
bck
->
fd
 = 
bö
;

3463 i‡(
av
 !&
maö_¨ía
)

3464 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3465 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3466 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3467 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3468  
p
;

3486 
idx
 = 
	`œrgebö_ödex
 (
nb
);

3487 i‡(
	`have_Á°chunks
 (
av
))

3488 
	`mÆloc_c⁄sﬁid©e
 (
av
);

3506 
ôîs
 = 0;

3507 (
vi˘im
 = 
	`uns‹ãd_chunks
 (
av
)->
bk
) != unsorted_chunks (av))

3509 
bck
 = 
vi˘im
->
bk
;

3510 i‡(
	`__buûtö_ex≥˘
 (
vi˘im
->
size
 <2 * 
SIZE_SZ
, 0)

3511 || 
	`__buûtö_ex≥˘
 (
vi˘im
->
size
 > 
av
->
sy°em_mem
, 0))

3512 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "malloc(): memory corruption",

3513 
	`chunk2mem
 (
vi˘im
), 
av
);

3514 
size
 = 
	`chunksize
 (
vi˘im
);

3524 i‡(
	`ö_smÆlbö_ønge
 (
nb
) &&

3525 
bck
 =
	`uns‹ãd_chunks
 (
av
) &&

3526 
vi˘im
 =
av
->
œ°_ªmaödî
 &&

3527 (Ë(
size
Ë> (Ë(
nb
 + 
MINSIZE
))

3530 
ªmaödî_size
 = 
size
 - 
nb
;

3531 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3532 
	`uns‹ãd_chunks
 (
av
)->
bk
 = uns‹ãd_chunk†◊v)->
fd
 = 
ªmaödî
;

3533 
av
->
œ°_ªmaödî
 = 
ªmaödî
;

3534 
ªmaödî
->
bk
 =Ñemaödî->
fd
 = 
	`uns‹ãd_chunks
 (
av
);

3535 i‡(!
	`ö_smÆlbö_ønge
 (
ªmaödî_size
))

3537 
ªmaödî
->
fd_√xtsize
 = 
NULL
;

3538 
ªmaödî
->
bk_√xtsize
 = 
NULL
;

3541 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3542 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3543 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3544 
	`£t_foŸ
 (
ªmaödî
, 
ªmaödî_size
);

3546 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3547 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3548 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3549  
p
;

3553 
	`uns‹ãd_chunks
 (
av
)->
bk
 = 
bck
;

3554 
bck
->
fd
 = 
	`uns‹ãd_chunks
 (
av
);

3558 i‡(
size
 =
nb
)

3560 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
size
);

3561 i‡(
av
 !&
maö_¨ía
)

3562 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3563 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3564 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3565 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3566  
p
;

3571 i‡(
	`ö_smÆlbö_ønge
 (
size
))

3573 
vi˘im_ödex
 = 
	`smÆlbö_ödex
 (
size
);

3574 
bck
 = 
	`bö_©
 (
av
, 
vi˘im_ödex
);

3575 
fwd
 = 
bck
->
fd
;

3579 
vi˘im_ödex
 = 
	`œrgebö_ödex
 (
size
);

3580 
bck
 = 
	`bö_©
 (
av
, 
vi˘im_ödex
);

3581 
fwd
 = 
bck
->
fd
;

3584 i‡(
fwd
 !
bck
)

3587 
size
 |
PREV_INUSE
;

3589 
	`as£π
 ((
bck
->
bk
->
size
 & 
NON_MAIN_ARENA
) == 0);

3590 i‡((Ë(
size
Ë< (Ë(
bck
->
bk
->size))

3592 
fwd
 = 
bck
;

3593 
bck
 = bck->
bk
;

3595 
vi˘im
->
fd_√xtsize
 = 
fwd
->
fd
;

3596 
vi˘im
->
bk_√xtsize
 = 
fwd
->
fd
->bk_nextsize;

3597 
fwd
->
fd
->
bk_√xtsize
 = 
vi˘im
->bk_√xtsize->
fd_√xtsize
 = victim;

3601 
	`as£π
 ((
fwd
->
size
 & 
NON_MAIN_ARENA
) == 0);

3602 (Ë
size
 < 
fwd
->size)

3604 
fwd
 = fwd->
fd_√xtsize
;

3605 
	`as£π
 ((
fwd
->
size
 & 
NON_MAIN_ARENA
) == 0);

3608 i‡((Ë
size
 =(Ë
fwd
->size)

3610 
fwd
 = fwd->
fd
;

3613 
vi˘im
->
fd_√xtsize
 = 
fwd
;

3614 
vi˘im
->
bk_√xtsize
 = 
fwd
->bk_nextsize;

3615 
fwd
->
bk_√xtsize
 = 
vi˘im
;

3616 
vi˘im
->
bk_√xtsize
->
fd_√xtsize
 = victim;

3618 
bck
 = 
fwd
->
bk
;

3622 
vi˘im
->
fd_√xtsize
 = vi˘im->
bk_√xtsize
 = victim;

3625 
	`m¨k_bö
 (
av
, 
vi˘im_ödex
);

3626 
vi˘im
->
bk
 = 
bck
;

3627 
vi˘im
->
fd
 = 
fwd
;

3628 
fwd
->
bk
 = 
vi˘im
;

3629 
bck
->
fd
 = 
vi˘im
;

3631 
	#MAX_ITERS
 10000

	)

3632 i‡(++
ôîs
 >
MAX_ITERS
)

3641 i‡(!
	`ö_smÆlbö_ønge
 (
nb
))

3643 
bö
 = 
	`bö_©
 (
av
, 
idx
);

3646 i‡((
vi˘im
 = 
	`fú°
 (
bö
)) != bin &&

3647 (Ë(
vi˘im
->
size
Ë>(Ë(
nb
))

3649 
vi˘im
 = vi˘im->
bk_√xtsize
;

3650 ((Ë(
size
 = 
	`chunksize
 (
vi˘im
)) <

3651 (Ë(
nb
)))

3652 
vi˘im
 = vi˘im->
bk_√xtsize
;

3656 i‡(
vi˘im
 !
	`œ°
 (
bö
Ë&& vi˘im->
size
 =vi˘im->
fd
->size)

3657 
vi˘im
 = vi˘im->
fd
;

3659 
ªmaödî_size
 = 
size
 - 
nb
;

3660 
	`u∆ök
 (
av
, 
vi˘im
, 
bck
, 
fwd
);

3663 i‡(
ªmaödî_size
 < 
MINSIZE
)

3665 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
size
);

3666 i‡(
av
 !&
maö_¨ía
)

3667 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3672 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3675 
bck
 = 
	`uns‹ãd_chunks
 (
av
);

3676 
fwd
 = 
bck
->
fd
;

3677 i‡(
	`__glibc_u∆ikñy
 (
fwd
->
bk
 !
bck
))

3679 
îr°r
 = "malloc(): corrupted unsorted chunks";

3680 
îrout
;

3682 
ªmaödî
->
bk
 = 
bck
;

3683 
ªmaödî
->
fd
 = 
fwd
;

3684 
bck
->
fd
 = 
ªmaödî
;

3685 
fwd
->
bk
 = 
ªmaödî
;

3686 i‡(!
	`ö_smÆlbö_ønge
 (
ªmaödî_size
))

3688 
ªmaödî
->
fd_√xtsize
 = 
NULL
;

3689 
ªmaödî
->
bk_√xtsize
 = 
NULL
;

3691 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3692 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3693 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3694 
	`£t_foŸ
 (
ªmaödî
, 
ªmaödî_size
);

3696 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3697 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3698 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3699  
p
;

3714 ++
idx
;

3715 
bö
 = 
	`bö_©
 (
av
, 
idx
);

3716 
block
 = 
	`idx2block
 (
idx
);

3717 
m≠
 = 
av
->
böm≠
[
block
];

3718 
bô
 = 
	`idx2bô
 (
idx
);

3723 i‡(
bô
 > 
m≠
 || bit == 0)

3727 i‡(++
block
 >
BINMAPSIZE
)

3728 
u£_t›
;

3730 (
m≠
 = 
av
->
böm≠
[
block
]) == 0);

3732 
bö
 = 
	`bö_©
 (
av
, (
block
 << 
BINMAPSHIFT
));

3733 
bô
 = 1;

3737 (
bô
 & 
m≠
) == 0)

3739 
bö
 = 
	`√xt_bö
 (bin);

3740 
bô
 <<= 1;

3741 
	`as£π
 (
bô
 != 0);

3745 
vi˘im
 = 
	`œ°
 (
bö
);

3748 i‡(
vi˘im
 =
bö
)

3750 
av
->
böm≠
[
block
] = 
m≠
 &~
bô
;

3751 
bö
 = 
	`√xt_bö
 (bin);

3752 
bô
 <<= 1;

3757 
size
 = 
	`chunksize
 (
vi˘im
);

3760 
	`as£π
 ((Ë(
size
Ë>(Ë(
nb
));

3762 
ªmaödî_size
 = 
size
 - 
nb
;

3765 
	`u∆ök
 (
av
, 
vi˘im
, 
bck
, 
fwd
);

3768 i‡(
ªmaödî_size
 < 
MINSIZE
)

3770 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
size
);

3771 i‡(
av
 !&
maö_¨ía
)

3772 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3778 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3782 
bck
 = 
	`uns‹ãd_chunks
 (
av
);

3783 
fwd
 = 
bck
->
fd
;

3784 i‡(
	`__glibc_u∆ikñy
 (
fwd
->
bk
 !
bck
))

3786 
îr°r
 = "malloc(): corrupted unsorted chunks 2";

3787 
îrout
;

3789 
ªmaödî
->
bk
 = 
bck
;

3790 
ªmaödî
->
fd
 = 
fwd
;

3791 
bck
->
fd
 = 
ªmaödî
;

3792 
fwd
->
bk
 = 
ªmaödî
;

3795 i‡(
	`ö_smÆlbö_ønge
 (
nb
))

3796 
av
->
œ°_ªmaödî
 = 
ªmaödî
;

3797 i‡(!
	`ö_smÆlbö_ønge
 (
ªmaödî_size
))

3799 
ªmaödî
->
fd_√xtsize
 = 
NULL
;

3800 
ªmaödî
->
bk_√xtsize
 = 
NULL
;

3802 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3803 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3804 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3805 
	`£t_foŸ
 (
ªmaödî
, 
ªmaödî_size
);

3807 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3808 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3809 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3810  
p
;

3814 
u£_t›
:

3830 
vi˘im
 = 
av
->
t›
;

3831 
size
 = 
	`chunksize
 (
vi˘im
);

3833 i‡((Ë(
size
Ë>(Ë(
nb
 + 
MINSIZE
))

3835 
ªmaödî_size
 = 
size
 - 
nb
;

3836 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3837 
av
->
t›
 = 
ªmaödî
;

3838 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3839 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3840 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3842 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3843 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3844 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3845  
p
;

3850 i‡(
	`have_Á°chunks
 (
av
))

3852 
	`mÆloc_c⁄sﬁid©e
 (
av
);

3854 i‡(
	`ö_smÆlbö_ønge
 (
nb
))

3855 
idx
 = 
	`smÆlbö_ödex
 (
nb
);

3857 
idx
 = 
	`œrgebö_ödex
 (
nb
);

3865 *
p
 = 
	`sysmÆloc
 (
nb
, 
av
);

3866 i‡(
p
 !
NULL
)

3867 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3868  
p
;

3871 
	}
}

3878 
	$_öt_‰ì
 (
m°©e
 
av
, 
mchunk±r
 
p
, 
have_lock
)

3880 
INTERNAL_SIZE_T
 
size
;

3881 
mÁ°bö±r
 *
fb
;

3882 
mchunk±r
 
√xtchunk
;

3883 
INTERNAL_SIZE_T
 
√xtsize
;

3884 
√xtöu£
;

3885 
INTERNAL_SIZE_T
 
¥evsize
;

3886 
mchunk±r
 
bck
;

3887 
mchunk±r
 
fwd
;

3889 c⁄° *
îr°r
 = 
NULL
;

3890 
locked
 = 0;

3892 
size
 = 
	`chunksize
 (
p
);

3898 i‡(
	`__buûtö_ex≥˘
 ((
uöçå_t
Ë
p
 > (uöçå_tË-
size
, 0)

3899 || 
	`__buûtö_ex≥˘
 (
	`mißlig√d_chunk
 (
p
), 0))

3901 
îr°r
 = "free(): invalidÖointer";

3902 
îrout
:

3903 i‡(!
have_lock
 && 
locked
)

3904 (Ë
	`muãx_u∆ock
 (&
av
->
muãx
);

3905 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, 
îr°r
, 
	`chunk2mem
 (
p
), 
av
);

3910 i‡(
	`__glibc_u∆ikñy
 (
size
 < 
MINSIZE
 || !
	`Æig√d_OK
 (size)))

3912 
îr°r
 = "free(): invalid size";

3913 
îrout
;

3916 
	`check_öu£_chunk
(
av
, 
p
);

3923 i‡(()(
size
Ë<()(
	`gë_max_Á°
 ())

3925 #i‡
TRIM_FASTBINS


3930 && (
	`chunk_©_off£t
(
p
, 
size
Ë!
av
->
t›
)

3934 i‡(
	`__buûtö_ex≥˘
 (
	`chunk_©_off£t
 (
p
, 
size
)->sizê<2 * 
SIZE_SZ
, 0)

3935 || 
	`__buûtö_ex≥˘
 (
	`chunksize
 (
	`chunk_©_off£t
 (
p
, 
size
))

3936 >
av
->
sy°em_mem
, 0))

3941 i‡(
have_lock


3942 || ({ 
	`as£π
 (
locked
 == 0);

3943 
	`muãx_lock
(&
av
->
muãx
);

3944 
locked
 = 1;

3945 
	`chunk_©_off£t
 (
p
, 
size
)->sizê<2 * 
SIZE_SZ


3946 || 
	`chunksize
 (
	`chunk_©_off£t
 (
p
, 
size
)Ë>
av
->
sy°em_mem
;

3949 
îr°r
 = "free(): invalidÇext size (fast)";

3950 
îrout
;

3952 i‡(! 
have_lock
)

3954 ()
	`muãx_u∆ock
(&
av
->
muãx
);

3955 
locked
 = 0;

3959 
	`‰ì_≥πurb
 (
	`chunk2mem
(
p
), 
size
 - 2 * 
SIZE_SZ
);

3961 
	`£t_Á°chunks
(
av
);

3962 
idx
 = 
	`Á°bö_ödex
(
size
);

3963 
fb
 = &
	`Á°bö
 (
av
, 
idx
);

3966 
mchunk±r
 
ﬁd
 = *
fb
, 
ﬁd2
;

3967 
ﬁd_idx
 = ~0u;

3972 i‡(
	`__buûtö_ex≥˘
 (
ﬁd
 =
p
, 0))

3974 
îr°r
 = "double free or corruption (fasttop)";

3975 
îrout
;

3981 i‡(
have_lock
 && 
ﬁd
 !
NULL
)

3982 
ﬁd_idx
 = 
	`Á°bö_ödex
(
	`chunksize
(
ﬁd
));

3983 
p
->
fd
 = 
ﬁd2
 = 
ﬁd
;

3985 (
ﬁd
 = 
	`ˇtomic_com∑ª_™d_exch™ge_vÆ_ªl
 (
fb
, 
p
, 
ﬁd2
)) != old2);

3987 i‡(
have_lock
 && 
ﬁd
 !
NULL
 && 
	`__buûtö_ex≥˘
 (
ﬁd_idx
 !
idx
, 0))

3989 
îr°r
 = "invalid fastbinÉntry (free)";

3990 
îrout
;

3998 i‡(!
	`chunk_is_mm≠≥d
(
p
)) {

3999 i‡(! 
have_lock
) {

4000 ()
	`muãx_lock
(&
av
->
muãx
);

4001 
locked
 = 1;

4004 
√xtchunk
 = 
	`chunk_©_off£t
(
p
, 
size
);

4008 i‡(
	`__glibc_u∆ikñy
 (
p
 =
av
->
t›
))

4010 
îr°r
 = "double free or corruption (top)";

4011 
îrout
;

4014 i‡(
	`__buûtö_ex≥˘
 (
	`c⁄tiguous
 (
av
)

4015 && (*Ë
√xtchunk


4016 >((*Ë
av
->
t›
 + 
	`chunksize
(av->top)), 0))

4018 
îr°r
 = "double free or corruption (out)";

4019 
îrout
;

4022 i‡(
	`__glibc_u∆ikñy
 (!
	`¥ev_öu£
(
√xtchunk
)))

4024 
îr°r
 = "double free or corruption (!prev)";

4025 
îrout
;

4028 
√xtsize
 = 
	`chunksize
(
√xtchunk
);

4029 i‡(
	`__buûtö_ex≥˘
 (
√xtchunk
->
size
 <2 * 
SIZE_SZ
, 0)

4030 || 
	`__buûtö_ex≥˘
 (
√xtsize
 >
av
->
sy°em_mem
, 0))

4032 
îr°r
 = "free(): invalidÇext size (normal)";

4033 
îrout
;

4036 
	`‰ì_≥πurb
 (
	`chunk2mem
(
p
), 
size
 - 2 * 
SIZE_SZ
);

4039 i‡(!
	`¥ev_öu£
(
p
)) {

4040 
¥evsize
 = 
p
->
¥ev_size
;

4041 
size
 +
¥evsize
;

4042 
p
 = 
	`chunk_©_off£t
’, -((Ë
¥evsize
));

4043 
	`u∆ök
(
av
, 
p
, 
bck
, 
fwd
);

4046 i‡(
√xtchunk
 !
av
->
t›
) {

4048 
√xtöu£
 = 
	`öu£_bô_©_off£t
(
√xtchunk
, 
√xtsize
);

4051 i‡(!
√xtöu£
) {

4052 
	`u∆ök
(
av
, 
√xtchunk
, 
bck
, 
fwd
);

4053 
size
 +
√xtsize
;

4055 
	`˛ór_öu£_bô_©_off£t
(
√xtchunk
, 0);

4063 
bck
 = 
	`uns‹ãd_chunks
(
av
);

4064 
fwd
 = 
bck
->
fd
;

4065 i‡(
	`__glibc_u∆ikñy
 (
fwd
->
bk
 !
bck
))

4067 
îr°r
 = "free(): corrupted unsorted chunks";

4068 
îrout
;

4070 
p
->
fd
 = 
fwd
;

4071 
p
->
bk
 = 
bck
;

4072 i‡(!
	`ö_smÆlbö_ønge
(
size
))

4074 
p
->
fd_√xtsize
 = 
NULL
;

4075 
p
->
bk_√xtsize
 = 
NULL
;

4077 
bck
->
fd
 = 
p
;

4078 
fwd
->
bk
 = 
p
;

4080 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4081 
	`£t_foŸ
(
p
, 
size
);

4083 
	`check_‰ì_chunk
(
av
, 
p
);

4092 
size
 +
√xtsize
;

4093 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4094 
av
->
t›
 = 
p
;

4095 
	`check_chunk
(
av
, 
p
);

4111 i‡(()(
size
Ë>
FASTBIN_CONSOLIDATION_THRESHOLD
) {

4112 i‡(
	`have_Á°chunks
(
av
))

4113 
	`mÆloc_c⁄sﬁid©e
(
av
);

4115 i‡(
av
 =&
maö_¨ía
) {

4116 #i‚de‡
MORECORE_CANNOT_TRIM


4117 i‡(()(
	`chunksize
(
av
->
t›
)) >=

4118 ()(
mp_
.
åim_thªshﬁd
))

4119 
	`sy°rim
(
mp_
.
t›_∑d
, 
av
);

4124 
hóp_öfo
 *
hóp
 = 
	`hóp_f‹_±r
(
	`t›
(
av
));

4126 
	`as£π
(
hóp
->
¨_±r
 =
av
);

4127 
	`hóp_åim
(
hóp
, 
mp_
.
t›_∑d
);

4131 i‡(! 
have_lock
) {

4132 
	`as£π
 (
locked
);

4133 ()
	`muãx_u∆ock
(&
av
->
muãx
);

4141 
	`munm≠_chunk
 (
p
);

4143 
	}
}

4159 
	$mÆloc_c⁄sﬁid©e
(
m°©e
 
av
)

4161 
mÁ°bö±r
* 
fb
;

4162 
mÁ°bö±r
* 
maxfb
;

4163 
mchunk±r
 
p
;

4164 
mchunk±r
 
√xç
;

4165 
mchunk±r
 
uns‹ãd_bö
;

4166 
mchunk±r
 
fú°_uns‹ãd
;

4169 
mchunk±r
 
√xtchunk
;

4170 
INTERNAL_SIZE_T
 
size
;

4171 
INTERNAL_SIZE_T
 
√xtsize
;

4172 
INTERNAL_SIZE_T
 
¥evsize
;

4173 
√xtöu£
;

4174 
mchunk±r
 
bck
;

4175 
mchunk±r
 
fwd
;

4182 i‡(
	`gë_max_Á°
 () != 0) {

4183 
	`˛ór_Á°chunks
(
av
);

4185 
uns‹ãd_bö
 = 
	`uns‹ãd_chunks
(
av
);

4195 
maxfb
 = &
	`Á°bö
 (
av
, 
NFASTBINS
 - 1);

4196 
fb
 = &
	`Á°bö
 (
av
, 0);

4198 
p
 = 
	`©omic_exch™ge_acq
 (
fb
, 
NULL
);

4199 i‡(
p
 != 0) {

4201 
	`check_öu£_chunk
(
av
, 
p
);

4202 
√xç
 = 
p
->
fd
;

4205 
size
 = 
p
->sizê& ~(
PREV_INUSE
|
NON_MAIN_ARENA
);

4206 
√xtchunk
 = 
	`chunk_©_off£t
(
p
, 
size
);

4207 
√xtsize
 = 
	`chunksize
(
√xtchunk
);

4209 i‡(!
	`¥ev_öu£
(
p
)) {

4210 
¥evsize
 = 
p
->
¥ev_size
;

4211 
size
 +
¥evsize
;

4212 
p
 = 
	`chunk_©_off£t
’, -((Ë
¥evsize
));

4213 
	`u∆ök
(
av
, 
p
, 
bck
, 
fwd
);

4216 i‡(
√xtchunk
 !
av
->
t›
) {

4217 
√xtöu£
 = 
	`öu£_bô_©_off£t
(
√xtchunk
, 
√xtsize
);

4219 i‡(!
√xtöu£
) {

4220 
size
 +
√xtsize
;

4221 
	`u∆ök
(
av
, 
√xtchunk
, 
bck
, 
fwd
);

4223 
	`˛ór_öu£_bô_©_off£t
(
√xtchunk
, 0);

4225 
fú°_uns‹ãd
 = 
uns‹ãd_bö
->
fd
;

4226 
uns‹ãd_bö
->
fd
 = 
p
;

4227 
fú°_uns‹ãd
->
bk
 = 
p
;

4229 i‡(!
	`ö_smÆlbö_ønge
 (
size
)) {

4230 
p
->
fd_√xtsize
 = 
NULL
;

4231 
p
->
bk_√xtsize
 = 
NULL
;

4234 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4235 
p
->
bk
 = 
uns‹ãd_bö
;

4236 
p
->
fd
 = 
fú°_uns‹ãd
;

4237 
	`£t_foŸ
(
p
, 
size
);

4241 
size
 +
√xtsize
;

4242 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4243 
av
->
t›
 = 
p
;

4246 }  (
p
 = 
√xç
) != 0);

4249 } 
fb
++ !
maxfb
);

4252 
	`mÆloc_öô_°©e
(
av
);

4253 
	`check_mÆloc_°©e
(
av
);

4255 
	}
}

4262 
	$_öt_ªÆloc
(
m°©e
 
av
, 
mchunk±r
 
ﬁdp
, 
INTERNAL_SIZE_T
 
ﬁdsize
,

4263 
INTERNAL_SIZE_T
 
nb
)

4265 
mchunk±r
 
√wp
;

4266 
INTERNAL_SIZE_T
 
√wsize
;

4267 * 
√wmem
;

4269 
mchunk±r
 
√xt
;

4271 
mchunk±r
 
ªmaödî
;

4272 
ªmaödî_size
;

4274 
mchunk±r
 
bck
;

4275 
mchunk±r
 
fwd
;

4277 
c›ysize
;

4278 
nc›õs
;

4279 
INTERNAL_SIZE_T
* 
s
;

4280 
INTERNAL_SIZE_T
* 
d
;

4282 c⁄° *
îr°r
 = 
NULL
;

4285 i‡(
	`__buûtö_ex≥˘
 (
ﬁdp
->
size
 <2 * 
SIZE_SZ
, 0)

4286 || 
	`__buûtö_ex≥˘
 (
ﬁdsize
 >
av
->
sy°em_mem
, 0))

4288 
îr°r
 = "realloc(): invalid old size";

4289 
îrout
:

4290 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, 
îr°r
, 
	`chunk2mem
 (
ﬁdp
), 
av
);

4291  
NULL
;

4294 
	`check_öu£_chunk
 (
av
, 
ﬁdp
);

4297 
	`as£π
 (!
	`chunk_is_mm≠≥d
 (
ﬁdp
));

4299 
√xt
 = 
	`chunk_©_off£t
 (
ﬁdp
, 
ﬁdsize
);

4300 
INTERNAL_SIZE_T
 
√xtsize
 = 
	`chunksize
 (
√xt
);

4301 i‡(
	`__buûtö_ex≥˘
 (
√xt
->
size
 <2 * 
SIZE_SZ
, 0)

4302 || 
	`__buûtö_ex≥˘
 (
√xtsize
 >
av
->
sy°em_mem
, 0))

4304 
îr°r
 = "realloc(): invalidÇext size";

4305 
îrout
;

4308 i‡((Ë(
ﬁdsize
Ë>(Ë(
nb
))

4311 
√wp
 = 
ﬁdp
;

4312 
√wsize
 = 
ﬁdsize
;

4318 i‡(
√xt
 =
av
->
t›
 &&

4319 (Ë(
√wsize
 = 
ﬁdsize
 + 
√xtsize
) >=

4320 (Ë(
nb
 + 
MINSIZE
))

4322 
	`£t_hód_size
 (
ﬁdp
, 
nb
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4323 
av
->
t›
 = 
	`chunk_©_off£t
 (
ﬁdp
, 
nb
);

4324 
	`£t_hód
 (
av
->
t›
, (
√wsize
 - 
nb
Ë| 
PREV_INUSE
);

4325 
	`check_öu£_chunk
 (
av
, 
ﬁdp
);

4326  
	`chunk2mem
 (
ﬁdp
);

4330 i‡(
√xt
 !
av
->
t›
 &&

4331 !
	`öu£
 (
√xt
) &&

4332 (Ë(
√wsize
 = 
ﬁdsize
 + 
√xtsize
) >=

4333 (Ë(
nb
))

4335 
√wp
 = 
ﬁdp
;

4336 
	`u∆ök
 (
av
, 
√xt
, 
bck
, 
fwd
);

4342 
√wmem
 = 
	`_öt_mÆloc
 (
av
, 
nb
 - 
MALLOC_ALIGN_MASK
);

4343 i‡(
√wmem
 == 0)

4346 
√wp
 = 
	`mem2chunk
 (
√wmem
);

4347 
√wsize
 = 
	`chunksize
 (
√wp
);

4352 i‡(
√wp
 =
√xt
)

4354 
√wsize
 +
ﬁdsize
;

4355 
√wp
 = 
ﬁdp
;

4365 
c›ysize
 = 
ﬁdsize
 - 
SIZE_SZ
;

4366 
s
 = (
INTERNAL_SIZE_T
 *Ë(
	`chunk2mem
 (
ﬁdp
));

4367 
d
 = (
INTERNAL_SIZE_T
 *Ë(
√wmem
);

4368 
nc›õs
 = 
c›ysize
 /  (
INTERNAL_SIZE_T
);

4369 
	`as£π
 (
nc›õs
 >= 3);

4371 i‡(
nc›õs
 > 9)

4372 
	`mem˝y
 (
d
, 
s
, 
c›ysize
);

4376 *(
d
 + 0Ë*(
s
 + 0);

4377 *(
d
 + 1Ë*(
s
 + 1);

4378 *(
d
 + 2Ë*(
s
 + 2);

4379 i‡(
nc›õs
 > 4)

4381 *(
d
 + 3Ë*(
s
 + 3);

4382 *(
d
 + 4Ë*(
s
 + 4);

4383 i‡(
nc›õs
 > 6)

4385 *(
d
 + 5Ë*(
s
 + 5);

4386 *(
d
 + 6Ë*(
s
 + 6);

4387 i‡(
nc›õs
 > 8)

4389 *(
d
 + 7Ë*(
s
 + 7);

4390 *(
d
 + 8Ë*(
s
 + 8);

4396 
	`_öt_‰ì
 (
av
, 
ﬁdp
, 1);

4397 
	`check_öu£_chunk
 (
av
, 
√wp
);

4398  
	`chunk2mem
 (
√wp
);

4405 
	`as£π
 ((Ë(
√wsize
Ë>(Ë(
nb
));

4407 
ªmaödî_size
 = 
√wsize
 - 
nb
;

4409 i‡(
ªmaödî_size
 < 
MINSIZE
)

4411 
	`£t_hód_size
 (
√wp
, 
√wsize
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4412 
	`£t_öu£_bô_©_off£t
 (
√wp
, 
√wsize
);

4416 
ªmaödî
 = 
	`chunk_©_off£t
 (
√wp
, 
nb
);

4417 
	`£t_hód_size
 (
√wp
, 
nb
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4418 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
 |

4419 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4421 
	`£t_öu£_bô_©_off£t
 (
ªmaödî
, 
ªmaödî_size
);

4422 
	`_öt_‰ì
 (
av
, 
ªmaödî
, 1);

4425 
	`check_öu£_chunk
 (
av
, 
√wp
);

4426  
	`chunk2mem
 (
√wp
);

4427 
	}
}

4434 
	$_öt_memÆign
 (
m°©e
 
av
, 
size_t
 
Æignmít
, size_à
byãs
)

4436 
INTERNAL_SIZE_T
 
nb
;

4437 *
m
;

4438 
mchunk±r
 
p
;

4439 *
brk
;

4440 
mchunk±r
 
√wp
;

4441 
INTERNAL_SIZE_T
 
√wsize
;

4442 
INTERNAL_SIZE_T
 
Àadsize
;

4443 
mchunk±r
 
ªmaödî
;

4444 
ªmaödî_size
;

4445 
INTERNAL_SIZE_T
 
size
;

4449 
	`checked_ªque°2size
 (
byãs
, 
nb
);

4459 
m
 = (*Ë(
	`_öt_mÆloc
 (
av
, 
nb
 + 
Æignmít
 + 
MINSIZE
));

4461 i‡(
m
 == 0)

4464 
p
 = 
	`mem2chunk
 (
m
);

4466 i‡((((Ë(
m
)Ë% 
Æignmít
) != 0)

4475 
brk
 = (*Ë
	`mem2chunk
 (((Ë(
m
 + 
Æignmít
 - 1)) &

4476 - ((sig√d Ë
Æignmít
));

4477 i‡((Ë(
brk
 - (*Ë(
p
)Ë< 
MINSIZE
)

4478 
brk
 +
Æignmít
;

4480 
√wp
 = (
mchunk±r
Ë
brk
;

4481 
Àadsize
 = 
brk
 - (*Ë(
p
);

4482 
√wsize
 = 
	`chunksize
 (
p
Ë- 
Àadsize
;

4485 i‡(
	`chunk_is_mm≠≥d
 (
p
))

4487 
√wp
->
¥ev_size
 = 
p
->¥ev_sizê+ 
Àadsize
;

4488 
	`£t_hód
 (
√wp
, 
√wsize
 | 
IS_MMAPPED
);

4489  
	`chunk2mem
 (
√wp
);

4493 
	`£t_hód
 (
√wp
, 
√wsize
 | 
PREV_INUSE
 |

4494 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4495 
	`£t_öu£_bô_©_off£t
 (
√wp
, 
√wsize
);

4496 
	`£t_hód_size
 (
p
, 
Àadsize
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4497 
	`_öt_‰ì
 (
av
, 
p
, 1);

4498 
p
 = 
√wp
;

4500 
	`as£π
 (
√wsize
 >
nb
 &&

4501 (((Ë(
	`chunk2mem
 (
p
))Ë% 
Æignmít
) == 0);

4505 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

4507 
size
 = 
	`chunksize
 (
p
);

4508 i‡((Ë(
size
Ë> (Ë(
nb
 + 
MINSIZE
))

4510 
ªmaödî_size
 = 
size
 - 
nb
;

4511 
ªmaödî
 = 
	`chunk_©_off£t
 (
p
, 
nb
);

4512 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
 |

4513 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4514 
	`£t_hód_size
 (
p
, 
nb
);

4515 
	`_öt_‰ì
 (
av
, 
ªmaödî
, 1);

4519 
	`check_öu£_chunk
 (
av
, 
p
);

4520  
	`chunk2mem
 (
p
);

4521 
	}
}

4529 
	$måim
 (
m°©e
 
av
, 
size_t
 
∑d
)

4532 i‡(
	`¨ía_is_c‹ru±
 (
av
))

4536 
	`mÆloc_c⁄sﬁid©e
 (
av
);

4538 c⁄° 
size_t
 
ps
 = 
	`GLRO
 (
dl_∑gesize
);

4539 
psödex
 = 
	`bö_ödex
 (
ps
);

4540 c⁄° 
size_t
 
psm1
 = 
ps
 - 1;

4542 
ªsu…
 = 0;

4543 
i
 = 1; i < 
NBINS
; ++i)

4544 i‡(
i
 =1 || i >
psödex
)

4546 
mbö±r
 
bö
 = 
	`bö_©
 (
av
, 
i
);

4548 
mchunk±r
 
p
 = 
	`œ°
 (
bö
);Ö !bö;Ö =Ö->
bk
)

4550 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
 (
p
);

4552 i‡(
size
 > 
psm1
 +  (
mÆloc_chunk
))

4555 *
∑lig√d_mem
 = (*Ë(((
uöçå_t
Ë
p


4556 +  (
mÆloc_chunk
)

4557 + 
psm1
) & ~psm1);

4559 
	`as£π
 ((*Ë
	`chunk2mem
 (
p
Ë+ 4 * 
SIZE_SZ
 <
∑lig√d_mem
);

4560 
	`as£π
 ((*Ë
p
 + 
size
 > 
∑lig√d_mem
);

4563 
size
 -
∑lig√d_mem
 - (*Ë
p
;

4565 i‡(
size
 > 
psm1
)

4567 #i‡
MALLOC_DEBUG


4570 
	`mem£t
 (
∑lig√d_mem
, 0x89, 
size
 & ~
psm1
);

4572 
	`__madvi£
 (
∑lig√d_mem
, 
size
 & ~
psm1
, 
MADV_DONTNEED
);

4574 
ªsu…
 = 1;

4580 #i‚de‡
MORECORE_CANNOT_TRIM


4581  
ªsu…
 | (
av
 =&
maö_¨ía
 ? 
	`sy°rim
 (
∑d
,áv) : 0);

4584  
ªsu…
;

4586 
	}
}

4590 
	$__mÆloc_åim
 (
size_t
 
s
)

4592 
ªsu…
 = 0;

4594 i‡(
__mÆloc_öôülized
 < 0)

4595 
	`±mÆloc_öô
 ();

4597 
m°©e
 
¨_±r
 = &
maö_¨ía
;

4600 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

4601 
ªsu…
 |
	`måim
 (
¨_±r
, 
s
);

4602 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

4604 
¨_±r
 =ár_±r->
√xt
;

4606 
¨_±r
 !&
maö_¨ía
);

4608  
ªsu…
;

4609 
	}
}

4616 
size_t


4617 
	$mußbÀ
 (*
mem
)

4619 
mchunk±r
 
p
;

4620 i‡(
mem
 != 0)

4622 
p
 = 
	`mem2chunk
 (
mem
);

4624 i‡(
	`__buûtö_ex≥˘
 (
usög_mÆloc_checkög
 == 1, 0))

4625  
	`mÆloc_check_gë_size
 (
p
);

4627 i‡(
	`chunk_is_mm≠≥d
 (
p
))

4629 i‡(
	`DUMPED_MAIN_ARENA_CHUNK
 (
p
))

4630  
	`chunksize
 (
p
Ë- 
SIZE_SZ
;

4632  
	`chunksize
 (
p
Ë- 2 * 
SIZE_SZ
;

4634 i‡(
	`öu£
 (
p
))

4635  
	`chunksize
 (
p
Ë- 
SIZE_SZ
;

4638 
	}
}

4641 
size_t


4642 
	$__mÆloc_ußbÀ_size
 (*
m
)

4644 
size_t
 
ªsu…
;

4646 
ªsu…
 = 
	`mußbÀ
 (
m
);

4647  
ªsu…
;

4648 
	}
}

4656 
	$öt_mÆlöfo
 (
m°©e
 
av
, 
mÆlöfo
 *
m
)

4658 
size_t
 
i
;

4659 
mbö±r
 
b
;

4660 
mchunk±r
 
p
;

4661 
INTERNAL_SIZE_T
 
avaû
;

4662 
INTERNAL_SIZE_T
 
Á°avaû
;

4663 
nblocks
;

4664 
nÁ°blocks
;

4667 i‡(
av
->
t›
 == 0)

4668 
	`mÆloc_c⁄sﬁid©e
 (
av
);

4670 
	`check_mÆloc_°©e
 (
av
);

4673 
avaû
 = 
	`chunksize
 (
av
->
t›
);

4674 
nblocks
 = 1;

4677 
nÁ°blocks
 = 0;

4678 
Á°avaû
 = 0;

4680 
i
 = 0; i < 
NFASTBINS
; ++i)

4682 
p
 = 
	`Á°bö
 (
av
, 
i
);Ö !0;Ö =Ö->
fd
)

4684 ++
nÁ°blocks
;

4685 
Á°avaû
 +
	`chunksize
 (
p
);

4689 
avaû
 +
Á°avaû
;

4692 
i
 = 1; i < 
NBINS
; ++i)

4694 
b
 = 
	`bö_©
 (
av
, 
i
);

4695 
p
 = 
	`œ°
 (
b
);Ö !b;Ö =Ö->
bk
)

4697 ++
nblocks
;

4698 
avaû
 +
	`chunksize
 (
p
);

4702 
m
->
smblks
 +
nÁ°blocks
;

4703 
m
->
‹dblks
 +
nblocks
;

4704 
m
->
f‹dblks
 +
avaû
;

4705 
m
->
u‹dblks
 +
av
->
sy°em_mem
 - 
avaû
;

4706 
m
->
¨ía
 +
av
->
sy°em_mem
;

4707 
m
->
fsmblks
 +
Á°avaû
;

4708 i‡(
av
 =&
maö_¨ía
)

4710 
m
->
hblks
 = 
mp_
.
n_mm≠s
;

4711 
m
->
hblkhd
 = 
mp_
.
mm≠≥d_mem
;

4712 
m
->
usmblks
 = 0;

4713 
m
->
kìpco°
 = 
	`chunksize
 (
av
->
t›
);

4715 
	}
}

4718 
mÆlöfo


4719 
	$__libc_mÆlöfo
 ()

4721 
mÆlöfo
 
m
;

4722 
m°©e
 
¨_±r
;

4724 i‡(
__mÆloc_öôülized
 < 0)

4725 
	`±mÆloc_öô
 ();

4727 
	`mem£t
 (&
m
, 0,  (m));

4728 
¨_±r
 = &
maö_¨ía
;

4731 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

4732 
	`öt_mÆlöfo
 (
¨_±r
, &
m
);

4733 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

4735 
¨_±r
 =ár_±r->
√xt
;

4737 
¨_±r
 !&
maö_¨ía
);

4739  
m
;

4740 
	}
}

4747 
	$__mÆloc_°©s
 ()

4749 
i
;

4750 
m°©e
 
¨_±r
;

4751 
ö_u£_b
 = 
mp_
.
mm≠≥d_mem
, 
sy°em_b
 = in_use_b;

4753 i‡(
__mÆloc_öôülized
 < 0)

4754 
	`±mÆloc_öô
 ();

4755 
	`_IO_Êockfûe
 (
°dîr
);

4756 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

4757 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

4758 
i
 = 0, 
¨_±r
 = &
maö_¨ía
;; i++)

4760 
mÆlöfo
 
mi
;

4762 
	`mem£t
 (&
mi
, 0,  (mi));

4763 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

4764 
	`öt_mÆlöfo
 (
¨_±r
, &
mi
);

4765 
	`Ârötf
 (
°dîr
, "Aª« %d:\n", 
i
);

4766 
	`Ârötf
 (
°dîr
, "sy°em byã† = %10u\n", (Ë
mi
.
¨ía
);

4767 
	`Ârötf
 (
°dîr
, "ö u£ byã† = %10u\n", (Ë
mi
.
u‹dblks
);

4768 #i‡
MALLOC_DEBUG
 > 1

4769 i‡(
i
 > 0)

4770 
	`dump_hóp
 (
	`hóp_f‹_±r
 (
	`t›
 (
¨_±r
)));

4772 
sy°em_b
 +
mi
.
¨ía
;

4773 
ö_u£_b
 +
mi
.
u‹dblks
;

4774 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

4775 
¨_±r
 =ár_±r->
√xt
;

4776 i‡(
¨_±r
 =&
maö_¨ía
)

4779 
	`Ârötf
 (
°dîr
, "Total (incl. mmap):\n");

4780 
	`Ârötf
 (
°dîr
, "sy°em byã† = %10u\n", 
sy°em_b
);

4781 
	`Ârötf
 (
°dîr
, "ö u£ byã† = %10u\n", 
ö_u£_b
);

4782 
	`Ârötf
 (
°dîr
, "max mm≠Ñegi⁄†%10u\n", (Ë
mp_
.
max_n_mm≠s
);

4783 
	`Ârötf
 (
°dîr
, "max mmap bytes = %10lu\n",

4784 (Ë
mp_
.
max_mm≠≥d_mem
);

4785 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
ﬁd_Êags2
;

4786 
	`_IO_fu∆ockfûe
 (
°dîr
);

4787 
	}
}

4795 
	$__libc_mÆl›t
 (
∑øm_numbî
, 
vÆue
)

4797 
m°©e
 
av
 = &
maö_¨ía
;

4798 
ªs
 = 1;

4800 i‡(
__mÆloc_öôülized
 < 0)

4801 
	`±mÆloc_öô
 ();

4802 (Ë
	`muãx_lock
 (&
av
->
muãx
);

4804 
	`mÆloc_c⁄sﬁid©e
 (
av
);

4806 
	`LIBC_PROBE
 (
mem‹y_mÆl›t
, 2, 
∑øm_numbî
, 
vÆue
);

4808 
∑øm_numbî
)

4810 
M_MXFAST
:

4811 i‡(
vÆue
 >0 && vÆuê<
MAX_FAST_SIZE
)

4813 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_mxÁ°
, 2, 
vÆue
, 
	`gë_max_Á°
 ());

4814 
	`£t_max_Á°
 (
vÆue
);

4817 
ªs
 = 0;

4820 
M_TRIM_THRESHOLD
:

4821 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_åim_thªshﬁd
, 3, 
vÆue
,

4822 
mp_
.
åim_thªshﬁd
, mp_.
no_dyn_thªshﬁd
);

4823 
mp_
.
åim_thªshﬁd
 = 
vÆue
;

4824 
mp_
.
no_dyn_thªshﬁd
 = 1;

4827 
M_TOP_PAD
:

4828 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_t›_∑d
, 3, 
vÆue
,

4829 
mp_
.
t›_∑d
, mp_.
no_dyn_thªshﬁd
);

4830 
mp_
.
t›_∑d
 = 
vÆue
;

4831 
mp_
.
no_dyn_thªshﬁd
 = 1;

4834 
M_MMAP_THRESHOLD
:

4836 i‡((Ë
vÆue
 > 
HEAP_MAX_SIZE
 / 2)

4837 
ªs
 = 0;

4840 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_mm≠_thªshﬁd
, 3, 
vÆue
,

4841 
mp_
.
mm≠_thªshﬁd
, mp_.
no_dyn_thªshﬁd
);

4842 
mp_
.
mm≠_thªshﬁd
 = 
vÆue
;

4843 
mp_
.
no_dyn_thªshﬁd
 = 1;

4847 
M_MMAP_MAX
:

4848 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_mm≠_max
, 3, 
vÆue
,

4849 
mp_
.
n_mm≠s_max
, mp_.
no_dyn_thªshﬁd
);

4850 
mp_
.
n_mm≠s_max
 = 
vÆue
;

4851 
mp_
.
no_dyn_thªshﬁd
 = 1;

4854 
M_CHECK_ACTION
:

4855 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_check_a˘i⁄
, 2, 
vÆue
, 
check_a˘i⁄
);

4856 
check_a˘i⁄
 = 
vÆue
;

4859 
M_PERTURB
:

4860 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_≥πurb
, 2, 
vÆue
, 
≥πurb_byã
);

4861 
≥πurb_byã
 = 
vÆue
;

4864 
M_ARENA_TEST
:

4865 i‡(
vÆue
 > 0)

4867 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_¨ía_ã°
, 2, 
vÆue
, 
mp_
.
¨ía_ã°
);

4868 
mp_
.
¨ía_ã°
 = 
vÆue
;

4872 
M_ARENA_MAX
:

4873 i‡(
vÆue
 > 0)

4875 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_¨ía_max
, 2, 
vÆue
, 
mp_
.
¨ía_max
);

4876 
mp_
.
¨ía_max
 = 
vÆue
;

4880 (Ë
	`muãx_u∆ock
 (&
av
->
muãx
);

4881  
ªs
;

4882 
	}
}

4883 
	$libc_hiddí_def
 (
__libc_mÆl›t
)

5027 **
__libc_¨gv
 
©åibuã_hiddí
;

5030 
	$mÆloc_¥öãº
 (
a˘i⁄
, c⁄° *
°r
, *
±r
, 
m°©e
 
¨_±r
)

5035 i‡(
¨_±r
)

5036 
	`£t_¨ía_c‹ru±
 (
¨_±r
);

5038 i‡((
a˘i⁄
 & 5) == 5)

5039 
	`__libc_mesßge
 (
a˘i⁄
 & 2, "%s\n", 
°r
);

5040 i‡(
a˘i⁄
 & 1)

5042 
buf
[2 *  (
uöçå_t
) + 1];

5044 
buf
[ (buf) - 1] = '\0';

5045 *
˝
 = 
	`_ôﬂ_w‹d
 ((
uöçå_t
Ë
±r
, &
buf
[ (buf) - 1], 16, 0);

5046 
˝
 > 
buf
)

5047 *--
˝
 = '0';

5049 
	`__libc_mesßge
 (
a˘i⁄
 & 2, "*** Error in `%s': %s: 0x%s ***\n",

5050 
__libc_¨gv
[0] ? : "<unknown>", 
°r
, 
˝
);

5052 i‡(
a˘i⁄
 & 2)

5053 
	`ab‹t
 ();

5054 
	}
}

5058 
	$__posix_memÆign
 (**
mem±r
, 
size_t
 
Æignmít
, size_à
size
)

5060 *
mem
;

5064 i‡(
Æignmít
 %  (*) != 0

5065 || !
	`powîof2
 (
Æignmít
 /  (*))

5066 || 
Æignmít
 == 0)

5067  
EINVAL
;

5070 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

5071 
mem
 = 
	`_mid_memÆign
 (
Æignmít
, 
size
, 
addªss
);

5073 i‡(
mem
 !
NULL
)

5075 *
mem±r
 = 
mem
;

5079  
ENOMEM
;

5080 
	}
}

5081 
	$wók_Æüs
 (
__posix_memÆign
, 
posix_memÆign
)

5085 
	$__mÆloc_öfo
 (
›ti⁄s
, 
FILE
 *
Â
)

5088 i‡(
›ti⁄s
 != 0)

5089  
EINVAL
;

5091 
n
 = 0;

5092 
size_t
 
tŸÆ_nblocks
 = 0;

5093 
size_t
 
tŸÆ_nÁ°blocks
 = 0;

5094 
size_t
 
tŸÆ_avaû
 = 0;

5095 
size_t
 
tŸÆ_Á°avaû
 = 0;

5096 
size_t
 
tŸÆ_sy°em
 = 0;

5097 
size_t
 
tŸÆ_max_sy°em
 = 0;

5098 
size_t
 
tŸÆ_a•a˚
 = 0;

5099 
size_t
 
tŸÆ_a•a˚_m¥Ÿe˘
 = 0;

5103 i‡(
__mÆloc_öôülized
 < 0)

5104 
	`±mÆloc_öô
 ();

5106 
	`Âuts
 ("<mÆlo¯vîsi⁄=\"1\">\n", 
Â
);

5109 
m°©e
 
¨_±r
 = &
maö_¨ía
;

5112 
	`Ârötf
 (
Â
, "<hó∞ƒ=\"%d\">\n<sizes>\n", 
n
++);

5114 
size_t
 
nblocks
 = 0;

5115 
size_t
 
nÁ°blocks
 = 0;

5116 
size_t
 
avaû
 = 0;

5117 
size_t
 
Á°avaû
 = 0;

5120 
size_t
 
‰om
;

5121 
size_t
 
to
;

5122 
size_t
 
tŸÆ
;

5123 
size_t
 
cou¡
;

5124 } 
sizes
[
NFASTBINS
 + 
NBINS
 - 1];

5125 
	#nsizes
 ( (
sizes
Ë/  (sizes[0]))

	)

5127 
	`muãx_lock
 (&
¨_±r
->
muãx
);

5129 
size_t
 
i
 = 0; i < 
NFASTBINS
; ++i)

5131 
mchunk±r
 
p
 = 
	`Á°bö
 (
¨_±r
, 
i
);

5132 i‡(
p
 !
NULL
)

5134 
size_t
 
¡hissize
 = 0;

5135 
size_t
 
thissize
 = 
	`chunksize
 (
p
);

5137 
p
 !
NULL
)

5139 ++
¡hissize
;

5140 
p
 =Ö->
fd
;

5143 
Á°avaû
 +
¡hissize
 * 
thissize
;

5144 
nÁ°blocks
 +
¡hissize
;

5145 
sizes
[
i
].
‰om
 = 
thissize
 - (
MALLOC_ALIGNMENT
 - 1);

5146 
sizes
[
i
].
to
 = 
thissize
;

5147 
sizes
[
i
].
cou¡
 = 
¡hissize
;

5150 
sizes
[
i
].
‰om
 = sizes[i].
to
 = sizes[i].
cou¡
 = 0;

5152 
sizes
[
i
].
tŸÆ
 = sizes[i].
cou¡
 * sizes[i].
to
;

5156 
mbö±r
 
bö
;

5157 
mÆloc_chunk
 *
r
;

5159 
size_t
 
i
 = 1; i < 
NBINS
; ++i)

5161 
bö
 = 
	`bö_©
 (
¨_±r
, 
i
);

5162 
r
 = 
bö
->
fd
;

5163 
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om
 = ~((
size_t
) 0);

5164 
sizes
[
NFASTBINS
 - 1 + 
i
].
to
 = sizes[NFASTBINS - 1 + i].
tŸÆ


5165 
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
 = 0;

5167 i‡(
r
 !
NULL
)

5168 
r
 !
bö
)

5170 ++
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
;

5171 
sizes
[
NFASTBINS
 - 1 + 
i
].
tŸÆ
 +
r
->
size
;

5172 
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om


5173 
	`MIN
 (
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om
, 
r
->
size
);

5174 
sizes
[
NFASTBINS
 - 1 + 
i
].
to
 = 
	`MAX
 (sizes[NFASTBINS - 1 + i].to,

5175 
r
->
size
);

5177 
r
 =Ñ->
fd
;

5180 i‡(
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
 == 0)

5181 
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om
 = 0;

5182 
nblocks
 +
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
;

5183 
avaû
 +
sizes
[
NFASTBINS
 - 1 + 
i
].
tŸÆ
;

5186 
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

5188 
tŸÆ_nÁ°blocks
 +
nÁ°blocks
;

5189 
tŸÆ_Á°avaû
 +
Á°avaû
;

5191 
tŸÆ_nblocks
 +
nblocks
;

5192 
tŸÆ_avaû
 +
avaû
;

5194 
size_t
 
i
 = 0; i < 
nsizes
; ++i)

5195 i‡(
sizes
[
i
].
cou¡
 !0 && i !
NFASTBINS
)

5196 
	`Ârötf
 (
Â
, " \
<size from=\"%zu\"Åo=\"%zu\"Åotal=\"%zu\" count=\"%zu\"/>\n",

5198 
sizes
[
i
].
‰om
, sizes[i].
to
, sizes[i].
tŸÆ
, sizes[i].
cou¡
);

5200 i‡(
sizes
[
NFASTBINS
].
cou¡
 != 0)

5201 
	`Ârötf
 (
Â
, "\
<unsorted from=\"%zu\"Åo=\"%zu\"Åotal=\"%zu\" count=\"%zu\"/>\n",

5203 
sizes
[
NFASTBINS
].
‰om
, sizes[NFASTBINS].
to
,

5204 
sizes
[
NFASTBINS
].
tŸÆ
, sizes[NFASTBINS].
cou¡
);

5206 
tŸÆ_sy°em
 +
¨_±r
->
sy°em_mem
;

5207 
tŸÆ_max_sy°em
 +
¨_±r
->
max_sy°em_mem
;

5209 
	`Ârötf
 (
Â
,

5214 
nÁ°blocks
, 
Á°avaû
, 
nblocks
, 
avaû
,

5215 
¨_±r
->
sy°em_mem
,ár_±r->
max_sy°em_mem
);

5217 i‡(
¨_±r
 !&
maö_¨ía
)

5219 
hóp_öfo
 *
hóp
 = 
	`hóp_f‹_±r
 (
	`t›
 (
¨_±r
));

5220 
	`Ârötf
 (
Â
,

5223 
hóp
->
size
, hóp->
m¥Ÿe˘_size
);

5224 
tŸÆ_a•a˚
 +
hóp
->
size
;

5225 
tŸÆ_a•a˚_m¥Ÿe˘
 +
hóp
->
m¥Ÿe˘_size
;

5229 
	`Ârötf
 (
Â
,

5232 
¨_±r
->
sy°em_mem
,ár_ptr->system_mem);

5233 
tŸÆ_a•a˚
 +
¨_±r
->
sy°em_mem
;

5234 
tŸÆ_a•a˚_m¥Ÿe˘
 +
¨_±r
->
sy°em_mem
;

5237 
	`Âuts
 ("</hóp>\n", 
Â
);

5238 
¨_±r
 =ár_±r->
√xt
;

5240 
¨_±r
 !&
maö_¨ía
);

5242 
	`Ârötf
 (
Â
,

5251 
tŸÆ_nÁ°blocks
, 
tŸÆ_Á°avaû
, 
tŸÆ_nblocks
, 
tŸÆ_avaû
,

5252 
mp_
.
n_mm≠s
, mp_.
mm≠≥d_mem
,

5253 
tŸÆ_sy°em
, 
tŸÆ_max_sy°em
,

5254 
tŸÆ_a•a˚
, 
tŸÆ_a•a˚_m¥Ÿe˘
);

5257 
	}
}

5258 
	$wók_Æüs
 (
__mÆloc_öfo
, 
mÆloc_öfo
)

5261 
	$°r⁄g_Æüs
 (
__libc_ˇŒoc
, 
__ˇŒoc
Ë
	$wók_Æüs
 (
__libc_ˇŒoc
, 
ˇŒoc
)

5262 
	$°r⁄g_Æüs
 (
__libc_‰ì
, 
__c‰ì
Ë
	$wók_Æüs
 (
__libc_‰ì
, 
c‰ì
)

5263 
	$°r⁄g_Æüs
 (
__libc_‰ì
, 
__‰ì
Ë
	$°r⁄g_Æüs
 (
__libc_‰ì
, 
‰ì
)

5264 
	$°r⁄g_Æüs
 (
__libc_mÆloc
, 
__mÆloc
Ë
	$°r⁄g_Æüs
 (
__libc_mÆloc
, 
mÆloc
)

5265 
	$°r⁄g_Æüs
 (
__libc_memÆign
, 
__memÆign
)

5266 
	$wók_Æüs
 (
__libc_memÆign
, 
memÆign
)

5267 
	$°r⁄g_Æüs
 (
__libc_ªÆloc
, 
__ªÆloc
Ë
	$°r⁄g_Æüs
 (
__libc_ªÆloc
, 
ªÆloc
)

5268 
	$°r⁄g_Æüs
 (
__libc_vÆloc
, 
__vÆloc
Ë
	$wók_Æüs
 (
__libc_vÆloc
, 
vÆloc
)

5269 
	$°r⁄g_Æüs
 (
__libc_pvÆloc
, 
__pvÆloc
Ë
	$wók_Æüs
 (
__libc_pvÆloc
, 
pvÆloc
)

5270 
	$°r⁄g_Æüs
 (
__libc_mÆlöfo
, 
__mÆlöfo
)

5271 
	$wók_Æüs
 (
__libc_mÆlöfo
, 
mÆlöfo
)

5272 
	$°r⁄g_Æüs
 (
__libc_mÆl›t
, 
__mÆl›t
Ë
	$wók_Æüs
 (
__libc_mÆl›t
, 
mÆl›t
)

5274 
	$wók_Æüs
 (
__mÆloc_°©s
, 
mÆloc_°©s
)

5275 
	$wók_Æüs
 (
__mÆloc_ußbÀ_size
, 
mÆloc_ußbÀ_size
)

5276 
	$wók_Æüs
 (
__mÆloc_åim
, 
mÆloc_åim
)

5277 
	$wók_Æüs
 (
__mÆloc_gë_°©e
, 
mÆloc_gë_°©e
)

5278 
	`wók_Æüs
 (
__mÆloc_£t_°©e
, 
mÆloc_£t_°©e
)

	@malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

145 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

147 
__MALLOC_DEPRECATED
;

148 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

150 
__MALLOC_DEPRECATED
;

151 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

152 
size_t
 
__size
,

154 
__MALLOC_DEPRECATED
;

155 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

156 
size_t
 
__size
,

158 
__MALLOC_DEPRECATED
;

159 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

162 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

165 
__END_DECLS


	@mallocbug.c

2 
	~<mÆloc.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

6 
	#size_t
 

	)

9 *
	gdummy0
;

10 *
	gdummy1
;

11 *
	gfûl_öfo_èbÀ1
;

15 
	$maö
 (
¨gc
, *
¨gv
[])

17 *
ovî_t›
;

18 
size_t
 
ovî_t›_size
 = 0x3000;

19 *
ovî_t›_dup
;

20 
size_t
 
ovî_t›_dup_size
 = 0x7000;

21 *
x
;

22 
size_t
 
i
;

34 
dummy0
 = 
	`mÆloc
 (0x3fa000);

36 
dummy1
 = 
	`mÆloc
 (0x3fa000);

38 
fûl_öfo_èbÀ1
 = 
	`mÆloc
 (0x3000);

41 
x
 = 
	`mÆloc
 (0x1000);

42 
	`‰ì
 (
x
);

49 
ovî_t›
 = 
	`mÆloc
 (
ovî_t›_size
);

50 
ovî_t›_dup
 = 
	`mÆloc
 (
ovî_t›_dup_size
);

51 
	`mem£t
 (
ovî_t›
, 0, 
ovî_t›_size
);

52 
	`mem£t
 (
ovî_t›_dup
, 1, 
ovî_t›_dup_size
);

54 
i
 = 0; i < 
ovî_t›_size
; ++i)

55 i‡(
ovî_t›
[
i
] != 0)

57 
	`¥ötf
 ("FAIL: mallocÉxpands infoÅable\n");

61 
i
 = 0; i < 
ovî_t›_dup_size
; ++i)

62 i‡(
ovî_t›_dup
[
i
] != 1)

64 
	`¥ötf
 ("FAIL: mallocÉxpands infoÅable\n");

68 
	`¥ötf
 ("PASS: mallocÉxpands infoÅable\n");

70 
	}
}

	@mcheck-init.c

21 
	~<mÆloc.h
>

22 
	~<mcheck.h
>

25 
	$tu∫_⁄_mcheck
 ()

27 
	`mcheck
 (
NULL
);

28 
	}
}

30 (*
__mÆloc_öôülize_hook
Ë(Ë
tu∫_⁄_mcheck
;

	@mcheck.c

20 #i‚de‡
_MALLOC_INTERNAL


21 
	#_MALLOC_INTERNAL


	)

22 
	~<mÆloc.h
>

23 
	~<mcheck.h
>

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<liböé.h
>

27 
	~<î∫o.h
>

31 (*
ﬁd_‰ì_hook
)(
__±r_t
 
±r
, const __ptr_t);

32 
	$__±r_t
 (*
ﬁd_mÆloc_hook
Ë(
size_t
 
size
, c⁄° 
__±r_t
);

33 
	$__±r_t
 (*
ﬁd_memÆign_hook
Ë(
size_t
 
Æignmít
, size_à
size
,

34 c⁄° 
__±r_t
);

35 
	$__±r_t
 (*
ﬁd_ªÆloc_hook
Ë(
__±r_t
 
±r
, 
size_t
 
size
,

36 c⁄° 
__±r_t
);

39 (*
ab‹tfunc
Ë(
mcheck_°©us
);

42 
	#MAGICWORD
 0x„dabìb

	)

43 
	#MAGICFREE
 0xd8675309

	)

44 
	#MAGICBYTE
 ((Ë0xd7)

	)

45 
	#MALLOCFLOOD
 ((Ë0x93)

	)

46 
	#FREEFLOOD
 ((Ë0x95)

	)

48 
	shdr


50 
size_t
 
size
;

51 
magic
;

52 
hdr
 *
¥ev
;

53 
hdr
 *
√xt
;

54 
__±r_t
 
block
;

55 
magic2
;

60 
hdr
 *
roŸ
;

62 
mcheck_u£d
;

65 
≥d™tic
;

67 #i‡
deföed
 
_LIBC
 || deföed 
STDC_HEADERS
 || deföed 
USG


68 
	~<°rög.h
>

69 
	#Êood
 
mem£t


	)

71 
	`Êood
 (
__±r_t
, , 
size_t
);

73 
	$Êood
 (
__±r_t
 
±r
, 
vÆ
, 
size_t
 
size
)

75 *
˝
 = 
±r
;

76 
size
--)

77 *
˝
++ = 
vÆ
;

78 
	}
}

81 
mcheck_°©us


82 
	$checkhdr
 (c⁄° 
hdr
 *hdr)

84 
mcheck_°©us
 
°©us
;

86 i‡(!
mcheck_u£d
)

89  
MCHECK_OK
;

91 
hdr
->
magic
 ^ ((
uöçå_t
Ëhdr->
¥ev
 + (uöçå_tËhdr->
√xt
))

94 
°©us
 = 
MCHECK_HEAD
;

96 
MAGICFREE
:

97 
°©us
 = 
MCHECK_FREE
;

99 
MAGICWORD
:

100 i‡(((*Ë&
hdr
[1])[hdr->
size
] !
MAGICBYTE
)

101 
°©us
 = 
MCHECK_TAIL
;

102 i‡((
hdr
->
magic2
 ^ (
uöçå_t
Ëhdr->
block
Ë!
MAGICWORD
)

103 
°©us
 = 
MCHECK_HEAD
;

105 
°©us
 = 
MCHECK_OK
;

108 i‡(
°©us
 !
MCHECK_OK
)

110 
mcheck_u£d
 = 0;

111 (*
ab‹tfunc
Ë(
°©us
);

112 
mcheck_u£d
 = 1;

114  
°©us
;

115 
	}
}

118 
	$mcheck_check_Æl
 ()

122 
hdr
 *
ru≈
 = 
roŸ
;

125 
≥d™tic
 = 0;

127 
ru≈
 !
NULL
)

129 (Ë
	`checkhdr
 (
ru≈
);

131 
ru≈
 =Ñu≈->
√xt
;

135 
≥d™tic
 = 1;

136 
	}
}

137 #ifde‡
_LIBC


138 
	$libc_hiddí_def
 (
mcheck_check_Æl
)

142 
	$u∆ök_blk
 (
hdr
 *
±r
)

144 i‡(
±r
->
√xt
 !
NULL
)

146 
±r
->
√xt
->
¥ev
 =Ötr->prev;

147 
±r
->
√xt
->
magic
 = 
MAGICWORD
 ^ ((
uöçå_t
Ë±r->√xt->
¥ev


148 + (
uöçå_t
Ë
±r
->
√xt
->next);

150 i‡(
±r
->
¥ev
 !
NULL
)

152 
±r
->
¥ev
->
√xt
 =Ötr->next;

153 
±r
->
¥ev
->
magic
 = 
MAGICWORD
 ^ ((
uöçå_t
)Ötr->prev->prev

154 + (
uöçå_t
Ë
±r
->
¥ev
->
√xt
);

157 
roŸ
 = 
±r
->
√xt
;

158 
	}
}

161 
	$lök_blk
 (
hdr
 *hdr)

163 
hdr
->
¥ev
 = 
NULL
;

164 
hdr
->
√xt
 = 
roŸ
;

165 
roŸ
 = 
hdr
;

166 
hdr
->
magic
 = 
MAGICWORD
 ^ (
uöçå_t
Ëhdr->
√xt
;

169 i‡(
hdr
->
√xt
 !
NULL
)

171 
hdr
->
√xt
->
¥ev
 = hdr;

172 
hdr
->
√xt
->
magic
 = 
MAGICWORD
 ^ ((
uöçå_t
) hdr

173 + (
uöçå_t
Ë
hdr
->
√xt
->next);

175 
	}
}

177 
	$‰ìhook
 (
__±r_t
 
±r
, c⁄° __±r_à
ˇŒî
)

179 i‡(
≥d™tic
)

180 
	`mcheck_check_Æl
 ();

181 i‡(
±r
)

183 
hdr
 *hd∏((hd∏*Ë
±r
) - 1;

184 
	`checkhdr
 (
hdr
);

185 
hdr
->
magic
 = 
MAGICFREE
;

186 
hdr
->
magic2
 = 
MAGICFREE
;

187 
	`u∆ök_blk
 (
hdr
);

188 
hdr
->
¥ev
 = hdr->
√xt
 = 
NULL
;

189 
	`Êood
 (
±r
, 
FREEFLOOD
, 
hdr
->
size
);

190 
±r
 = 
hdr
->
block
;

192 
__‰ì_hook
 = 
ﬁd_‰ì_hook
;

193 i‡(
ﬁd_‰ì_hook
 !
NULL
)

194 (*
ﬁd_‰ì_hook
)(
±r
, 
ˇŒî
);

196 
	`‰ì
 (
±r
);

197 
__‰ì_hook
 = 
‰ìhook
;

198 
	}
}

200 
__±r_t


201 
	$mÆlochook
 (
size_t
 
size
, c⁄° 
__±r_t
 
ˇŒî
)

203 
hdr
 *hdr;

205 i‡(
≥d™tic
)

206 
	`mcheck_check_Æl
 ();

208 i‡(
size
 > ~((
size_t
Ë0Ë- ( (
hdr
) + 1))

210 
	`__£t_î∫o
 (
ENOMEM
);

211  
NULL
;

214 
__mÆloc_hook
 = 
ﬁd_mÆloc_hook
;

215 i‡(
ﬁd_mÆloc_hook
 !
NULL
)

216 
hdr
 = (hd∏*Ë(*
ﬁd_mÆloc_hook
)( (hdrË+ 
size
 + 1,

217 
ˇŒî
);

219 
hdr
 = (hd∏*Ë
	`mÆloc
 ( (hdrË+ 
size
 + 1);

220 
__mÆloc_hook
 = 
mÆlochook
;

221 i‡(
hdr
 =
NULL
)

222  
NULL
;

224 
hdr
->
size
 = size;

225 
	`lök_blk
 (
hdr
);

226 
hdr
->
block
 = hdr;

227 
hdr
->
magic2
 = (
uöçå_t
Ëhd∏^ 
MAGICWORD
;

228 ((*Ë&
hdr
[1])[
size
] = 
MAGICBYTE
;

229 
	`Êood
 ((
__±r_t
Ë(
hdr
 + 1), 
MALLOCFLOOD
, 
size
);

230  (
__±r_t
Ë(
hdr
 + 1);

231 
	}
}

233 
__±r_t


234 
	$memÆignhook
 (
size_t
 
Æignmít
, size_à
size
,

235 c⁄° 
__±r_t
 
ˇŒî
)

237 
hdr
 *hdr;

238 
size_t
 
¶›
;

239 *
block
;

241 i‡(
≥d™tic
)

242 
	`mcheck_check_Æl
 ();

244 
¶›
 = ( *
hdr
 + 
Æignmít
 - 1) & -álignment;

246 i‡(
size
 > ~((
size_t
Ë0Ë- (
¶›
 + 1))

248 
	`__£t_î∫o
 (
ENOMEM
);

249  
NULL
;

252 
__memÆign_hook
 = 
ﬁd_memÆign_hook
;

253 i‡(
ﬁd_memÆign_hook
 !
NULL
)

254 
block
 = (*
ﬁd_memÆign_hook
)(
Æignmít
, 
¶›
 + 
size
 + 1, 
ˇŒî
);

256 
block
 = 
	`memÆign
 (
Æignmít
, 
¶›
 + 
size
 + 1);

257 
__memÆign_hook
 = 
memÆignhook
;

258 i‡(
block
 =
NULL
)

259  
NULL
;

261 
hdr
 = ((hd∏*Ë(
block
 + 
¶›
)) - 1;

263 
hdr
->
size
 = size;

264 
	`lök_blk
 (
hdr
);

265 
hdr
->
block
 = (
__±r_t
) block;

266 
hdr
->
magic2
 = (
uöçå_t
Ë
block
 ^ 
MAGICWORD
;

267 ((*Ë&
hdr
[1])[
size
] = 
MAGICBYTE
;

268 
	`Êood
 ((
__±r_t
Ë(
hdr
 + 1), 
MALLOCFLOOD
, 
size
);

269  (
__±r_t
Ë(
hdr
 + 1);

270 
	}
}

272 
__±r_t


273 
	$ªÆlochook
 (
__±r_t
 
±r
, 
size_t
 
size
, c⁄° __±r_à
ˇŒî
)

275 i‡(
size
 == 0)

277 
	`‰ìhook
 (
±r
, 
ˇŒî
);

278  
NULL
;

281 
hdr
 *hdr;

282 
size_t
 
osize
;

284 i‡(
≥d™tic
)

285 
	`mcheck_check_Æl
 ();

287 i‡(
size
 > ~((
size_t
Ë0Ë- ( (
hdr
) + 1))

289 
	`__£t_î∫o
 (
ENOMEM
);

290  
NULL
;

293 i‡(
±r
)

295 
hdr
 = ((hd∏*Ë
±r
) - 1;

296 
osize
 = 
hdr
->
size
;

298 
	`checkhdr
 (
hdr
);

299 
	`u∆ök_blk
 (
hdr
);

300 i‡(
size
 < 
osize
)

301 
	`Êood
 ((*Ë
±r
 + 
size
, 
FREEFLOOD
, 
osize
 - size);

305 
osize
 = 0;

306 
hdr
 = 
NULL
;

308 
__‰ì_hook
 = 
ﬁd_‰ì_hook
;

309 
__mÆloc_hook
 = 
ﬁd_mÆloc_hook
;

310 
__memÆign_hook
 = 
ﬁd_memÆign_hook
;

311 
__ªÆloc_hook
 = 
ﬁd_ªÆloc_hook
;

312 i‡(
ﬁd_ªÆloc_hook
 !
NULL
)

313 
hdr
 = (hd∏*Ë(*
ﬁd_ªÆloc_hook
)((
__±r_t
) hdr,

314  (
hdr
Ë+ 
size
 + 1,

315 
ˇŒî
);

317 
hdr
 = (hd∏*Ë
	`ªÆloc
 ((
__±r_t
) hdr,

318  (
hdr
Ë+ 
size
 + 1);

319 
__‰ì_hook
 = 
‰ìhook
;

320 
__mÆloc_hook
 = 
mÆlochook
;

321 
__memÆign_hook
 = 
memÆignhook
;

322 
__ªÆloc_hook
 = 
ªÆlochook
;

323 i‡(
hdr
 =
NULL
)

324  
NULL
;

326 
hdr
->
size
 = size;

327 
	`lök_blk
 (
hdr
);

328 
hdr
->
block
 = hdr;

329 
hdr
->
magic2
 = (
uöçå_t
Ëhd∏^ 
MAGICWORD
;

330 ((*Ë&
hdr
[1])[
size
] = 
MAGICBYTE
;

331 i‡(
size
 > 
osize
)

332 
	`Êood
 ((*Ë(
hdr
 + 1Ë+ 
osize
, 
MALLOCFLOOD
, 
size
 - osize);

333  (
__±r_t
Ë(
hdr
 + 1);

334 
	}
}

336 
__©åibuã__
 ((
n‹ëu∫
))

338 
	$mab‹t
 (
mcheck_°©us
 
°©us
)

340 c⁄° *
msg
;

341 
°©us
)

343 
MCHECK_OK
:

344 
msg
 = 
	`_
 ("memory is consistent,Üibrary is buggy\n");

346 
MCHECK_HEAD
:

347 
msg
 = 
	`_
 ("memory clobbered beforeállocated block\n");

349 
MCHECK_TAIL
:

350 
msg
 = 
	`_
 ("memory clobberedÖastÉnd ofállocated block\n");

352 
MCHECK_FREE
:

353 
msg
 = 
	`_
 ("block freedÅwice\n");

356 
msg
 = 
	`_
 ("bogus mcheck_status,Üibrary is buggy\n");

359 #ifde‡
_LIBC


360 
	`__libc_Áèl
 (
msg
);

362 
	`Ârötf
 (
°dîr
, "mcheck: %s", 
msg
);

363 
	`fÊush
 (
°dîr
);

364 
	`ab‹t
 ();

366 
	}
}

369 
	#mÆloc_›t_b¨rõr
(
x
) \

370 ({ 
	`__ty≥of
 (
x
Ë
__x
 = x; 
	`__asm
 ("" : "+m" (__x)); __x; })

	)

373 
	$mcheck
 ((*
func
Ë(
mcheck_°©us
))

375 
ab‹tfunc
 = (
func
 !
NULL
Ë? fun¯: &
mab‹t
;

378 i‡(
__mÆloc_öôülized
 <0 && !
mcheck_u£d
)

381 *
p
 = 
	`mÆloc
 (0);

383 
p
 = 
	`mÆloc_›t_b¨rõr
 (p);

384 
	`‰ì
 (
p
);

386 
ﬁd_‰ì_hook
 = 
__‰ì_hook
;

387 
__‰ì_hook
 = 
‰ìhook
;

388 
ﬁd_mÆloc_hook
 = 
__mÆloc_hook
;

389 
__mÆloc_hook
 = 
mÆlochook
;

390 
ﬁd_memÆign_hook
 = 
__memÆign_hook
;

391 
__memÆign_hook
 = 
memÆignhook
;

392 
ﬁd_ªÆloc_hook
 = 
__ªÆloc_hook
;

393 
__ªÆloc_hook
 = 
ªÆlochook
;

394 
mcheck_u£d
 = 1;

397  
mcheck_u£d
 ? 0 : -1;

398 
	}
}

399 #ifde‡
_LIBC


400 
	$libc_hiddí_def
 (
mcheck
)

404 
	$mcheck_≥d™tic
 ((*
func
Ë(
mcheck_°©us
))

406 
ªs
 = 
	`mcheck
 (
func
);

407 i‡(
ªs
 == 0)

408 
≥d™tic
 = 1;

409  
ªs
;

410 
	}
}

412 
mcheck_°©us


413 
	$m¥obe
 (
__±r_t
 
±r
)

415  
mcheck_u£d
 ? 
	`checkhdr
 (((
hdr
 *Ë
±r
Ë- 1Ë: 
MCHECK_DISABLED
;

416 
	}
}

	@mcheck.h

18 #i‚de‡
_MCHECK_H


19 
	#_MCHECK_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


27 
	emcheck_°©us


29 
	mMCHECK_DISABLED
 = -1,

30 
	mMCHECK_OK
,

31 
	mMCHECK_FREE
,

32 
	mMCHECK_HEAD
,

33 
	mMCHECK_TAIL


41 
	$mcheck
 ((*
__ab‹tfunc
)(
mcheck_°©us
)Ë
__THROW
;

45 
	$mcheck_≥d™tic
 ((*
__ab‹tfunc
)(
mcheck_°©us
)Ë
__THROW
;

48 
	`mcheck_check_Æl
 ();

53 
mcheck_°©us
 
	$m¥obe
 (*
__±r
Ë
__THROW
;

56 
	$måa˚
 (Ë
__THROW
;

57 
	$mu¡ø˚
 (Ë
__THROW
;

59 
__END_DECLS


	@memusage.c

20 
	~<as£π.h
>

21 
	~<©omic.h
>

22 
	~<dlf˙.h
>

23 
	~<î∫o.h
>

24 
	~<f˙é.h
>

25 
	~<öây≥s.h
>

26 
	~<sig«l.h
>

27 
	~<°d¨g.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<°döt.h
>

34 
	~<sys/mm™.h
>

35 
	~<sys/time.h
>

37 
	~<memußge.h
>

41 *(*
	gmÆlo˝
)(
	gsize_t
);

42 *(*
	gªÆlo˝
Ë(*, 
	gsize_t
);

43 *(*
	gˇŒo˝
Ë(
	gsize_t
, size_t);

44 (*
‰ìp
) (*);

46 *(*
mm≠p
Ë(*, 
size_t
, , , , 
off_t
);

47 *(*
mm≠64p
Ë(*, 
size_t
, , , , 
off64_t
);

48 (*
munm≠p
Ë(*, 
size_t
);

49 *(*
mªm≠p
Ë(*, 
size_t
, size_t, , *);

53 
idx_mÆloc
 = 0,

54 
idx_ªÆloc
,

55 
idx_ˇŒoc
,

56 
idx_‰ì
,

57 
idx_mm≠_r
,

58 
idx_mm≠_w
,

59 
idx_mm≠_a
,

60 
idx_mªm≠
,

61 
idx_munm≠
,

62 
idx_œ°


66 
	shódî


68 
size_t
 
Àngth
;

69 
size_t
 
magic
;

72 
	#MAGIC
 0x„edbóf

	)

75 
memußge_˙å_t
 
ˇŒs
[
idx_œ°
];

76 
memußge_˙å_t
 
Áûed
[
idx_œ°
];

77 
memußge_size_t
 
tŸÆ
[
idx_œ°
];

78 
memußge_size_t
 
gønd_tŸÆ
;

79 
memußge_˙å_t
 
hi°ogøm
[65536 / 16];

80 
memußge_˙å_t
 
œrge
;

81 
memußge_˙å_t
 
ˇŒs_tŸÆ
;

82 
memußge_˙å_t
 
ö∂a˚
;

83 
memußge_˙å_t
 
de¸ósög
;

84 
memußge_˙å_t
 
ªÆloc_‰ì
;

85 
memußge_˙å_t
 
ö∂a˚_mªm≠
;

86 
memußge_˙å_t
 
de¸ósög_mªm≠
;

87 
memußge_size_t
 
cuºít_hóp
;

88 
memußge_size_t
 
≥ak_u£
[3];

89 
__thªad
 
uöçå_t
 
°¨t_•
;

92 
	#≥ak_hóp
 
≥ak_u£
[0]

	)

93 
	#≥ak_°ack
 
≥ak_u£
[1]

	)

94 
	#≥ak_tŸÆ
 
≥ak_u£
[2]

	)

96 
	#DEFAULT_BUFFER_SIZE
 32768

	)

97 
size_t
 
buf„r_size
;

99 
fd
 = -1;

101 
boﬁ
 
nŸ_me
;

102 
öôülized
;

103 
boﬁ
 
åa˚_mm≠
;

104 c⁄° *
__¥og«me
;

106 
	síåy


108 
uöt64_t
 
hóp
;

109 
uöt64_t
 
°ack
;

110 
uöt32_t
 
time_low
;

111 
uöt32_t
 
time_high
;

114 
íåy
 
buf„r
[2 * 
DEFAULT_BUFFER_SIZE
];

115 
u©omic32_t
 
buf„r_˙t
;

116 
íåy
 
fú°
;

121 
	$upd©e_d©a
 (
hódî
 *
ªsu…
, 
size_t
 
Àn
, size_à
ﬁd_Àn
)

123 i‡(
ªsu…
 !
NULL
)

127 
ªsu…
->
Àngth
 = 
Àn
;

128 
ªsu…
->
magic
 = 
MAGIC
;

132 
memußge_size_t
 
hóp


133 
	`ˇtomic_exch™ge_™d_add
 (&
cuºít_hóp
, 
Àn
 - 
ﬁd_Àn
) +Üen - old_len;

134 
	`ˇtomic_max
 (&
≥ak_hóp
, 
hóp
);

140 i‡(
	`__glibc_u∆ikñy
 (!
°¨t_•
))

141 
°¨t_•
 = 
	`GETSP
 ();

143 
uöçå_t
 
•
 = 
	`GETSP
 ();

144 #ifde‡
STACK_GROWS_UPWARD


147 i‡(
	`__glibc_u∆ikñy
 (
•
 < 
°¨t_•
))

148 
°¨t_•
 = 
•
;

149 
size_t
 
cuºít_°ack
 = 
•
 - 
°¨t_•
;

153 i‡(
	`__glibc_u∆ikñy
 (
•
 > 
°¨t_•
))

154 
°¨t_•
 = 
•
;

155 
size_t
 
cuºít_°ack
 = 
°¨t_•
 - 
•
;

157 
	`ˇtomic_max
 (&
≥ak_°ack
, 
cuºít_°ack
);

160 
	`ˇtomic_max
 (&
≥ak_tŸÆ
, 
hóp
 + 
cuºít_°ack
);

163 i‡(
fd
 != -1)

165 
u©omic32_t
 
idx
 = 
	`ˇtomic_exch™ge_™d_add
 (&
buf„r_˙t
, 1);

166 i‡(
idx
 + 1 >2 * 
buf„r_size
)

172 
u©omic32_t
 
ª£t
 = (
idx
 + 1Ë% (2 * 
buf„r_size
);

173 
	`ˇtomic_com∑ª_™d_exch™ge_vÆ_acq
 (&
buf„r_˙t
, 
ª£t
, 
idx
 + 1);

174 i‡(
idx
 >2 * 
buf„r_size
)

175 
idx
 = 
ª£t
 - 1;

177 
	`as£π
 (
idx
 < 2 * 
DEFAULT_BUFFER_SIZE
);

179 
buf„r
[
idx
].
hóp
 = 
cuºít_hóp
;

180 
buf„r
[
idx
].
°ack
 = 
cuºít_°ack
;

181 
	`GETTIME
 (
buf„r
[
idx
].
time_low
, buf„r[idx].
time_high
);

184 i‡(
idx
 + 1 =
buf„r_size
)

185 
	`wrôe
 (
fd
, 
buf„r
, 
buf„r_size
 *  (
íåy
));

186 i‡(
idx
 + 1 =2 * 
buf„r_size
)

187 
	`wrôe
 (
fd
, &
buf„r
[
buf„r_size
], buf„r_sizê*  (
íåy
));

189 
	}
}

194 
	$öt_h™dÀr
 (
signo
)

197 
	`upd©e_d©a
 (
NULL
, 0, 0);

198 
	}
}

218 
	$me
 ()

220 c⁄° *
ív
 = 
	`gëív
 ("MEMUSAGE_PROG_NAME");

221 
size_t
 
¥og_Àn
 = 
	`°æí
 (
__¥og«me
);

223 
öôülized
 = -1;

224 
mÆlo˝
 = (*(*)(
size_t
))
	`dlsym
 (
RTLD_NEXT
, "malloc");

225 
ªÆlo˝
 = (*(*)(*, 
size_t
))
	`dlsym
 (
RTLD_NEXT
, "realloc");

226 
ˇŒo˝
 = (*(*)(
size_t
, size_t))
	`dlsym
 (
RTLD_NEXT
, "calloc");

227 
‰ìp
 = ((*)(*))
	`dlsym
 (
RTLD_NEXT
, "free");

229 
mm≠p
 = (*(*)(*, 
size_t
, , , , 
off_t
))
	`dlsym
 (
RTLD_NEXT
,

231 
mm≠64p
 =

232 (*(*)(*, 
size_t
, , , , 
off64_t
))
	`dlsym
 (
RTLD_NEXT
,

234 
mªm≠p
 = (*(*)(*, 
size_t
, size_t, , *))
	`dlsym
 (
RTLD_NEXT
,

236 
munm≠p
 = ((*)(*, 
size_t
))
	`dlsym
 (
RTLD_NEXT
, "munmap");

237 
öôülized
 = 1;

239 i‡(
ív
 !
NULL
)

242 
size_t
 
Àn
 = 
	`°æí
 (
ív
);

243 i‡(
Àn
 > 
¥og_Àn
 || 
	`°rcmp
 (
ív
, &
__¥og«me
[prog_len -Üen]) != 0

244 || (
¥og_Àn
 !
Àn
 && 
__¥og«me
[prog_len -Üen - 1] != '/'))

245 
nŸ_me
 = 
åue
;

249 i‡(!
nŸ_me
 && 
fd
 == -1)

251 c⁄° *
ouäame
;

253 i‡(!
°¨t_•
)

254 
°¨t_•
 = 
	`GETSP
 ();

256 
ouäame
 = 
	`gëív
 ("MEMUSAGE_OUTPUT");

257 i‡(
ouäame
 !
NULL
 && outname[0] != '\0'

258 && (
	`ac˚ss
 (
ouäame
, 
R_OK
 | 
W_OK
Ë=0 || 
î∫o
 =
ENOENT
))

260 
fd
 = 
	`¸ót64
 (
ouäame
, 0666);

262 i‡(
fd
 == -1)

265 
nŸ_me
 = 
åue
;

269 
fú°
.
hóp
 = 0;

270 
fú°
.
°ack
 = 0;

271 
	`GETTIME
 (
fú°
.
time_low
, fú°.
time_high
);

273 
	`wrôe
 (
fd
, &
fú°
,  (first));

274 
	`wrôe
 (
fd
, &
fú°
,  (first));

278 
buf„r_size
 = 
DEFAULT_BUFFER_SIZE
;

279 c⁄° *
°r_buf„r_size
 = 
	`gëív
 ("MEMUSAGE_BUFFER_SIZE");

280 i‡(
°r_buf„r_size
 !
NULL
)

282 
buf„r_size
 = 
	`©oi
 (
°r_buf„r_size
);

283 i‡(
buf„r_size
 =0 || buf„r_sizê> 
DEFAULT_BUFFER_SIZE
)

284 
buf„r_size
 = 
DEFAULT_BUFFER_SIZE
;

288 i‡(
	`gëív
 ("MEMUSAGE_NO_TIMER"Ë=
NULL
)

290 
siga˘i⁄
 
a˘
;

292 
a˘
.
ß_h™dÀr
 = (
sigh™dÀr_t
Ë&
öt_h™dÀr
;

293 
a˘
.
ß_Êags
 = 
SA_RESTART
;

294 
	`sigfûl£t
 (&
a˘
.
ß_mask
);

296 i‡(
	`siga˘i⁄
 (
SIGPROF
, &
a˘
, 
NULL
) >= 0)

298 
ôimîvÆ
 
timî
;

300 
timî
.
ô_vÆue
.
tv_£c
 = 0;

301 
timî
.
ô_vÆue
.
tv_u£c
 = 1;

302 
timî
.
ô_öãrvÆ
 =Åimî.
ô_vÆue
;

303 
	`£tôimî
 (
ITIMER_PROF
, &
timî
, 
NULL
);

309 i‡(!
nŸ_me
 && 
	`gëív
 ("MEMUSAGE_TRACE_MMAP"Ë!
NULL
)

310 
åa˚_mm≠
 = 
åue
;

312 
	}
}

317 
__©åibuã__
 ((
c⁄°ru˘‹
))

318 
	$öô
 ()

320 
°¨t_•
 = 
	`GETSP
 ();

321 i‡(!
öôülized
)

322 
	`me
 ();

323 
	}
}

329 
	$mÆloc
 (
size_t
 
Àn
)

331 
hódî
 *
ªsu…
 = 
NULL
;

334 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

336 i‡(
öôülized
 == -1)

337  
NULL
;

339 
	`me
 ();

343 i‡(
nŸ_me
)

344  (*
mÆlo˝
)(
Àn
);

347 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_mÆloc
]);

349 
	`ˇtomic_add
 (&
tŸÆ
[
idx_mÆloc
], 
Àn
);

351 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
);

353 i‡(
Àn
 < 65536)

354 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

356 
	`ˇtomic_ö¸emít
 (&
œrge
);

358 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

361 
ªsu…
 = (
hódî
 *Ë(*
mÆlo˝
)(
Àn
 +  (header));

362 i‡(
ªsu…
 =
NULL
)

364 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_mÆloc
]);

365  
NULL
;

369 
	`upd©e_d©a
 (
ªsu…
, 
Àn
, 0);

372  (*Ë(
ªsu…
 + 1);

373 
	}
}

379 
	$ªÆloc
 (*
ﬁd
, 
size_t
 
Àn
)

381 
hódî
 *
ªsu…
 = 
NULL
;

382 
hódî
 *
ªÆ
;

383 
size_t
 
ﬁd_Àn
;

386 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

388 i‡(
öôülized
 == -1)

389  
NULL
;

391 
	`me
 ();

395 i‡(
nŸ_me
)

396  (*
ªÆlo˝
)(
ﬁd
, 
Àn
);

398 i‡(
ﬁd
 =
NULL
)

401 
ªÆ
 = 
NULL
;

402 
ﬁd_Àn
 = 0;

406 
ªÆ
 = ((
hódî
 *Ë
ﬁd
) - 1;

407 i‡(
ªÆ
->
magic
 !
MAGIC
)

409  (*
ªÆlo˝
)(
ﬁd
, 
Àn
);

411 
ﬁd_Àn
 = 
ªÆ
->
Àngth
;

415 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_ªÆloc
]);

416 i‡(
Àn
 > 
ﬁd_Àn
)

419 
	`ˇtomic_add
 (&
tŸÆ
[
idx_ªÆloc
], 
Àn
 - 
ﬁd_Àn
);

421 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
 - 
ﬁd_Àn
);

424 i‡(
Àn
 =0 && 
ﬁd
 !
NULL
)

427 
	`ˇtomic_ö¸emít
 (&
ªÆloc_‰ì
);

429 
	`ˇtomic_add
 (&
tŸÆ
[
idx_‰ì
], 
ªÆ
->
Àngth
);

432 
	`upd©e_d©a
 (
NULL
, 0, 
ﬁd_Àn
);

435 (*
‰ìp
Ë(
ªÆ
);

437  
NULL
;

441 i‡(
Àn
 < 65536)

442 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

444 
	`ˇtomic_ö¸emít
 (&
œrge
);

446 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

449 
ªsu…
 = (
hódî
 *Ë(*
ªÆlo˝
)(
ªÆ
, 
Àn
 +  (header));

450 i‡(
ªsu…
 =
NULL
)

452 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_ªÆloc
]);

453  
NULL
;

457 i‡(
ªÆ
 =
ªsu…
)

458 
	`ˇtomic_ö¸emít
 (&
ö∂a˚
);

460 i‡(
ﬁd_Àn
 > 
Àn
)

461 
	`ˇtomic_ö¸emít
 (&
de¸ósög
);

464 
	`upd©e_d©a
 (
ªsu…
, 
Àn
, 
ﬁd_Àn
);

467  (*Ë(
ªsu…
 + 1);

468 
	}
}

474 
	$ˇŒoc
 (
size_t
 
n
, size_à
Àn
)

476 
hódî
 *
ªsu…
;

477 
size_t
 
size
 = 
n
 * 
Àn
;

480 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

482 i‡(
öôülized
 == -1)

483  
NULL
;

485 
	`me
 ();

489 i‡(
nŸ_me
)

490  (*
ˇŒo˝
)(
n
, 
Àn
);

493 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_ˇŒoc
]);

495 
	`ˇtomic_add
 (&
tŸÆ
[
idx_ˇŒoc
], 
size
);

497 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
size
);

499 i‡(
size
 < 65536)

500 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
size
 / 16]);

502 
	`ˇtomic_ö¸emít
 (&
œrge
);

504 ++
ˇŒs_tŸÆ
;

507 
ªsu…
 = (
hódî
 *Ë(*
mÆlo˝
)(
size
 +  (header));

508 i‡(
ªsu…
 =
NULL
)

510 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_ˇŒoc
]);

511  
NULL
;

515 
	`upd©e_d©a
 (
ªsu…
, 
size
, 0);

518  
	`mem£t
 (
ªsu…
 + 1, '\0', 
size
);

519 
	}
}

525 
	$‰ì
 (*
±r
)

527 
hódî
 *
ªÆ
;

530 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

532 i‡(
öôülized
 == -1)

535 
	`me
 ();

539 i‡(
nŸ_me
)

541 (*
‰ìp
Ë(
±r
);

546 i‡(
±r
 =
NULL
)

548 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_‰ì
]);

553 
ªÆ
 = ((
hódî
 *Ë
±r
) - 1;

554 i‡(
ªÆ
->
magic
 !
MAGIC
)

557 (*
‰ìp
Ë(
±r
);

562 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_‰ì
]);

564 
	`ˇtomic_add
 (&
tŸÆ
[
idx_‰ì
], 
ªÆ
->
Àngth
);

567 
	`upd©e_d©a
 (
NULL
, 0, 
ªÆ
->
Àngth
);

570 (*
‰ìp
Ë(
ªÆ
);

571 
	}
}

577 
	$mm≠
 (*
°¨t
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
)

579 *
ªsu…
 = 
NULL
;

582 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

584 i‡(
öôülized
 == -1)

585  
NULL
;

587 
	`me
 ();

591 
ªsu…
 = (*
mm≠p
)(
°¨t
, 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
);

593 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

595 
idx
 = (
Êags
 & 
MAP_ANON


596 ? 
idx_mm≠_a
 : 
¥Ÿ
 & 
PROT_WRITE
 ? 
idx_mm≠_w
 : 
idx_mm≠_r
);

599 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx
]);

601 
	`ˇtomic_add
 (&
tŸÆ
[
idx
], 
Àn
);

603 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
);

605 i‡(
Àn
 < 65536)

606 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

608 
	`ˇtomic_ö¸emít
 (&
œrge
);

610 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

613 i‡(
ªsu…
 =
NULL
)

614 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx
]);

615 i‡(
idx
 =
idx_mm≠_w
)

619 
	`upd©e_d©a
 (
NULL
, 
Àn
, 0);

623  
ªsu…
;

624 
	}
}

630 
	$mm≠64
 (*
°¨t
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off64_t
 
off£t
)

632 *
ªsu…
 = 
NULL
;

635 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

637 i‡(
öôülized
 == -1)

638  
NULL
;

640 
	`me
 ();

644 
ªsu…
 = (*
mm≠64p
)(
°¨t
, 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
);

646 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

648 
idx
 = (
Êags
 & 
MAP_ANON


649 ? 
idx_mm≠_a
 : 
¥Ÿ
 & 
PROT_WRITE
 ? 
idx_mm≠_w
 : 
idx_mm≠_r
);

652 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx
]);

654 
	`ˇtomic_add
 (&
tŸÆ
[
idx
], 
Àn
);

656 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
);

658 i‡(
Àn
 < 65536)

659 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

661 
	`ˇtomic_ö¸emít
 (&
œrge
);

663 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

666 i‡(
ªsu…
 =
NULL
)

667 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx
]);

668 i‡(
idx
 =
idx_mm≠_w
)

672 
	`upd©e_d©a
 (
NULL
, 
Àn
, 0);

676  
ªsu…
;

677 
	}
}

683 
	$mªm≠
 (*
°¨t
, 
size_t
 
ﬁd_Àn
, size_à
Àn
, 
Êags
, ...)

685 *
ªsu…
 = 
NULL
;

686 
va_li°
 
≠
;

688 
	`va_°¨t
 (
≠
, 
Êags
);

689 *
√waddr
 = (
Êags
 & 
MREMAP_FIXED
Ë? 
	`va_¨g
 (
≠
, *Ë: 
NULL
;

690 
	`va_íd
 (
≠
);

693 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

695 i‡(
öôülized
 == -1)

696  
NULL
;

698 
	`me
 ();

702 
ªsu…
 = (*
mªm≠p
)(
°¨t
, 
ﬁd_Àn
, 
Àn
, 
Êags
, 
√waddr
);

704 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

707 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_mªm≠
]);

708 i‡(
Àn
 > 
ﬁd_Àn
)

711 
	`ˇtomic_add
 (&
tŸÆ
[
idx_mªm≠
], 
Àn
 - 
ﬁd_Àn
);

713 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
 - 
ﬁd_Àn
);

716 i‡(
Àn
 < 65536)

717 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

719 
	`ˇtomic_ö¸emít
 (&
œrge
);

721 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

724 i‡(
ªsu…
 =
NULL
)

725 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_mªm≠
]);

729 i‡(
°¨t
 =
ªsu…
)

730 
	`ˇtomic_ö¸emít
 (&
ö∂a˚_mªm≠
);

732 i‡(
ﬁd_Àn
 > 
Àn
)

733 
	`ˇtomic_ö¸emít
 (&
de¸ósög_mªm≠
);

738 
	`upd©e_d©a
 (
NULL
, 
Àn
, 
ﬁd_Àn
);

743  
ªsu…
;

744 
	}
}

749 
	$munm≠
 (*
°¨t
, 
size_t
 
Àn
)

751 
ªsu…
;

754 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

756 i‡(
öôülized
 == -1)

759 
	`me
 ();

763 
ªsu…
 = (*
munm≠p
)(
°¨t
, 
Àn
);

765 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

768 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_munm≠
]);

770 i‡(
	`__glibc_likñy
 (
ªsu…
 == 0))

773 
	`ˇtomic_add
 (&
tŸÆ
[
idx_munm≠
], 
Àn
);

777 
	`upd©e_d©a
 (
NULL
, 0, 
Àn
);

780 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_munm≠
]);

783  
ªsu…
;

784 
	}
}

789 
__©åibuã__
 ((
de°ru˘‹
))

790 
	$de°
 ()

792 
≥r˚¡
, 
˙t
;

793 
maxˇŒs
;

796 i‡(
nŸ_me
)

800 
nŸ_me
 = 
åue
;

803 i‡(
fd
 != -1)

806 i‡(
buf„r_˙t
 > 
buf„r_size
)

807 
	`wrôe
 (
fd
, 
buf„r
 + 
buf„r_size
,

808 (
buf„r_˙t
 - 
buf„r_size
Ë*  (
íåy
));

810 
	`wrôe
 (
fd
, 
buf„r
, 
buf„r_˙t
 *  (
íåy
));

814 
	`l£ek
 (
fd
, 0, 
SEEK_SET
);

816 
fú°
.
°ack
 = 
≥ak_tŸÆ
;

817 
	`wrôe
 (
fd
, &
fú°
,  (
íåy
));

820 
fú°
.
hóp
 = 
≥ak_hóp
;

821 
fú°
.
°ack
 = 
≥ak_°ack
;

822 
	`GETTIME
 (
fú°
.
time_low
, fú°.
time_high
);

823 
	`wrôe
 (
fd
, &
fú°
,  (
íåy
));

826 
	`˛o£
 (
fd
);

827 
fd
 = -1;

831 
	`Ârötf
 (
°dîr
, "\n\
\e[01;32mMemory usage summary:\e[0;0m heapÅotal: %llu, heapÖeak: %lu, stackÖeak: %lu\n\
\e[04;34mÅotal callsÅotal memory failed calls\e[0m\n\
\e[00;34m malloc|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34mrealloc|\e[0m %10lu %12llu %s%12lu\e[00;00m (nomove:%ld, dec:%ld, free:%ld)\n\
\e[00;34m calloc|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34m free|\e[0m %10lu %12llu\n",

838 (Ë
gønd_tŸÆ
, (Ë
≥ak_hóp
,

839 (Ë
≥ak_°ack
,

840 (Ë
ˇŒs
[
idx_mÆloc
],

841 (Ë
tŸÆ
[
idx_mÆloc
],

842 
Áûed
[
idx_mÆloc
] ? "\e[01;41m" : "",

843 (Ë
Áûed
[
idx_mÆloc
],

844 (Ë
ˇŒs
[
idx_ªÆloc
],

845 (Ë
tŸÆ
[
idx_ªÆloc
],

846 
Áûed
[
idx_ªÆloc
] ? "\e[01;41m" : "",

847 (Ë
Áûed
[
idx_ªÆloc
],

848 (Ë
ö∂a˚
,

849 (Ë
de¸ósög
,

850 (Ë
ªÆloc_‰ì
,

851 (Ë
ˇŒs
[
idx_ˇŒoc
],

852 (Ë
tŸÆ
[
idx_ˇŒoc
],

853 
Áûed
[
idx_ˇŒoc
] ? "\e[01;41m" : "",

854 (Ë
Áûed
[
idx_ˇŒoc
],

855 (Ë
ˇŒs
[
idx_‰ì
],

856 (Ë
tŸÆ
[
idx_‰ì
]);

858 i‡(
åa˚_mm≠
)

859 
	`Ârötf
 (
°dîr
, "\
\e[00;34mmmap(r)|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34mmmap(w)|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34mmmap(a)|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34m mremap|\e[0m %10lu %12llu %s%12lu\e[00;00m (nomove: %ld, dec:%ld)\n\
\e[00;34m munmap|\e[0m %10lu %12llu %s%12lu\e[00;00m\n",

865 (Ë
ˇŒs
[
idx_mm≠_r
],

866 (Ë
tŸÆ
[
idx_mm≠_r
],

867 
Áûed
[
idx_mm≠_r
] ? "\e[01;41m" : "",

868 (Ë
Áûed
[
idx_mm≠_r
],

869 (Ë
ˇŒs
[
idx_mm≠_w
],

870 (Ë
tŸÆ
[
idx_mm≠_w
],

871 
Áûed
[
idx_mm≠_w
] ? "\e[01;41m" : "",

872 (Ë
Áûed
[
idx_mm≠_w
],

873 (Ë
ˇŒs
[
idx_mm≠_a
],

874 (Ë
tŸÆ
[
idx_mm≠_a
],

875 
Áûed
[
idx_mm≠_a
] ? "\e[01;41m" : "",

876 (Ë
Áûed
[
idx_mm≠_a
],

877 (Ë
ˇŒs
[
idx_mªm≠
],

878 (Ë
tŸÆ
[
idx_mªm≠
],

879 
Áûed
[
idx_mªm≠
] ? "\e[01;41m" : "",

880 (Ë
Áûed
[
idx_mªm≠
],

881 (Ë
ö∂a˚_mªm≠
,

882 (Ë
de¸ósög_mªm≠
,

883 (Ë
ˇŒs
[
idx_munm≠
],

884 (Ë
tŸÆ
[
idx_munm≠
],

885 
Áûed
[
idx_munm≠
] ? "\e[01;41m" : "",

886 (Ë
Áûed
[
idx_munm≠
]);

889 
	`Ârötf
 (
°dîr
, "\e[01;32mHistogram for block sizes:\e[0;0m\n");

892 
maxˇŒs
 = 
œrge
;

893 
˙t
 = 0; cnt < 65536; cnt += 16)

894 i‡(
hi°ogøm
[
˙t
 / 16] > 
maxˇŒs
)

895 
maxˇŒs
 = 
hi°ogøm
[
˙t
 / 16];

897 
˙t
 = 0; cnt < 65536; cnt += 16)

899 i‡(
hi°ogøm
[
˙t
 / 16] != 0)

901 
≥r˚¡
 = (
hi°ogøm
[
˙t
 / 16] * 100Ë/ 
ˇŒs_tŸÆ
;

902 
	`Ârötf
 (
°dîr
, "%5d-%-5d%12lu ", 
˙t
, cnt + 15,

903 (Ë
hi°ogøm
[
˙t
 / 16]);

904 i‡(
≥r˚¡
 == 0)

905 
	`Âuts
 (" <1% \e[41;37m", 
°dîr
);

907 
	`Ârötf
 (
°dîr
, "%3d%% \e[41;37m", 
≥r˚¡
);

911 
≥r˚¡
 = (
hi°ogøm
[
˙t
 / 16] * 50Ë/ 
maxˇŒs
;

912 
≥r˚¡
-- > 0)

913 
	`Âutc
 ('=', 
°dîr
);

914 
	`Âuts
 ("\e[0;0m\n", 
°dîr
);

917 i‡(
œrge
 != 0)

919 
≥r˚¡
 = (
œrge
 * 100Ë/ 
ˇŒs_tŸÆ
;

920 
	`Ârötf
 (
°dîr
, "Ü¨gê %12lu ", (Ë
œrge
);

921 i‡(
≥r˚¡
 == 0)

922 
	`Âuts
 (" <1% \e[41;37m", 
°dîr
);

924 
	`Ârötf
 (
°dîr
, "%3d%% \e[41;37m", 
≥r˚¡
);

925 
≥r˚¡
 = (
œrge
 * 50Ë/ 
maxˇŒs
;

926 
≥r˚¡
-- > 0)

927 
	`Âutc
 ('=', 
°dîr
);

928 
	`Âuts
 ("\e[0;0m\n", 
°dîr
);

935 
nŸ_me
 = 
Ál£
;

936 
	}
}

	@memusagestat.c

19 
	#_FILE_OFFSET_BITS
 64

	)

21 
	~<¨gp.h
>

22 
	~<as£π.h
>

23 
	~<î∫o.h
>

24 
	~<îr‹.h
>

25 
	~<f˙é.h
>

26 
	~<gë›t.h
>

27 
	~<öây≥s.h
>

28 
	~<liböé.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<°döt.h
>

34 
	~<sys/∑øm.h
>

35 
	~<sys/°©.h
>

37 
	~<gd.h
>

38 
	~<gdf⁄é.h
>

39 
	~<gdf⁄ts.h
>

41 
	~"../vîsi⁄.h
"

42 
	#PACKAGE
 
_libc_öé_domaö«me


	)

45 
	#XSIZE
 800

	)

46 
	#YSIZE
 600

	)

48 #i‚de‡
N_


49 
	#N_
(
Arg
Ë
	)
Arg

54 c⁄° 
¨gp_›ti⁄
 
	g›ti⁄s
[] =

56 { "ouçut", 'o', 
N_
 ("FILE"), 0, N_ ("Name output file") },

57 { "°rög", 's', 
N_
 ("STRING"), 0, N_ ("Title string used in output graphic") },

58 { "time", 't', 
NULL
, 0, 
N_
 ("\
 outputÜinearÅoÅime (default isÜinearÅoÇumber of function calls)\
") },

61 { "tŸÆ", 'T', 
NULL
, 0,

62 
N_
 ("Also draw graph forÅotal memory consumption") },

63 { "x-size", 'x', 
N_
 ("VALUE"), 0,

64 
N_
 ("Make output graphic VALUEÖixels wide") },

65 { "y-size", 'y', "VALUE", 0, 
N_
 ("Make output graphic VALUEÖixels high") },

66 { 
NULL
, 0, NULL, 0, NULL }

70 c⁄° 
	gdoc
[] = 
N_
 ("Generate graphic from memoryÖrofiling data");

73 c⁄° 
	g¨gs_doc
[] = 
N_
 ("DATAFILE [OUTFILE]");

76 
îr‹_t
 
∑r£_›t
 (
key
, *
¨g
, 
¨gp_°©e
 *
°©e
);

79 *
m‹e_hñp
 (
key
, c⁄° *
ãxt
, *
öput
);

82 
¥öt_vîsi⁄
 (
FILE
 *
°ªam
, 
¨gp_°©e
 *
°©e
);

83 (*
¨gp_¥ogøm_vîsi⁄_hook
Ë(
FILE
 *, 
¨gp_°©e
 *Ë
¥öt_vîsi⁄
;

86 
¨gp
árgp =

88 
›ti⁄s
, 
∑r£_›t
, 
¨gs_doc
, 
doc
, 
NULL
, 
m‹e_hñp


89 
	}
};

92 
	síåy


94 
uöt64_t
 
	mhóp
;

95 
uöt64_t
 
	m°ack
;

96 
uöt32_t
 
	mtime_low
;

97 
uöt32_t
 
	mtime_high
;

102 
size_t
 
	gxsize
;

103 
size_t
 
	gysize
;

106 *
	gouäame
;

109 c⁄° *
	g°rög
;

112 
	gtime_ba£d
;

115 
	gÆso_tŸÆ
 = 0;

119 
	$maö
 (
¨gc
, *
¨gv
[])

121 
ªmaöög
;

122 c⁄° *
ö«me
;

123 
gdImagePå
 
im_out
;

124 
gªy
, 
blue
, 
ªd
, 
gªí
, 
yñlow
, 
bœck
;

125 
fd
;

126 
°©
 
°
;

127 
size_t
 
maxsize_hóp
;

128 
size_t
 
maxsize_°ack
;

129 
size_t
 
maxsize_tŸÆ
;

130 
uöt64_t
 
tŸÆ
;

131 
uöt64_t
 
˙t
, 
˙t2
;

132 
FILE
 *
outfûe
;

133 
buf
[30];

134 
size_t
 
œ°_hóp
;

135 
size_t
 
œ°_°ack
;

136 
size_t
 
œ°_tŸÆ
;

137 
íåy
 
hódít
[2];

138 
uöt64_t
 
°¨t_time
;

139 
uöt64_t
 
íd_time
;

140 
uöt64_t
 
tŸÆ_time
;

141 c⁄° *
hóp_f‹m©
, *
°ack_f‹m©
;

142 
hóp_sˇÀ
, 
°ack_sˇÀ
, 
löe
;

144 
ouäame
 = 
NULL
;

145 
xsize
 = 
XSIZE
;

146 
ysize
 = 
YSIZE
;

147 
°rög
 = 
NULL
;

150 
	`¨gp_∑r£
 (&
¨gp
, 
¨gc
, 
¨gv
, 0, &
ªmaöög
, 
NULL
);

152 i‡(
ªmaöög
 >
¨gc
 ||Ñemaining + 2 <árgc)

154 
	`¨gp_hñp
 (&
¨gp
, 
°dout
, 
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
,

155 
¥ogøm_övoˇti⁄_sh‹t_«me
);

156 
	`exô
 (1);

159 
ö«me
 = 
¨gv
[
ªmaöög
++];

161 i‡(
ªmaöög
 < 
¨gc
)

162 
ouäame
 = 
¨gv
[
ªmaöög
];

163 i‡(
ouäame
 =
NULL
)

165 
size_t
 
Àn
 = 
	`°æí
 (
ö«me
);

166 
ouäame
 = 
	`Æloˇ
 (
Àn
 + 5);

167 
	`°p˝y
 (°p˝y (
ouäame
, 
ö«me
), ".png");

172 
fd
 = 
	`›í
 (
ö«me
, 
O_RDWR
);

173 i‡(
fd
 == -1)

174 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, "cannot open input file");

175 i‡(
	`f°©
 (
fd
, &
°
) != 0)

177 
	`˛o£
 (
fd
);

178 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, "cannot get size of input file");

181 i‡((
°
.
°_size
 %  (
íåy
)) != 0

183 || 
°
.
°_size
 < 2 *  (
íåy
))

185 
	`˛o£
 (
fd
);

186 
	`îr‹
 (
EXIT_FAILURE
, 0, "input file has incorrect size");

189 
tŸÆ
 = 
°
.
°_size
 /  (
íåy
) - 2;

192 
	`ªad
 (
fd
, 
hódít
,  (headent));

193 
maxsize_hóp
 = 
hódít
[1].
hóp
;

194 
maxsize_°ack
 = 
hódít
[1].
°ack
;

195 
maxsize_tŸÆ
 = 
hódít
[0].
°ack
;

197 i‡(
maxsize_hóp
 =0 && 
maxsize_°ack
 == 0)

202 
íåy
 
√xt
;

206 i‡(
	`ªad
 (
fd
, &
√xt
,  (next)) == 0)

208 i‡(
√xt
.
hóp
 > 
maxsize_hóp
)

209 
maxsize_hóp
 = 
√xt
.
hóp
;

210 i‡(
√xt
.
°ack
 > 
maxsize_°ack
)

211 
maxsize_°ack
 = 
√xt
.
°ack
;

212 i‡(
maxsize_hóp
 + 
maxsize_°ack
 > 
maxsize_tŸÆ
)

213 
maxsize_tŸÆ
 = 
maxsize_hóp
 + 
maxsize_°ack
;

216 
hódít
[0].
°ack
 = 
maxsize_tŸÆ
;

217 
hódít
[1].
hóp
 = 
maxsize_hóp
;

218 
hódít
[1].
°ack
 = 
maxsize_°ack
;

219 
hódít
[1].
time_low
 = 
√xt
.time_low;

220 
hódít
[1].
time_high
 = 
√xt
.time_high;

223 
	`l£ek
 (
fd
, 0, 
SEEK_SET
);

224 
	`wrôe
 (
fd
, 
hódít
, 2 *  (
íåy
));

227 i‡(
Æso_tŸÆ
)

231 
maxsize_hóp
 = 
maxsize_tŸÆ
;

232 
maxsize_°ack
 = 
maxsize_tŸÆ
;

235 
°¨t_time
 = ((
uöt64_t
Ë
hódít
[0].
time_high
Ë<< 32 | hódít[0].
time_low
;

236 
íd_time
 = ((
uöt64_t
Ë
hódít
[1].
time_high
Ë<< 32 | hódít[1].
time_low
;

237 
tŸÆ_time
 = 
íd_time
 - 
°¨t_time
;

239 i‡(
xsize
 < 100)

240 
xsize
 = 100;

241 i‡(
ysize
 < 80)

242 
ysize
 = 80;

245 
im_out
 = 
	`gdImageCª©e
 (
xsize
, 
ysize
);

248 
gªy
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 224, 224, 224);

251 
	`gdImageCﬁ‹Tøn•¨ít
 (
im_out
, 
gªy
);

254 
ªd
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 255, 0, 0);

255 
gªí
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 0, 130, 0);

256 
blue
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 0, 0, 255);

257 
yñlow
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 154, 205, 50);

258 
bœck
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 0, 0, 0);

260 
	`gdImageRe˘™gÀ
 (
im_out
, 40, 20, 
xsize
 - 40, 
ysize
 - 20, 
blue
);

262 i‡(
maxsize_hóp
 < 1024)

264 
hóp_f‹m©
 = "%Zu";

265 
hóp_sˇÀ
 = 1;

267 i‡(
maxsize_hóp
 < 1024 * 1024 * 100)

269 
hóp_f‹m©
 = "%Zuk";

270 
hóp_sˇÀ
 = 1024;

274 
hóp_f‹m©
 = "%ZuM";

275 
hóp_sˇÀ
 = 1024 * 1024;

278 i‡(
maxsize_°ack
 < 1024)

280 
°ack_f‹m©
 = "%Zu";

281 
°ack_sˇÀ
 = 1;

283 i‡(
maxsize_°ack
 < 1024 * 1024 * 100)

285 
°ack_f‹m©
 = "%Zuk";

286 
°ack_sˇÀ
 = 1024;

290 
°ack_f‹m©
 = "%ZuM";

291 
°ack_sˇÀ
 = 1024 * 1024;

294 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 38, 
ysize
 - 14, (*) "0",

295 
blue
);

296 
	`¢¥ötf
 (
buf
,  (buf), 
hóp_f‹m©
, 0);

297 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
maxsize_hóp
 < 1024 ? 32 : 26,

298 
ysize
 - 26, (*Ë
buf
, 
ªd
);

299 
	`¢¥ötf
 (
buf
,  (buf), 
°ack_f‹m©
, 0);

300 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 37, 
ysize
 - 26,

301 (*Ë
buf
, 
gªí
);

303 i‡(
°rög
 !
NULL
)

304 
	`gdImageSåög
 (
im_out
, 
gdF⁄tL¨ge
, (
xsize
 - 
	`°æí
 (
°rög
) * 8) / 2,

305 2, (*Ë
°rög
, 
gªí
);

307 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 1, 
ysize
 / 2 - 10,

308 (*Ë"Æloˇãd", 
ªd
);

309 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 11, 
ysize
 / 2 - 10,

310 (*Ë"mem‹y", 
ªd
);

312 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 39, 
ysize
 / 2 - 10,

313 (*Ë"u£d", 
gªí
);

314 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 27, 
ysize
 / 2 - 10,

315 (*Ë"°ack", 
gªí
);

317 
	`¢¥ötf
 (
buf
,  (buf), 
hóp_f‹m©
, 
maxsize_hóp
 / 
hóp_sˇÀ
);

318 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 39 - 
	`°æí
 (
buf
) * 6, 14,

319 (*Ë
buf
, 
ªd
);

320 
	`¢¥ötf
 (
buf
,  (buf), 
°ack_f‹m©
, 
maxsize_°ack
 / 
°ack_sˇÀ
);

321 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 37, 14,

322 (*Ë
buf
, 
gªí
);

324 
löe
 = 1;Üine <= 3; ++line)

326 i‡(
maxsize_hóp
 > 0)

328 
˙t
 = (((
ysize
 - 40Ë* (
maxsize_hóp
 / 4 * 
löe
 / 
hóp_sˇÀ
))

329 / (
maxsize_hóp
 / 
hóp_sˇÀ
));

330 
	`gdImageDashedLöe
 (
im_out
, 40, 
ysize
 - 20 - 
˙t
, 
xsize
 - 40,

331 
ysize
 - 20 - 
˙t
, 
ªd
);

332 
	`¢¥ötf
 (
buf
,  (buf), 
hóp_f‹m©
,

333 
maxsize_hóp
 / 4 * 
löe
 / 
hóp_sˇÀ
);

334 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 39 - 
	`°æí
 (
buf
) * 6,

335 
ysize
 - 26 - 
˙t
, (*Ë
buf
, 
ªd
);

338 
˙t
 = 0;

340 i‡(
maxsize_°ack
 > 0)

341 
˙t2
 = (((
ysize
 - 40Ë* (
maxsize_°ack
 / 4 * 
löe
 / 
°ack_sˇÀ
))

342 / (
maxsize_°ack
 / 
°ack_sˇÀ
));

344 
˙t2
 = 0;

346 i‡(
˙t
 !
˙t2
)

347 
	`gdImageDashedLöe
 (
im_out
, 40, 
ysize
 - 20 - 
˙t2
, 
xsize
 - 40,

348 
ysize
 - 20 - 
˙t2
, 
gªí
);

349 
	`¢¥ötf
 (
buf
,  (buf), 
°ack_f‹m©
, 
maxsize_°ack
 / 4 * 
löe
 /

350 
°ack_sˇÀ
);

351 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 37, 
ysize
 - 26 - 
˙t2
,

352 (*Ë
buf
, 
gªí
);

355 
	`¢¥ötf
 (
buf
,  (buf), "%Œu", (Ë
tŸÆ
);

356 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 50, 
ysize
 - 14,

357 (*Ë
buf
, 
blue
);

359 i‡(!
time_ba£d
)

361 
uöt64_t
 
¥eviou¶y
 = 
°¨t_time
;

363 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 40 + (
xsize
 - 32 * 6 - 80) / 2,

364 
ysize
 - 12,

366 
blue
);

369 
œ°_°ack
 = 
œ°_hóp
 = 
œ°_tŸÆ
 = 
ysize
 - 20;

370 
˙t
 = 1; c¡ <
tŸÆ
; ++cnt)

372 
íåy
Éntry;

373 
size_t
 
√w
[2];

374 
uöt64_t
 
now
;

376 
	`ªad
 (
fd
, &
íåy
,  (entry));

378 
now
 = ((
uöt64_t
Ë
íåy
.
time_high
Ë<< 32 |É¡ry.
time_low
;

380 i‡((((
¥eviou¶y
 - 
°¨t_time
Ë* 100Ë/ 
tŸÆ_time
) % 10 < 5)

381 
	`gdImageFûÀdRe˘™gÀ
 (
im_out
,

382 40 + ((
˙t
 - 1Ë* (
xsize
 - 80)Ë/ 
tŸÆ
,

383 
ysize
 - 19,

384 39 + (
˙t
 * (
xsize
 - 80)Ë/ 
tŸÆ
,

385 
ysize
 - 14, 
yñlow
);

386 
¥eviou¶y
 = 
now
;

388 i‡(
Æso_tŸÆ
 && 
maxsize_hóp
 > 0)

390 
size_t
 
√w3
;

392 
√w3
 = (
ysize
 - 20) - (((() (ysize - 40))

393 * (
íåy
.
hóp
 +É¡ry.
°ack
))

394 / 
maxsize_hóp
);

395 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* (
˙t
 - 1)Ë/ 
tŸÆ
,

396 
œ°_tŸÆ
,

397 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
, 
√w3
,

398 
bœck
);

399 
œ°_tŸÆ
 = 
√w3
;

402 i‡(
maxsize_hóp
 > 0)

404 
√w
[0] = ((
ysize
 - 20)

405 - ((((Ë(
ysize
 - 40))

406 * 
íåy
.
hóp
Ë/ 
maxsize_hóp
));

407 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* (
˙t
 - 1)Ë/ 
tŸÆ
,

408 
œ°_hóp
, 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
,

409 
√w
[0], 
ªd
);

410 
œ°_hóp
 = 
√w
[0];

413 i‡(
maxsize_°ack
 > 0)

415 
√w
[1] = ((
ysize
 - 20)

416 - ((((Ë(
ysize
 - 40))

417 * 
íåy
.
°ack
Ë/ 
maxsize_°ack
));

418 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* (
˙t
 - 1)Ë/ 
tŸÆ
,

419 
œ°_°ack
, 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
,

420 
√w
[1], 
gªí
);

421 
œ°_°ack
 = 
√w
[1];

425 
˙t
 = 0;

426 
˙t
 < 
tŸÆ
)

428 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
, 
ysize
 - 20,

429 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
, 
ysize
 - 15, 
blue
);

430 
˙t
 +
	`MAX
 (1, 
tŸÆ
 / 20);

432 
	`gdImageLöe
 (
im_out
, 
xsize
 - 40, 
ysize
 - 20, xsize - 40, ysize - 15,

433 
blue
);

437 
uöt64_t
 
√xt_tick
 = 
	`MAX
 (1, 
tŸÆ
 / 20);

438 
size_t
 
œ°_xpos
 = 40;

440 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 40 + (
xsize
 - 39 * 6 - 80) / 2,

441 
ysize
 - 12,

442 (*Ë" \
# mem‹y h™dlög fun˘i⁄ cÆl†/Åime", 
blue
);

445 
˙t
 = 0; cnt < 20; cnt += 2)

446 
	`gdImageFûÀdRe˘™gÀ
 (
im_out
,

447 40 + (
˙t
 * (
xsize
 - 80)Ë/ 20, 
ysize
 - 19,

448 39 + ((
˙t
 + 1Ë* (
xsize
 - 80)) / 20,

449 
ysize
 - 14, 
yñlow
);

451 
œ°_°ack
 = 
œ°_hóp
 = 
œ°_tŸÆ
 = 
ysize
 - 20;

452 
˙t
 = 1; c¡ <
tŸÆ
; ++cnt)

454 
íåy
Éntry;

455 
size_t
 
√w
[2];

456 
size_t
 
xpos
;

457 
uöt64_t
 
now
;

459 
	`ªad
 (
fd
, &
íåy
,  (entry));

461 
now
 = ((
uöt64_t
Ë
íåy
.
time_high
Ë<< 32 |É¡ry.
time_low
;

462 
xpos
 = 40 + ((
xsize
 - 80Ë* (
now
 - 
°¨t_time
)Ë/ 
tŸÆ_time
;

464 i‡(
˙t
 =
√xt_tick
)

466 
	`gdImageLöe
 (
im_out
, 
xpos
, 
ysize
 - 20, xpos, ysizê- 15, 
blue
);

467 
√xt_tick
 +
	`MAX
 (1, 
tŸÆ
 / 20);

470 i‡(
Æso_tŸÆ
 && 
maxsize_hóp
 > 0)

472 
size_t
 
√w3
;

474 
√w3
 = (
ysize
 - 20) - (((() (ysize - 40))

475 * (
íåy
.
hóp
 +É¡ry.
°ack
))

476 / 
maxsize_hóp
);

477 
	`gdImageLöe
 (
im_out
, 
œ°_xpos
, 
œ°_tŸÆ
, 
xpos
, 
√w3
, 
bœck
);

478 
œ°_tŸÆ
 = 
√w3
;

481 i‡(
maxsize_hóp
 > 0)

483 
√w
[0] = ((
ysize
 - 20)

484 - ((((Ë(
ysize
 - 40))

485 * 
íåy
.
hóp
Ë/ 
maxsize_hóp
));

486 
	`gdImageLöe
 (
im_out
, 
œ°_xpos
, 
œ°_hóp
, 
xpos
, 
√w
[0], 
ªd
);

487 
œ°_hóp
 = 
√w
[0];

490 i‡(
maxsize_°ack
 > 0)

492 
√w
[1] = ((
ysize
 - 20)

493 - ((((Ë(
ysize
 - 40))

494 * 
íåy
.
°ack
Ë/ 
maxsize_°ack
));

495 
	`gdImageLöe
 (
im_out
, 
œ°_xpos
, 
œ°_°ack
, 
xpos
, 
√w
[1],

496 
gªí
);

497 
œ°_°ack
 = 
√w
[1];

500 
œ°_xpos
 = 
xpos
;

505 
outfûe
 = 
	`f›í
 (
ouäame
, "w");

506 i‡(
outfûe
 =
NULL
)

507 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, "cannot open output file");

509 
	`gdImagePng
 (
im_out
, 
outfûe
);

511 
	`f˛o£
 (
outfûe
);

513 
	`gdImageDe°roy
 (
im_out
);

516 
	}
}

520 
îr‹_t


521 
	$∑r£_›t
 (
key
, *
¨g
, 
¨gp_°©e
 *
°©e
)

523 
key
)

526 
ouäame
 = 
¨g
;

529 
°rög
 = 
¨g
;

532 
time_ba£d
 = 1;

535 
Æso_tŸÆ
 = 1;

538 
xsize
 = 
	`©oi
 (
¨g
);

539 i‡(
xsize
 == 0)

540 
xsize
 = 
XSIZE
;

543 
ysize
 = 
	`©oi
 (
¨g
);

544 i‡(
ysize
 == 0)

545 
ysize
 = 
XSIZE
;

548  
ARGP_ERR_UNKNOWN
;

551 
	}
}

555 
	$m‹e_hñp
 (
key
, c⁄° *
ãxt
, *
öput
)

557 *
ç
;

559 
key
)

561 
ARGP_KEY_HELP_EXTRA
:

563 i‡(
	`a•rötf
 (&
ç
, 
	`gëãxt
 ("\
 bugÑï‹tög in°ru˘i⁄s,ÖÀa£ sì:\n\
%s.\n"), 
REPORT_BUGS_TO
) < 0)

566  
NULL
;

568  
ç
;

573  (*Ë
ãxt
;

574 
	}
}

578 
	$¥öt_vîsi⁄
 (
FILE
 *
°ªam
, 
¨gp_°©e
 *
°©e
)

580 
	`Ârötf
 (
°ªam
, "memußge°© %s%s\n", 
PKGVERSION
, 
VERSION
);

581 
	`Ârötf
 (
°ªam
, 
	`gëãxt
 ("\
 (C) %s Free Software Foundation, Inc.\n\
 is free software; seeÅhe source for copying conditions. There is NO\n\
;ÇotÉven for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\
"), "2016");

586 
	`Ârötf
 (
°ªam
, 
	`gëãxt
 ("Written by %s.\n"), "Ulrich Drepper");

587 
	}
}

	@morecore.c

18 #i‚de‡
_MALLOC_INTERNAL


19 
	#_MALLOC_INTERNAL


	)

20 
	~<mÆloc.h
>

23 #i‚de‡
__GNU_LIBRARY__


24 
	#__sbrk
 
sbrk


	)

27 #ifde‡
__GNU_LIBRARY__


31 
	~<°ddef.h
>

32 
	~<°dlib.h
>

33 *
	$__sbrk
 (
±rdiff_t
 
ö¸emít
Ë
__THROW
;

34 
	$libc_hiddí_¥Ÿo
 (
__sbrk
)

37 #i‚de‡
NULL


38 
	#NULL
 0

	)

45 
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
ö¸emít
)

47 *
ªsu…
 = (*Ë
	`__sbrk
 (
ö¸emít
);

48 i‡(
ªsu…
 == (*) -1)

49  
NULL
;

51  
ªsu…
;

52 
	}
}

53 
libc_hiddí_def
 (
__deÁu…_m‹ec‹e
)

	@mtrace.c

21 #i‚de‡
_MALLOC_INTERNAL


22 
	#_MALLOC_INTERNAL


	)

23 
	~<mÆloc.h
>

24 
	~<mcheck.h
>

25 
	~<libc-lock.h
>

28 
	~<dlf˙.h
>

29 
	~<f˙é.h
>

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<°dlib.h
>

34 
	~<_ôﬂ.h
>

36 
	~<libc-öã∫Æ.h
>

38 
	~<libio/iﬁibio.h
>

39 
	#£tvbuf
(
s
, 
b
, 
f
, 
l
Ë
	`_IO_£tvbuf
 (s, b, f,Ü)

	)

40 
	#fwrôe
(
buf
, 
size
, 
cou¡
, 
Â
Ë
	`_IO_fwrôe
 (buf, size, cou¡, fp)

	)

42 
	~<kî√l-„©uªs.h
>

44 
	#TRACE_BUFFER_SIZE
 512

	)

46 
FILE
 *
	gmÆl°ªam
;

47 c⁄° 
	gmÆÀnv
[] = "MALLOC_TRACE";

48 *
	gmÆloc_åa˚_buf„r
;

50 
__libc_lock_deföe_öôülized
 (, 
lock
);

53 
__±r_t
 
	gmÆlw©ch
;

56 (*
å_ﬁd_‰ì_hook
Ë(
__±r_t
 
±r
, const __ptr_t);

57 
	$__±r_t
 (*
å_ﬁd_mÆloc_hook
Ë(
size_t
 
size
, c⁄° 
__±r_t
);

58 
	$__±r_t
 (*
å_ﬁd_ªÆloc_hook
Ë(
__±r_t
 
±r
, 
size_t
 
size
,

59 c⁄° 
__±r_t
);

60 
	$__±r_t
 (*
å_ﬁd_memÆign_hook
Ë(
size_t
 
__Æignmít
, size_à
__size
,

61 c⁄° 
__±r_t
);

68 
	$å_bªak
 (Ë
__THROW
;

69 
	$libc_hiddí_¥Ÿo
 (
å_bªak
)

71 
	$å_bªak
 ()

73 
	}
}

74 
	$libc_hiddí_def
 (
å_bªak
)

76 
öã∫Æ_fun˘i⁄


77 
	$å_whîe
 (c⁄° 
__±r_t
 
ˇŒî
, 
Dl_öfo
 *
öfo
)

79 i‡(
ˇŒî
 !
NULL
)

81 i‡(
öfo
 !
NULL
)

83 *
buf
 = (*) "";

84 i‡(
öfo
->
dli_¢ame
 !
NULL
)

86 
size_t
 
Àn
 = 
	`°æí
 (
öfo
->
dli_¢ame
);

87 
buf
 = 
	`Æloˇ
 (
Àn
 + 6 + 2 *  (*));

89 
buf
[0] = '(';

90 
	`__°p˝y
 (
	`_fôﬂ
 (
ˇŒî
 >(c⁄° 
__±r_t
Ë
öfo
->
dli_ßddr


91 ? 
ˇŒî
 - (c⁄° 
__±r_t
Ë
öfo
->
dli_ßddr


92 : (c⁄° 
__±r_t
Ë
öfo
->
dli_ßddr
 - 
ˇŒî
,

93 
	`__°p˝y
 (
	`__memp˝y
 (
buf
 + 1, 
öfo
->
dli_¢ame
,

94 
Àn
),

95 
ˇŒî
 >(
__±r_t
Ë
öfo
->
dli_ßddr


101 
	`Ârötf
 (
mÆl°ªam
, "@ %s%s%s[%p] ",

102 
öfo
->
dli_‚ame
 ? : "", info->dli_fname ? ":" : "",

103 
buf
, 
ˇŒî
);

106 
	`Ârötf
 (
mÆl°ªam
, "@ [%p] ", 
ˇŒî
);

108 
	}
}

110 
Dl_öfo
 *

111 
	$lock_™d_öfo
 (c⁄° 
__±r_t
 
ˇŒî
, 
Dl_öfo
 *
mem
)

113 i‡(
ˇŒî
 =
NULL
)

114  
NULL
;

116 
Dl_öfo
 *
ªs
 = 
	`_dl_addr
 (
ˇŒî
, 
mem
, 
NULL
, NULL) ? mem : NULL;

118 
	`__libc_lock_lock
 (
lock
);

120  
ªs
;

121 
	}
}

124 
	$å_‰ìhook
 (
__±r_t
 
±r
, c⁄° __±r_à
ˇŒî
)

126 i‡(
±r
 =
NULL
)

129 
Dl_öfo
 
mem
;

130 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

131 
	`å_whîe
 (
ˇŒî
, 
öfo
);

133 
	`Ârötf
 (
mÆl°ªam
, "- %p\n", 
±r
);

134 i‡(
±r
 =
mÆlw©ch
)

136 
	`__libc_lock_u∆ock
 (
lock
);

137 
	`å_bªak
 ();

138 
	`__libc_lock_lock
 (
lock
);

140 
__‰ì_hook
 = 
å_ﬁd_‰ì_hook
;

141 i‡(
å_ﬁd_‰ì_hook
 !
NULL
)

142 (*
å_ﬁd_‰ì_hook
)(
±r
, 
ˇŒî
);

144 
	`‰ì
 (
±r
);

145 
__‰ì_hook
 = 
å_‰ìhook
;

146 
	`__libc_lock_u∆ock
 (
lock
);

147 
	}
}

149 
__±r_t


150 
	$å_mÆlochook
 (
size_t
 
size
, c⁄° 
__±r_t
 
ˇŒî
)

152 
__±r_t
 
hdr
;

154 
Dl_öfo
 
mem
;

155 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

157 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

158 i‡(
å_ﬁd_mÆloc_hook
 !
NULL
)

159 
hdr
 = (
__±r_t
Ë(*
å_ﬁd_mÆloc_hook
)(
size
, 
ˇŒî
);

161 
hdr
 = (
__±r_t
Ë
	`mÆloc
 (
size
);

162 
__mÆloc_hook
 = 
å_mÆlochook
;

164 
	`å_whîe
 (
ˇŒî
, 
öfo
);

166 
	`Ârötf
 (
mÆl°ªam
, "+ %∞%#lx\n", 
hdr
, (Ë
size
);

168 
	`__libc_lock_u∆ock
 (
lock
);

170 i‡(
hdr
 =
mÆlw©ch
)

171 
	`å_bªak
 ();

173  
hdr
;

174 
	}
}

176 
__±r_t


177 
	$å_ªÆlochook
 (
__±r_t
 
±r
, 
size_t
 
size
, c⁄° __±r_à
ˇŒî
)

179 
__±r_t
 
hdr
;

181 i‡(
±r
 =
mÆlw©ch
)

182 
	`å_bªak
 ();

184 
Dl_öfo
 
mem
;

185 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

187 
__‰ì_hook
 = 
å_ﬁd_‰ì_hook
;

188 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

189 
__ªÆloc_hook
 = 
å_ﬁd_ªÆloc_hook
;

190 i‡(
å_ﬁd_ªÆloc_hook
 !
NULL
)

191 
hdr
 = (
__±r_t
Ë(*
å_ﬁd_ªÆloc_hook
)(
±r
, 
size
, 
ˇŒî
);

193 
hdr
 = (
__±r_t
Ë
	`ªÆloc
 (
±r
, 
size
);

194 
__‰ì_hook
 = 
å_‰ìhook
;

195 
__mÆloc_hook
 = 
å_mÆlochook
;

196 
__ªÆloc_hook
 = 
å_ªÆlochook
;

198 
	`å_whîe
 (
ˇŒî
, 
öfo
);

199 i‡(
hdr
 =
NULL
)

201 i‡(
size
 != 0)

203 
	`Ârötf
 (
mÆl°ªam
, "! %∞%#lx\n", 
±r
, (Ë
size
);

205 
	`Ârötf
 (
mÆl°ªam
, "- %p\n", 
±r
);

207 i‡(
±r
 =
NULL
)

208 
	`Ârötf
 (
mÆl°ªam
, "+ %∞%#lx\n", 
hdr
, (Ë
size
);

211 
	`Ârötf
 (
mÆl°ªam
, "< %p\n", 
±r
);

212 
	`å_whîe
 (
ˇŒî
, 
öfo
);

213 
	`Ârötf
 (
mÆl°ªam
, "> %∞%#lx\n", 
hdr
, (Ë
size
);

216 
	`__libc_lock_u∆ock
 (
lock
);

218 i‡(
hdr
 =
mÆlw©ch
)

219 
	`å_bªak
 ();

221  
hdr
;

222 
	}
}

224 
__±r_t


225 
	$å_memÆignhook
 (
size_t
 
Æignmít
, size_à
size
, c⁄° 
__±r_t
 
ˇŒî
)

227 
__±r_t
 
hdr
;

229 
Dl_öfo
 
mem
;

230 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

232 
__memÆign_hook
 = 
å_ﬁd_memÆign_hook
;

233 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

234 i‡(
å_ﬁd_memÆign_hook
 !
NULL
)

235 
hdr
 = (
__±r_t
Ë(*
å_ﬁd_memÆign_hook
)(
Æignmít
, 
size
, 
ˇŒî
);

237 
hdr
 = (
__±r_t
Ë
	`memÆign
 (
Æignmít
, 
size
);

238 
__memÆign_hook
 = 
å_memÆignhook
;

239 
__mÆloc_hook
 = 
å_mÆlochook
;

241 
	`å_whîe
 (
ˇŒî
, 
öfo
);

243 
	`Ârötf
 (
mÆl°ªam
, "+ %∞%#lx\n", 
hdr
, (Ë
size
);

245 
	`__libc_lock_u∆ock
 (
lock
);

247 i‡(
hdr
 =
mÆlw©ch
)

248 
	`å_bªak
 ();

250  
hdr
;

251 
	}
}

254 #ifde‡
_LIBC


259 
__libc_‰ìªs_‚_£˘i⁄


260 
	$ªÀa£_libc_mem
 ()

263 i‡(
mÆl°ªam
 !
NULL
)

264 
	`__libc_‰ìªs
 ();

265 
	}
}

275 
	$måa˚
 ()

277 #ifde‡
_LIBC


278 
added_©exô_h™dÀr
;

280 *
mÆlfûe
;

283 i‡(
mÆl°ªam
 !
NULL
)

286 #ifde‡
_LIBC


290 
mÆlfûe
 = 
	`__libc_£cuª_gëív
 (
mÆÀnv
);

292 
mÆlfûe
 = 
	`gëív
 (
mÆÀnv
);

294 i‡(
mÆlfûe
 !
NULL
 || 
mÆlw©ch
 != NULL)

296 *
mtb
 = 
	`mÆloc
 (
TRACE_BUFFER_SIZE
);

297 i‡(
mtb
 =
NULL
)

300 
mÆl°ªam
 = 
	`f›í
 (
mÆlfûe
 !
NULL
 ? mallfile : "/dev/null", "wce");

301 i‡(
mÆl°ªam
 !
NULL
)

303 #i‚de‡
__ASSUME_O_CLOEXEC


305 
Êags
 = 
	`__f˙é
 (
	`fûío
 (
mÆl°ªam
), 
F_GETFD
, 0);

306 i‡(
Êags
 >= 0)

308 
Êags
 |
FD_CLOEXEC
;

309 
	`__f˙é
 (
	`fûío
 (
mÆl°ªam
), 
F_SETFD
, 
Êags
);

313 
mÆloc_åa˚_buf„r
 = 
mtb
;

314 
	`£tvbuf
 (
mÆl°ªam
, 
mÆloc_åa˚_buf„r
, 
_IOFBF
, 
TRACE_BUFFER_SIZE
);

315 
	`Ârötf
 (
mÆl°ªam
, "= Start\n");

316 
å_ﬁd_‰ì_hook
 = 
__‰ì_hook
;

317 
__‰ì_hook
 = 
å_‰ìhook
;

318 
å_ﬁd_mÆloc_hook
 = 
__mÆloc_hook
;

319 
__mÆloc_hook
 = 
å_mÆlochook
;

320 
å_ﬁd_ªÆloc_hook
 = 
__ªÆloc_hook
;

321 
__ªÆloc_hook
 = 
å_ªÆlochook
;

322 
å_ﬁd_memÆign_hook
 = 
__memÆign_hook
;

323 
__memÆign_hook
 = 
å_memÆignhook
;

324 #ifde‡
_LIBC


325 i‡(!
added_©exô_h™dÀr
)

327 *
__dso_h™dÀ
 
	`__©åibuã__
 ((
__wók__
));

328 
added_©exô_h™dÀr
 = 1;

329 
	`__cxa_©exô
 (((*)(*))
ªÀa£_libc_mem
, 
NULL
,

330 &
__dso_h™dÀ
 ? __dso_h™dÀ : 
NULL
);

335 
	`‰ì
 (
mtb
);

337 
	}
}

340 
	$mu¡ø˚
 ()

342 i‡(
mÆl°ªam
 =
NULL
)

348 
FILE
 *
f
 = 
mÆl°ªam
;

349 
mÆl°ªam
 = 
NULL
;

350 
__‰ì_hook
 = 
å_ﬁd_‰ì_hook
;

351 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

352 
__ªÆloc_hook
 = 
å_ﬁd_ªÆloc_hook
;

353 
__memÆign_hook
 = 
å_ﬁd_memÆign_hook
;

355 
	`Ârötf
 (
f
, "= End\n");

356 
	`f˛o£
 (
f
);

357 
	}
}

	@obstack.c

20 #ifde‡
_LIBC


21 
	~<ob°ack.h
>

22 
	~<shlib-com∑t.h
>

24 
	~<c⁄fig.h
>

25 
	~"ob°ack.h
"

31 
	#OBSTACK_INTERFACE_VERSION
 1

	)

42 
	~<°dio.h
>

43 #i‡!
deföed
 
_LIBC
 && deföed 
__GNU_LIBRARY__
 && __GNU_LIBRARY__ > 1

44 
	~<gnu-vîsi⁄s.h
>

45 #i‡
_GNU_OBSTACK_INTERFACE_VERSION
 =
OBSTACK_INTERFACE_VERSION


46 
	#ELIDE_CODE


	)

50 
	~<°ddef.h
>

52 #i‚de‡
ELIDE_CODE


55 
	~<°döt.h
>

58 
	ufo‹ound


60 
uötmax_t
 
	mi
;

61 
	md
;

62 *
	mp
;

64 
	sfoﬂlign


66 
	mc
;

67 
fo‹ound
 
	mu
;

74 
	mDEFAULT_ALIGNMENT
 = 
off£tof
 (
foﬂlign
, 
u
),

75 
	mDEFAULT_ROUNDING
 =  (
fo‹ound
)

82 #i‚de‡
COPYING_UNIT


83 
	#COPYING_UNIT
 

	)

93 
_N‹ëu∫
 
¥öt_™d_ab‹t
 ();

94 (*
ob°ack_Æloc_Áûed_h™dÀr
Ë(Ë
¥öt_™d_ab‹t
;

97 
	~<°dlib.h
>

98 #ifde‡
_LIBC


99 
ob°ack_exô_Áûuª
 = 
EXIT_FAILURE
;

101 
	~"exôÁû.h
"

102 
	#ob°ack_exô_Áûuª
 
exô_Áûuª


	)

105 #ifde‡
_LIBC


106 #i‡
	`SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_3_4
)

110 
ob°ack
 *
_ob°ack_com∑t
 = 0;

111 
	`com∑t_symbﬁ
 (
libc
, 
_ob°ack_com∑t
, 
_ob°ack
, 
GLIBC_2_0
);

121 
	#CALL_CHUNKFUN
(
h
, 
size
) \

122 (((
h
)->
u£_exåa_¨g
) \

123 ? (*(
h
)->
chunkfun
)((h)->
exåa_¨g
, (
size
)) \

124 : (*(
_ob°ack_chunk
 *(*)())(
h
)->
chunkfun
)((
size
)))

	)

126 
	#CALL_FREEFUN
(
h
, 
ﬁd_chunk
) \

128 i‡((
h
)->
u£_exåa_¨g
) \

129 (*(
h
)->
‰ìfun
)((h)->
exåa_¨g
, (
ﬁd_chunk
)); \

131 (*((*)(*))(
h
)->
‰ìfun
)((
ﬁd_chunk
)); \

132 
	}
} 0)

	)

144 
	$_ob°ack_begö
 (
ob°ack
 *
h
,

145 
size
, 
Æignmít
,

146 *(*
chunkfun
) (),

147 (*
‰ìfun
) (*))

149 
_ob°ack_chunk
 *
chunk
;

151 i‡(
Æignmít
 == 0)

152 
Æignmít
 = 
DEFAULT_ALIGNMENT
;

153 i‡(
size
 == 0)

164 
exåa
 = ((((12 + 
DEFAULT_ROUNDING
 - 1) & ~(DEFAULT_ROUNDING - 1))

165 + 4 + 
DEFAULT_ROUNDING
 - 1)

166 & ~(
DEFAULT_ROUNDING
 - 1));

167 
size
 = 4096 - 
exåa
;

170 
h
->
chunkfun
 = (
_ob°ack_chunk
 * (*) (*, )) chunkfun;

171 
h
->
‰ìfun
 = ((*Ë(*, 
_ob°ack_chunk
 *)) freefun;

172 
h
->
chunk_size
 = 
size
;

173 
h
->
Æignmít_mask
 = 
Æignmít
 - 1;

174 
h
->
u£_exåa_¨g
 = 0;

176 
chunk
 = 
h
->chunk = 
	`CALL_CHUNKFUN
 (h, h->
chunk_size
);

177 i‡(!
chunk
)

178 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

179 
h
->
√xt_‰ì
 = h->
obje˘_ba£
 = 
	`__PTR_ALIGN
 ((*Ë
chunk
, chunk->
c⁄ã¡s
,

180 
Æignmít
 - 1);

181 
h
->
chunk_limô
 = 
chunk
->
limô


182 (*Ë
chunk
 + 
h
->
chunk_size
;

183 
chunk
->
¥ev
 = 0;

185 
h
->
maybe_em±y_obje˘
 = 0;

186 
h
->
Æloc_Áûed
 = 0;

188 
	}
}

191 
	$_ob°ack_begö_1
 (
ob°ack
 *
h
, 
size
, 
Æignmít
,

192 *(*
chunkfun
) (*, ),

193 (*
‰ìfun
) (*, *),

194 *
¨g
)

196 
_ob°ack_chunk
 *
chunk
;

198 i‡(
Æignmít
 == 0)

199 
Æignmít
 = 
DEFAULT_ALIGNMENT
;

200 i‡(
size
 == 0)

211 
exåa
 = ((((12 + 
DEFAULT_ROUNDING
 - 1) & ~(DEFAULT_ROUNDING - 1))

212 + 4 + 
DEFAULT_ROUNDING
 - 1)

213 & ~(
DEFAULT_ROUNDING
 - 1));

214 
size
 = 4096 - 
exåa
;

217 
h
->
chunkfun
 = (
_ob°ack_chunk
 * (*)(*,)) chunkfun;

218 
h
->
‰ìfun
 = ((*Ë(*, 
_ob°ack_chunk
 *)) freefun;

219 
h
->
chunk_size
 = 
size
;

220 
h
->
Æignmít_mask
 = 
Æignmít
 - 1;

221 
h
->
exåa_¨g
 = 
¨g
;

222 
h
->
u£_exåa_¨g
 = 1;

224 
chunk
 = 
h
->chunk = 
	`CALL_CHUNKFUN
 (h, h->
chunk_size
);

225 i‡(!
chunk
)

226 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

227 
h
->
√xt_‰ì
 = h->
obje˘_ba£
 = 
	`__PTR_ALIGN
 ((*Ë
chunk
, chunk->
c⁄ã¡s
,

228 
Æignmít
 - 1);

229 
h
->
chunk_limô
 = 
chunk
->
limô


230 (*Ë
chunk
 + 
h
->
chunk_size
;

231 
chunk
->
¥ev
 = 0;

233 
h
->
maybe_em±y_obje˘
 = 0;

234 
h
->
Æloc_Áûed
 = 0;

236 
	}
}

245 
	$_ob°ack_√wchunk
 (
ob°ack
 *
h
, 
Àngth
)

247 
_ob°ack_chunk
 *
ﬁd_chunk
 = 
h
->
chunk
;

248 
_ob°ack_chunk
 *
√w_chunk
;

249 
√w_size
;

250 
obj_size
 = 
h
->
√xt_‰ì
 - h->
obje˘_ba£
;

251 
i
;

252 
Æªady
;

253 *
obje˘_ba£
;

256 
√w_size
 = (
obj_size
 + 
Àngth
Ë+ (obj_sizê>> 3Ë+ 
h
->
Æignmít_mask
 + 100;

257 i‡(
√w_size
 < 
h
->
chunk_size
)

258 
√w_size
 = 
h
->
chunk_size
;

261 
√w_chunk
 = 
	`CALL_CHUNKFUN
 (
h
, 
√w_size
);

262 i‡(!
√w_chunk
)

263 (*
ob°ack_Æloc_Áûed_h™dÀr
)();

264 
h
->
chunk
 = 
√w_chunk
;

265 
√w_chunk
->
¥ev
 = 
ﬁd_chunk
;

266 
√w_chunk
->
limô
 = 
h
->
chunk_limô
 = (*Ë√w_chunk + 
√w_size
;

269 
obje˘_ba£
 =

270 
	`__PTR_ALIGN
 ((*Ë
√w_chunk
,Çew_chunk->
c⁄ã¡s
, 
h
->
Æignmít_mask
);

275 i‡(
h
->
Æignmít_mask
 + 1 >
DEFAULT_ALIGNMENT
)

277 
i
 = 
obj_size
 /  (
COPYING_UNIT
) - 1;

278 
i
 >= 0; i--)

279 ((
COPYING_UNIT
 *Ë
obje˘_ba£
)[
i
]

280 ((
COPYING_UNIT
 *Ë
h
->
obje˘_ba£
)[
i
];

284 
Æªady
 = 
obj_size
 /  (
COPYING_UNIT
) *  (COPYING_UNIT);

287 
Æªady
 = 0;

289 
i
 = 
Æªady
; i < 
obj_size
; i++)

290 
obje˘_ba£
[
i
] = 
h
->object_base[i];

295 i‡(!
h
->
maybe_em±y_obje˘


296 && (
h
->
obje˘_ba£


297 =
	`__PTR_ALIGN
 ((*Ë
ﬁd_chunk
, old_chunk->
c⁄ã¡s
,

298 
h
->
Æignmít_mask
)))

300 
√w_chunk
->
¥ev
 = 
ﬁd_chunk
->prev;

301 
	`CALL_FREEFUN
 (
h
, 
ﬁd_chunk
);

304 
h
->
obje˘_ba£
 = object_base;

305 
h
->
√xt_‰ì
 = h->
obje˘_ba£
 + 
obj_size
;

307 
h
->
maybe_em±y_obje˘
 = 0;

308 
	}
}

309 #ifde‡
_LIBC


310 
	$libc_hiddí_def
 (
_ob°ack_√wchunk
)

319 
	$_ob°ack_Æloˇãd_p
 (
ob°ack
 *
h
, *
obj
Ë
__©åibuã_puª__
;

322 
	$_ob°ack_Æloˇãd_p
 (
ob°ack
 *
h
, *
obj
)

324 
_ob°ack_chunk
 *
Õ
;

325 
_ob°ack_chunk
 *
∂p
;

327 
Õ
 = (
h
)->
chunk
;

331 
Õ
 !0 && ((*ËÕ >
obj
 || (*Ë÷p)->
limô
 < obj))

333 
∂p
 = 
Õ
->
¥ev
;

334 
Õ
 = 
∂p
;

336  
Õ
 != 0;

337 
	}
}

342 #unde‡
ob°ack_‰ì


345 
	$__ob°ack_‰ì
 (
ob°ack
 *
h
, *
obj
)

347 
_ob°ack_chunk
 *
Õ
;

348 
_ob°ack_chunk
 *
∂p
;

350 
Õ
 = 
h
->
chunk
;

354 
Õ
 !0 && ((*ËÕ >
obj
 || (*Ë÷p)->
limô
 < obj))

356 
∂p
 = 
Õ
->
¥ev
;

357 
	`CALL_FREEFUN
 (
h
, 
Õ
);

358 
Õ
 = 
∂p
;

361 
h
->
maybe_em±y_obje˘
 = 1;

363 i‡(
Õ
)

365 
h
->
obje˘_ba£
 = h->
√xt_‰ì
 = (*Ë(
obj
);

366 
h
->
chunk_limô
 = 
Õ
->
limô
;

367 
h
->
chunk
 = 
Õ
;

369 i‡(
obj
 != 0)

371 
	`ab‹t
 ();

372 
	}
}

374 #ifde‡
_LIBC


377 
	$°r⁄g_Æüs
 (
ob°ack_‰ì
, 
_ob°ack_‰ì
)

381 
	$_ob°ack_mem‹y_u£d
 (
ob°ack
 *
h
)

383 
_ob°ack_chunk
 *
Õ
;

384 
nbyãs
 = 0;

386 
Õ
 = 
h
->
chunk
;Ü∞!0;Ü∞Õ->
¥ev
)

388 
nbyãs
 +
Õ
->
limô
 - (*)Üp;

390  
nbyãs
;

391 
	}
}

394 #ifde‡
_LIBC


395 
	~<liböé.h
>

397 
	~"gëãxt.h
"

399 #i‚de‡
_


400 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

403 #ifde‡
_LIBC


404 
	~<libio/iﬁibio.h
>

407 
_N‹ëu∫
 

408 
	$¥öt_™d_ab‹t
 ()

415 #ifde‡
_LIBC


416 (Ë
	`__fx¥ötf
 (
NULL
, "%s\n", 
	`_
("memoryÉxhausted"));

418 
	`Ârötf
 (
°dîr
, "%s\n", 
	`_
("memoryÉxhausted"));

420 
	`exô
 (
ob°ack_exô_Áûuª
);

421 
	}
}

	@obstack.h

104 #i‚de‡
_OBSTACK_H


105 
	#_OBSTACK_H
 1

	)

112 #ifde‡
__PTRDIFF_TYPE__


113 
	#PTR_INT_TYPE
 
__PTRDIFF_TYPE__


	)

115 
	~<°ddef.h
>

116 
	#PTR_INT_TYPE
 
±rdiff_t


	)

123 
	#__BPTR_ALIGN
(
B
, 
P
, 
A
Ë((BË+ (((PË- (BË+ (A)Ë& ~(A)))

	)

132 
	#__PTR_ALIGN
(
B
, 
P
, 
A
) \

133 
	`__BPTR_ALIGN
 ( (
PTR_INT_TYPE
Ë<  (*Ë? (
B
) : (*) 0, \

134 
P
, 
A
)

	)

136 
	~<°rög.h
>

138 #i‚de‡
__©åibuã_puª__


139 
	#__©åibuã_puª__
 
_GL_ATTRIBUTE_PURE


	)

142 #ifde‡
__˝lu•lus


146 
	s_ob°ack_chunk


148 *
limô
;

149 
_ob°ack_chunk
 *
¥ev
;

150 
c⁄ã¡s
[4];

153 
	sob°ack


155 
chunk_size
;

156 
_ob°ack_chunk
 *
chunk
;

157 *
obje˘_ba£
;

158 *
√xt_‰ì
;

159 *
chunk_limô
;

162 
PTR_INT_TYPE
 
ãmpöt
;

163 *
ãmµå
;

164 } 
ãmp
;

165 
Æignmít_mask
;

169 
_ob°ack_chunk
 *(*
chunkfun
) (*, );

170 (*
‰ìfun
Ë(*, 
_ob°ack_chunk
 *);

171 *
exåa_¨g
;

172 
u£_exåa_¨g
 : 1;

173 
maybe_em±y_obje˘
 : 1;

177 
Æloc_Áûed
 : 1;

184 
_ob°ack_√wchunk
 (
ob°ack
 *, );

185 
_ob°ack_begö
 (
ob°ack
 *, , ,

187 
_ob°ack_begö_1
 (
ob°ack
 *, , ,

190 
_ob°ack_mem‹y_u£d
 (
ob°ack
 *Ë
__©åibuã_puª__
;

194 #i‚de‡
__ob°ack_‰ì


195 
	#__ob°ack_‰ì
 
ob°ack_‰ì


	)

197 
__ob°ack_‰ì
 (
ob°ack
 *, *);

204 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

207 
ob°ack_exô_Áûuª
;

213 
	#ob°ack_ba£
(
h
Ë((*Ë(h)->
obje˘_ba£
)

	)

217 
	#ob°ack_chunk_size
(
h
Ë((h)->
chunk_size
)

	)

221 
	#ob°ack_√xt_‰ì
(
h
Ë((h)->
√xt_‰ì
)

	)

225 
	#ob°ack_Æignmít_mask
(
h
Ë((h)->
Æignmít_mask
)

	)

228 
	#ob°ack_öô
(
h
) \

229 
	`_ob°ack_begö
 ((
h
), 0, 0, \

230 (*(*)())
ob°ack_chunk_Æloc
, \

231 ((*)(*))
ob°ack_chunk_‰ì
)

	)

233 
	#ob°ack_begö
(
h
, 
size
) \

234 
	`_ob°ack_begö
 ((
h
), (
size
), 0, \

235 (*(*)())
ob°ack_chunk_Æloc
, \

236 ((*)(*))
ob°ack_chunk_‰ì
)

	)

238 
	#ob°ack_•ecify_Æloˇti⁄
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
) \

239 
	`_ob°ack_begö
 ((
h
), (
size
), (
Æignmít
), \

240 (*(*)())(
chunkfun
), \

241 ((*)(*))(
‰ìfun
))

	)

243 
	#ob°ack_•ecify_Æloˇti⁄_wôh_¨g
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
, 
¨g
) \

244 
	`_ob°ack_begö_1
 ((
h
), (
size
), (
Æignmít
), \

245 (*(*)(*, ))(
chunkfun
), \

246 ((*)(*, *))(
‰ìfun
), (
¨g
))

	)

248 
	#ob°ack_chunkfun
(
h
, 
√wchunkfun
) \

249 ((
h
)->
chunkfun
 = (
_ob°ack_chunk
 *(*)(*, ))(
√wchunkfun
))

	)

251 
	#ob°ack_‰ìfun
(
h
, 
√w‰ìfun
) \

252 ((
h
)->
‰ìfun
 = ((*)(*, 
_ob°ack_chunk
 *))(
√w‰ìfun
))

	)

254 
	#ob°ack_1grow_Á°
(
h
, 
ach¨
Ë(*((h)->
√xt_‰ì
)++ = (ach¨))

	)

256 
	#ob°ack_bœnk_Á°
(
h
, 
n
Ë((h)->
√xt_‰ì
 +“))

	)

258 
	#ob°ack_mem‹y_u£d
(
h
Ë
	`_ob°ack_mem‹y_u£d
 (h)

	)

260 #i‡
deföed
 
__GNUC__


261 #i‡! (2 < 
__GNUC__
 + (8 <
__GNUC_MINOR__
))

262 
	#__exãnsi⁄__


	)

270 
	#ob°ack_obje˘_size
(
OBSTACK
) \

271 
__exãnsi⁄__
 \

272 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

273 (Ë(
__o
->
√xt_‰ì
 - __o->
obje˘_ba£
); })

	)

275 
	#ob°ack_room
(
OBSTACK
) \

276 
__exãnsi⁄__
 \

277 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

278 (Ë(
__o
->
chunk_limô
 - __o->
√xt_‰ì
); })

	)

280 
	#ob°ack_make_room
(
OBSTACK
, 
Àngth
) \

281 
__exãnsi⁄__
 \

282 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

283 
__Àn
 = (
Àngth
); \

284 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

285 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

286 (Ë0; })

	)

288 
	#ob°ack_em±y_p
(
OBSTACK
) \

289 
__exãnsi⁄__
 \

290 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

291 (
__o
->
chunk
->
¥ev
 == 0 \

292 && 
__o
->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë__o->
chunk
, \

293 
__o
->
chunk
->
c⁄ã¡s
, \

294 
__o
->
Æignmít_mask
)); })

	)

296 
	#ob°ack_grow
(
OBSTACK
, 
whîe
, 
Àngth
) \

297 
__exãnsi⁄__
 \

298 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

299 
__Àn
 = (
Àngth
); \

300 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 > __o->
chunk_limô
) \

301 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

302 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

303 
__o
->
√xt_‰ì
 +
__Àn
; \

304 (Ë0; })

	)

306 
	#ob°ack_grow0
(
OBSTACK
, 
whîe
, 
Àngth
) \

307 
__exãnsi⁄__
 \

308 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

309 
__Àn
 = (
Àngth
); \

310 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 + 1 > __o->
chunk_limô
) \

311 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
 + 1); \

312 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

313 
__o
->
√xt_‰ì
 +
__Àn
; \

314 *(
__o
->
√xt_‰ì
)++ = 0; \

315 (Ë0; })

	)

317 
	#ob°ack_1grow
(
OBSTACK
, 
d©um
) \

318 
__exãnsi⁄__
 \

319 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

320 i‡(
__o
->
√xt_‰ì
 + 1 > __o->
chunk_limô
) \

321 
	`_ob°ack_√wchunk
 (
__o
, 1); \

322 
	`ob°ack_1grow_Á°
 (
__o
, 
d©um
); \

323 (Ë0; })

	)

329 
	#ob°ack_±r_grow
(
OBSTACK
, 
d©um
) \

330 
__exãnsi⁄__
 \

331 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

332 i‡(
__o
->
√xt_‰ì
 +  (*Ë> __o->
chunk_limô
) \

333 
	`_ob°ack_√wchunk
 (
__o
,  (*)); \

334 
	`ob°ack_±r_grow_Á°
 (
__o
, 
d©um
); }) \

335 

	)

336 
	#ob°ack_öt_grow
(
OBSTACK
, 
d©um
) \

337 
__exãnsi⁄__
 \

338 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

339 i‡(
__o
->
√xt_‰ì
 +  (Ë> __o->
chunk_limô
) \

340 
	`_ob°ack_√wchunk
 (
__o
,  ()); \

341 
	`ob°ack_öt_grow_Á°
 (
__o
, 
d©um
); })

	)

343 
	#ob°ack_±r_grow_Á°
(
OBSTACK
, 
≠å
) \

344 
__exãnsi⁄__
 \

345 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

346 *
__p1
 = 
__o1
->
√xt_‰ì
; \

347 *(c⁄° **Ë
__p1
 = (
≠å
); \

348 
__o1
->
√xt_‰ì
 +=  (const *); \

349 (Ë0; })

	)

351 
	#ob°ack_öt_grow_Á°
(
OBSTACK
, 
aöt
) \

352 
__exãnsi⁄__
 \

353 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

354 *
__p1
 = 
__o1
->
√xt_‰ì
; \

355 *(*Ë
__p1
 = (
aöt
); \

356 
__o1
->
√xt_‰ì
 +=  (); \

357 (Ë0; })

	)

359 
	#ob°ack_bœnk
(
OBSTACK
, 
Àngth
) \

360 
__exãnsi⁄__
 \

361 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

362 
__Àn
 = (
Àngth
); \

363 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

364 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

365 
	`ob°ack_bœnk_Á°
 (
__o
, 
__Àn
); \

366 (Ë0; })

	)

368 
	#ob°ack_Æloc
(
OBSTACK
, 
Àngth
) \

369 
__exãnsi⁄__
 \

370 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

371 
	`ob°ack_bœnk
 (
__h
, (
Àngth
)); \

372 
	`ob°ack_föish
 (
__h
); })

	)

374 
	#ob°ack_c›y
(
OBSTACK
, 
whîe
, 
Àngth
) \

375 
__exãnsi⁄__
 \

376 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

377 
	`ob°ack_grow
 (
__h
, (
whîe
), (
Àngth
)); \

378 
	`ob°ack_föish
 (
__h
); })

	)

380 
	#ob°ack_c›y0
(
OBSTACK
, 
whîe
, 
Àngth
) \

381 
__exãnsi⁄__
 \

382 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

383 
	`ob°ack_grow0
 (
__h
, (
whîe
), (
Àngth
)); \

384 
	`ob°ack_föish
 (
__h
); })

	)

388 
	#ob°ack_föish
(
OBSTACK
) \

389 
__exãnsi⁄__
 \

390 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

391 *
__vÆue
 = (*Ë
__o1
->
obje˘_ba£
; \

392 i‡(
__o1
->
√xt_‰ì
 =
__vÆue
) \

393 
__o1
->
maybe_em±y_obje˘
 = 1; \

394 
__o1
->
√xt_‰ì
 \

395 
	`__PTR_ALIGN
 (
__o1
->
obje˘_ba£
, __o1->
√xt_‰ì
, \

396 
__o1
->
Æignmít_mask
); \

397 i‡(
__o1
->
√xt_‰ì
 - (*Ë__o1->
chunk
 \

398 > 
__o1
->
chunk_limô
 - (*Ë__o1->
chunk
) \

399 
__o1
->
√xt_‰ì
 = __o1->
chunk_limô
; \

400 
__o1
->
obje˘_ba£
 = __o1->
√xt_‰ì
; \

401 
__vÆue
; })

	)

403 
	#ob°ack_‰ì
(
OBSTACK
, 
OBJ
) \

404 
__exãnsi⁄__
 \

405 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

406 *
__obj
 = (
OBJ
); \

407 i‡(
__obj
 > (*Ë
__o
->
chunk
 && __obj < (*Ë__o->
chunk_limô
) \

408 
__o
->
√xt_‰ì
 = __o->
obje˘_ba£
 = (*Ë
__obj
; \

409 (
__ob°ack_‰ì
Ë(
__o
, 
__obj
); })

	)

413 
	#ob°ack_obje˘_size
(
h
) \

414 (Ë((
h
)->
√xt_‰ì
 - (h)->
obje˘_ba£
)

	)

416 
	#ob°ack_room
(
h
) \

417 (Ë((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
)

	)

419 
	#ob°ack_em±y_p
(
h
) \

420 ((
h
)->
chunk
->
¥ev
 == 0 \

421 && (
h
)->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë(h)->
chunk
, \

422 (
h
)->
chunk
->
c⁄ã¡s
, \

423 (
h
)->
Æignmít_mask
))

	)

431 
	#ob°ack_make_room
(
h
, 
Àngth
) \

432 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

433 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

434 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0Ë: 0))

	)

436 
	#ob°ack_grow
(
h
, 
whîe
, 
Àngth
) \

437 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

438 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

439 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

440 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

441 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
)

	)

443 
	#ob°ack_grow0
(
h
, 
whîe
, 
Àngth
) \

444 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

445 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 + 1 > (h)->
chunk_limô
) \

446 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
 + 1), 0) : 0), \

447 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

448 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
, \

449 *((
h
)->
√xt_‰ì
)++ = 0)

	)

451 
	#ob°ack_1grow
(
h
, 
d©um
) \

452 ((((
h
)->
√xt_‰ì
 + 1 > (h)->
chunk_limô
) \

453 ? (
	`_ob°ack_√wchunk
 ((
h
), 1), 0) : 0), \

454 
	`ob°ack_1grow_Á°
 (
h
, 
d©um
))

	)

456 
	#ob°ack_±r_grow
(
h
, 
d©um
) \

457 ((((
h
)->
√xt_‰ì
 +  (*Ë> (h)->
chunk_limô
) \

458 ? (
	`_ob°ack_√wchunk
 ((
h
),  (*)), 0) : 0), \

459 
	`ob°ack_±r_grow_Á°
 (
h
, 
d©um
))

	)

461 
	#ob°ack_öt_grow
(
h
, 
d©um
) \

462 ((((
h
)->
√xt_‰ì
 +  (Ë> (h)->
chunk_limô
) \

463 ? (
	`_ob°ack_√wchunk
 ((
h
),  ()), 0) : 0), \

464 
	`ob°ack_öt_grow_Á°
 (
h
, 
d©um
))

	)

466 
	#ob°ack_±r_grow_Á°
(
h
, 
≠å
) \

467 (((c⁄° **Ë((
h
)->
√xt_‰ì
 + (*)))[-1] = (
≠å
))

	)

469 
	#ob°ack_öt_grow_Á°
(
h
, 
aöt
) \

470 (((*Ë((
h
)->
√xt_‰ì
 + ()))[-1] = (
aöt
))

	)

472 
	#ob°ack_bœnk
(
h
, 
Àngth
) \

473 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

474 (((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
 < (h)->
ãmp
.
ãmpöt
) \

475 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

476 
	`ob°ack_bœnk_Á°
 (
h
, (h)->
ãmp
.
ãmpöt
))

	)

478 
	#ob°ack_Æloc
(
h
, 
Àngth
) \

479 (
	`ob°ack_bœnk
 ((
h
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

481 
	#ob°ack_c›y
(
h
, 
whîe
, 
Àngth
) \

482 (
	`ob°ack_grow
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

484 
	#ob°ack_c›y0
(
h
, 
whîe
, 
Àngth
) \

485 (
	`ob°ack_grow0
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

487 
	#ob°ack_föish
(
h
) \

488 (((
h
)->
√xt_‰ì
 =(h)->
obje˘_ba£
 \

489 ? (((
h
)->
maybe_em±y_obje˘
 = 1), 0) \

491 (
h
)->
ãmp
.
ãmµå
 = (h)->
obje˘_ba£
, \

492 (
h
)->
√xt_‰ì
 \

493 
	`__PTR_ALIGN
 ((
h
)->
obje˘_ba£
, (h)->
√xt_‰ì
, \

494 (
h
)->
Æignmít_mask
), \

495 (((
h
)->
√xt_‰ì
 - (*Ë(h)->
chunk
 \

496 > (
h
)->
chunk_limô
 - (*Ë(h)->
chunk
) \

497 ? ((
h
)->
√xt_‰ì
 = (h)->
chunk_limô
) : 0), \

498 (
h
)->
obje˘_ba£
 = (h)->
√xt_‰ì
, \

499 (
h
)->
ãmp
.
ãmµå
)

	)

501 
	#ob°ack_‰ì
(
h
, 
obj
) \

502 ((
h
)->
ãmp
.
ãmpöt
 = (*Ë(
obj
Ë- (*Ë(h)->
chunk
, \

503 ((((
h
)->
ãmp
.
ãmpöt
 > 0 \

504 && (
h
)->
ãmp
.
ãmpöt
 < (h)->
chunk_limô
 - (*Ë(h)->
chunk
)) \

505 ? (Ë((
h
)->
√xt_‰ì
 = (h)->
obje˘_ba£
 \

506 (
h
)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
) \

507 : (
__ob°ack_‰ì
Ë(
h
, (h)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
)))

	)

511 #ifde‡
__˝lu•lus


	@scratch_buffer_grow.c

19 
	~<s¸©ch_buf„r.h
>

20 
	~<î∫o.h
>

22 
boﬁ


23 
	$__libc_s¸©ch_buf„r_grow
 (
s¸©ch_buf„r
 *
buf„r
)

25 *
√w_±r
;

26 
size_t
 
√w_Àngth
 = 
buf„r
->
Àngth
 * 2;

29 
	`s¸©ch_buf„r_‰ì
 (
buf„r
);

32 i‡(
	`__glibc_likñy
 (
√w_Àngth
 >
buf„r
->
Àngth
))

33 
√w_±r
 = 
	`mÆloc
 (
√w_Àngth
);

36 
	`__£t_î∫o
 (
ENOMEM
);

37 
√w_±r
 = 
NULL
;

40 i‡(
	`__glibc_u∆ikñy
 (
√w_±r
 =
NULL
))

43 
	`s¸©ch_buf„r_öô
 (
buf„r
);

44  
Ál£
;

48 
buf„r
->
d©a
 = 
√w_±r
;

49 
buf„r
->
Àngth
 = 
√w_Àngth
;

50  
åue
;

51 
	}
}

52 
libc_hiddí_def
 (
__libc_s¸©ch_buf„r_grow
);

	@scratch_buffer_grow_preserve.c

19 
	~<s¸©ch_buf„r.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

23 
boﬁ


24 
	$__libc_s¸©ch_buf„r_grow_¥e£rve
 (
s¸©ch_buf„r
 *
buf„r
)

26 
size_t
 
√w_Àngth
 = 2 * 
buf„r
->
Àngth
;

27 *
√w_±r
;

29 i‡(
buf„r
->
d©a
 =buf„r->
__•a˚
)

33 
√w_±r
 = 
	`mÆloc
 (
√w_Àngth
);

34 i‡(
√w_±r
 =
NULL
)

35  
Ál£
;

36 
	`mem˝y
 (
√w_±r
, 
buf„r
->
__•a˚
, buf„r->
Àngth
);

41 i‡(
	`__glibc_likñy
 (
√w_Àngth
 >
buf„r
->
Àngth
))

42 
√w_±r
 = 
	`ªÆloc
 (
buf„r
->
d©a
, 
√w_Àngth
);

45 
	`__£t_î∫o
 (
ENOMEM
);

46 
√w_±r
 = 
NULL
;

49 i‡(
	`__glibc_u∆ikñy
 (
√w_±r
 =
NULL
))

52 
	`‰ì
 (
buf„r
->
d©a
);

53 
	`s¸©ch_buf„r_öô
 (
buf„r
);

54  
Ál£
;

59 
buf„r
->
d©a
 = 
√w_±r
;

60 
buf„r
->
Àngth
 = 
√w_Àngth
;

61  
åue
;

62 
	}
}

63 
libc_hiddí_def
 (
__libc_s¸©ch_buf„r_grow_¥e£rve
);

	@scratch_buffer_set_array_size.c

19 
	~<s¸©ch_buf„r.h
>

20 
	~<î∫o.h
>

21 
	~<limôs.h
>

23 
boﬁ


24 
	$__libc_s¸©ch_buf„r_£t_¨øy_size
 (
s¸©ch_buf„r
 *
buf„r
,

25 
size_t
 
√Àm
, size_à
size
)

27 
size_t
 
√w_Àngth
 = 
√Àm
 * 
size
;

30 i‡((
√Àm
 | 
size
Ë>> ( (
size_t
Ë* 
CHAR_BIT
 / 2) != 0

31 && 
√Àm
 !0 && 
size
 !
√w_Àngth
 /Çelem)

35 
	`s¸©ch_buf„r_‰ì
 (
buf„r
);

36 
	`s¸©ch_buf„r_öô
 (
buf„r
);

37 
	`__£t_î∫o
 (
ENOMEM
);

38  
Ál£
;

41 i‡(
√w_Àngth
 <
buf„r
->
Àngth
)

42  
åue
;

45 
	`s¸©ch_buf„r_‰ì
 (
buf„r
);

47 *
√w_±r
 = 
	`mÆloc
 (
√w_Àngth
);

48 i‡(
√w_±r
 =
NULL
)

51 
	`s¸©ch_buf„r_öô
 (
buf„r
);

52  
Ál£
;

56 
buf„r
->
d©a
 = 
√w_±r
;

57 
buf„r
->
Àngth
 = 
√w_Àngth
;

58  
åue
;

59 
	}
}

60 
libc_hiddí_def
 (
__libc_s¸©ch_buf„r_£t_¨øy_size
);

	@set-freeres.c

18 
	~<©omic.h
>

19 
	~<°dlib.h
>

20 
	~<£t-hooks.h
>

21 
	~<libc-öã∫Æ.h
>

23 
	~"../libio/libioP.h
"

25 
DEFINE_HOOK
 (
__libc_sub‰ìªs
, ());

27 
symbﬁ_£t_deföe
 (
__libc_‰ìªs_±rs
);

29 
__libc_‰ìªs_‚_£˘i⁄


30 
	$__libc_‰ìªs
 ()

34 
Æªady_ˇŒed
;

36 i‡(!
	`©omic_com∑ª_™d_exch™ge_boﬁ_acq
 (&
Æªady_ˇŒed
, 1, 0))

38 *c⁄° *
p
;

40 
	`_IO_˛ónup
 ();

42 
	`RUN_HOOK
 (
__libc_sub‰ìªs
, ());

44 
p
 = 
	`symbﬁ_£t_fú°_ñemít
 (
__libc_‰ìªs_±rs
);

45 !
	`symbﬁ_£t_íd_p
 (
__libc_‰ìªs_±rs
, 
p
); ++p)

46 
	`‰ì
 (*
p
);

48 
	}
}

49 
libc_hiddí_def
 (
__libc_‰ìªs
)

	@thread-freeres.c

19 
	~<°dlib.h
>

20 
	~<libc-öã∫Æ.h
>

21 
	~<£t-hooks.h
>

23 #ifde‡
_LIBC_REENTRANT


24 
DEFINE_HOOK
 (
__libc_thªad_sub‰ìªs
, ());

26 
__©åibuã__
 ((
£˘i⁄
 ("__libc_thread_freeres_fn")))

27 
	$__libc_thªad_‰ìªs
 ()

29 
	`RUN_HOOK
 (
__libc_thªad_sub‰ìªs
, ());

30 
	}
}

	@tst-calloc.c

19 
	~<î∫o.h
>

20 
	~<îr‹.h
>

21 
	~<limôs.h
>

22 
	~<mÆloc.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

28 
	#N
 50000

	)

32 
	$fixed_ã°
 (
size
)

34 *
±rs
[
N
];

35 
i
;

37 
i
 = 0; i < 
N
; ++i)

39 
j
;

41 
±rs
[
i
] = (*Ë
	`ˇŒoc
 (1, 
size
);

43 i‡(
±rs
[
i
] =
NULL
)

46 
j
 = 0; j < 
size
; ++j)

48 i‡(
±rs
[
i
][
j
] != '\0')

49 
	`îr‹
 (
EXIT_FAILURE
, 0,

51 
size
, 
i
, 
j
);

52 
±rs
[
i
][
j
] = '\xff';

56 
i
-- > 0)

57 
	`‰ì
 (
±rs
[
i
]);

58 
	}
}

62 
	$øndom_ã°
 ()

64 *
±rs
[
N
];

65 
i
;

67 
i
 = 0; i < 
N
; ++i)

69 
j
;

70 
n
 = 1 + 
	`øndom
 () % 10;

71 
ñem
 = 1 + 
	`øndom
 () % 100;

72 
size
 = 
n
 * 
ñem
;

74 
±rs
[
i
] = (*Ë
	`ˇŒoc
 (
n
, 
ñem
);

76 i‡(
±rs
[
i
] =
NULL
)

79 
j
 = 0; j < 
size
; ++j)

81 i‡(
±rs
[
i
][
j
] != '\0')

82 
	`îr‹
 (
EXIT_FAILURE
, 0,

84 
size
, 
i
, 
j
);

85 
±rs
[
i
][
j
] = '\xff';

89 
i
-- > 0)

90 
	`‰ì
 (
±rs
[
i
]);

91 
	}
}

95 
	$nuŒ_ã°
 ()

99 
	`ˇŒoc
 (0, 0);

100 
	`ˇŒoc
 (0, 
UINT_MAX
);

101 
	`ˇŒoc
 (
UINT_MAX
, 0);

102 
	`ˇŒoc
 (0, ~((
size_t
) 0));

103 
	`ˇŒoc
 (~((
size_t
) 0), 0);

104 
	}
}

108 
	$do_ã°
 ()

113 
	`fixed_ã°
 (15);

114 
	`fixed_ã°
 (5);

115 
	`fixed_ã°
 (17);

116 
	`fixed_ã°
 (6);

117 
	`fixed_ã°
 (31);

118 
	`fixed_ã°
 (96);

120 
	`øndom_ã°
 ();

122 
	`nuŒ_ã°
 ();

125 
	}
}

127 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

128 
	~"../ã°-skñë⁄.c
"

	@tst-malloc-backtrace.c

20 
	~<°dlib.h
>

22 
	#SIZE
 4096

	)

26 
__©åibuã__
((
noölöe
))

27 
	$ˇŒ_‰ì
 (*
±r
)

29 
	`‰ì
 (
±r
);

30 *(
size_t
 *)(
±r
 -  (size_t)) = 1;

31 
	}
}

33 
do_ã°
 ();

35 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

36 
	#EXPECTED_SIGNAL
 
SIGABRT


	)

38 
	~"../ã°-skñë⁄.c
"

41 
	$do_ã°
 ()

43 *
±r1
 = 
	`mÆloc
 (
SIZE
);

44 *
±r2
 = 
	`mÆloc
 (
SIZE
);

47 
	`ign‹e_°dîr
();

49 
	`ˇŒ_‰ì
 (
±r1
);

50 
±r1
 = 
	`mÆloc
 (
SIZE
);

54  (
±r1
 =
±r2
);

55 
	}
}

	@tst-malloc-fork-deadlock.c

19 
	~<sys/waô.h
>

20 
	~<uni°d.h
>

21 
	~<î∫o.h
>

22 
	~<°dio.h
>

23 
	~<±hªad.h
>

24 
	~<°dboﬁ.h
>

25 
	~<°dlib.h
>

26 
	~<mÆloc.h
>

27 
	~<time.h
>

28 
	~<°rög.h
>

29 
	~<sig«l.h
>

31 
do_ã°
 ();

32 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

33 
	~"../ã°-skñë⁄.c
"

37 
	mf‹k_thªad_cou¡
 = 4,

40 
	mªad_thªad_cou¡
 = 8,

43 
boﬁ
 
	gãrmö©i⁄_ªque°ed
;

46 
	$f‹k_thªad_fun˘i⁄
 (*
˛osuª
)

48 !
	`__©omic_lﬂd_n
 (&
ãrmö©i⁄_ªque°ed
, 
__ATOMIC_RELAXED
))

50 
pid_t
 
pid
 = 
	`f‹k
 ();

51 i‡(
pid
 < 0)

53 
	`¥ötf
 ("error: fork: %m\n");

54 
	`ab‹t
 ();

56 i‡(
pid
 == 0)

57 
	`_exô
 (17);

59 
°©us
;

60 i‡(
	`waôpid
 (
pid
, &
°©us
, 0) < 0)

62 
	`¥ötf
 ("error: waitpid: %m\n");

63 
	`ab‹t
 ();

65 i‡(!
	`WIFEXITED
 (
°©us
Ë|| 
	`WEXITSTATUS
 (status) != 17)

67 
	`¥ötf
 ("îr‹: waôpidÑëu∫ed invÆid sètus: %d\n", 
°©us
);

68 
	`ab‹t
 ();

71  
NULL
;

72 
	}
}

74 *
	gfûe_to_ªad
;

77 
	$ªad_thªad_fun˘i⁄
 (*
˛osuª
)

79 
FILE
 *
f
 = 
	`f›í
 (
fûe_to_ªad
, "r");

80 i‡(
f
 =
NULL
)

82 
	`¥ötf
 ("îr‹: f›í (%s): %m\n", 
fûe_to_ªad
);

83 
	`ab‹t
 ();

86 !
	`__©omic_lﬂd_n
 (&
ãrmö©i⁄_ªque°ed
, 
__ATOMIC_RELAXED
))

88 
	`ªwöd
 (
f
);

89 *
löe
 = 
NULL
;

90 
size_t
 
löe_Æloˇãd
 = 0;

91 
ssize_t
 
ªt
 = 
	`gëlöe
 (&
löe
, &
löe_Æloˇãd
, 
f
);

92 i‡(
ªt
 < 0)

94 
	`¥ötf
 ("error: getline: %m\n");

95 
	`ab‹t
 ();

97 
	`‰ì
 (
löe
);

99 
	`f˛o£
 (
f
);

101  
NULL
;

102 
	}
}

105 
	$ÊushÆl_thªad_fun˘i⁄
 (*
˛osuª
)

107 !
	`__©omic_lﬂd_n
 (&
ãrmö©i⁄_ªque°ed
, 
__ATOMIC_RELAXED
))

108 i‡(
	`fÊush
 (
NULL
) != 0)

110 
	`¥ötf
 ("error: fflush (NULL): %m\n");

111 
	`ab‹t
 ();

113  
NULL
;

114 
	}
}

117 
	$¸óã_thªads
 (
±hªad_t
 *
thªads
, 
size_t
 
cou¡
, *(*
func
) (*))

119 
size_t
 
i
 = 0; i < 
cou¡
; ++i)

121 
ªt
 = 
	`±hªad_¸óã
 (
thªads
 + 
i
, 
NULL
, 
func
, NULL);

122 i‡(
ªt
 != 0)

124 
î∫o
 = 
ªt
;

125 
	`¥ötf
 ("error:Öthread_create: %m\n");

126 
	`ab‹t
 ();

129 
	}
}

132 
	$joö_thªads
 (
±hªad_t
 *
thªads
, 
size_t
 
cou¡
)

134 
size_t
 
i
 = 0; i < 
cou¡
; ++i)

136 
ªt
 = 
	`±hªad_joö
 (
thªads
[
i
], 
NULL
);

137 i‡(
ªt
 != 0)

139 
î∫o
 = 
ªt
;

140 
	`¥ötf
 ("error:Öthread_join: %m\n");

141 
	`ab‹t
 ();

144 
	}
}

150 
	$¸óã_fûe_wôh_œrge_löe
 ()

152 
fd
 = 
	`¸óã_ãmp_fûe
 ("bug19431-œrge-löe", &
fûe_to_ªad
);

153 i‡(
fd
 < 0)

155 
	`¥ötf
 ("error: create_temp_file: %m\n");

156 
	`ab‹t
 ();

158 
FILE
 *
f
 = 
	`fd›í
 (
fd
, "w+");

159 i‡(
f
 =
NULL
)

161 
	`¥ötf
 ("error: fdopen: %m\n");

162 
	`ab‹t
 ();

164 
i
 = 0; i < 50000; ++i)

165 
	`Âutc
 ('x', 
f
);

166 
	`Âutc
 ('\n', 
f
);

167 i‡(
	`„º‹
 (
f
))

169 
	`¥ötf
 ("error: fputc: %m\n");

170 
	`ab‹t
 ();

172 i‡(
	`f˛o£
 (
f
) != 0)

174 
	`¥ötf
 ("error: fclose: %m\n");

175 
	`ab‹t
 ();

177 
	}
}

180 
	$do_ã°
 ()

184 i‡(
	`mÆl›t
 (
M_ARENA_MAX
, 400) == 0)

186 
	`¥ötf
 ("error: mallopt (M_ARENA_MAX) failed\n");

191 
timeout
 = 3;

192 i‡(
timeout
 > 
TIMEOUT
)

193 
timeout
 = 
TIMEOUT
 - 1;

195 
	`¸óã_fûe_wôh_œrge_löe
 ();

197 
±hªad_t
 
f‹k_thªads
[
f‹k_thªad_cou¡
];

198 
	`¸óã_thªads
 (
f‹k_thªads
, 
f‹k_thªad_cou¡
, 
f‹k_thªad_fun˘i⁄
);

199 
±hªad_t
 
ªad_thªads
[
ªad_thªad_cou¡
];

200 
	`¸óã_thªads
 (
ªad_thªads
, 
ªad_thªad_cou¡
, 
ªad_thªad_fun˘i⁄
);

201 
±hªad_t
 
ÊushÆl_thªads
[1];

202 
	`¸óã_thªads
 (
ÊushÆl_thªads
, 1, 
ÊushÆl_thªad_fun˘i⁄
);

204 
time•ec
 
ts
 = {
timeout
, 0};

205 i‡(
	`«no¶ìp
 (&
ts
, 
NULL
))

207 
	`¥ötf
 ("error:Érror:Çanosleep: %m\n");

208 
	`ab‹t
 ();

211 
	`__©omic_°‹e_n
 (&
ãrmö©i⁄_ªque°ed
, 
åue
, 
__ATOMIC_RELAXED
);

213 
	`joö_thªads
 (
ÊushÆl_thªads
, 1);

214 
	`joö_thªads
 (
ªad_thªads
, 
ªad_thªad_cou¡
);

215 
	`joö_thªads
 (
f‹k_thªads
, 
f‹k_thªad_cou¡
);

217 
	`‰ì
 (
fûe_to_ªad
);

220 
	}
}

	@tst-malloc-thread-exit.c

28 
	~<î∫o.h
>

29 
	~<mÆloc.h
>

30 
	~<±hªad.h
>

31 
	~<°dboﬁ.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<uni°d.h
>

36 
do_ã°
 ();

38 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

39 
	~"../ã°-skñë⁄.c
"

41 
boﬁ
 
	gãrmö©i⁄_ªque°ed
;

42 
	gö√r_thªad_cou¡
 = 4;

43 
size_t
 
	gmÆloc_size
 = 32;

46 
__©åibuã__
 ((
noölöe
, 
no˛⁄e
))

47 
	$un›timized_‰ì
 (*
±r
)

49 
	`‰ì
 (
±r
);

50 
	}
}

53 
	$mÆloc_fú°_thªad
 (* 
˛osuª
)

55 
±hªad_b¨rõr_t
 *
b¨rõr
 = 
˛osuª
;

56 *
±r
 = 
	`mÆloc
 (
mÆloc_size
);

57 i‡(
±r
 =
NULL
)

59 
	`¥ötf
 ("error: malloc: %m\n");

60 
	`ab‹t
 ();

62 
ªt
 = 
	`±hªad_b¨rõr_waô
 (
b¨rõr
);

63 i‡(
ªt
 !0 &&Ñë !
PTHREAD_BARRIER_SERIAL_THREAD
)

65 
î∫o
 = 
ªt
;

66 
	`¥ötf
 ("error:Öthread_barrier_wait: %m\n");

67 
	`ab‹t
 ();

69 
	`un›timized_‰ì
 (
±r
);

70  
NULL
;

71 
	}
}

74 
	$waô_fú°_thªad
 (* 
˛osuª
)

76 
±hªad_b¨rõr_t
 *
b¨rõr
 = 
˛osuª
;

77 
ªt
 = 
	`±hªad_b¨rõr_waô
 (
b¨rõr
);

78 i‡(
ªt
 !0 &&Ñë !
PTHREAD_BARRIER_SERIAL_THREAD
)

80 
î∫o
 = 
ªt
;

81 
	`¥ötf
 ("error:Öthread_barrier_wait: %m\n");

82 
	`ab‹t
 ();

84 *
±r
 = 
	`mÆloc
 (
mÆloc_size
);

85 i‡(
±r
 =
NULL
)

87 
	`¥ötf
 ("error: malloc: %m\n");

88 
	`ab‹t
 ();

90 
	`un›timized_‰ì
 (
±r
);

91  
NULL
;

92 
	}
}

95 
	$ouãr_thªad
 (*
˛osuª
)

97 
±hªad_t
 *
thªads
 = 
	`ˇŒoc
 ( (*thªads), 
ö√r_thªad_cou¡
);

98 i‡(
thªads
 =
NULL
)

100 
	`¥ötf
 ("error: calloc: %m\n");

101 
	`ab‹t
 ();

104 !
	`__©omic_lﬂd_n
 (&
ãrmö©i⁄_ªque°ed
, 
__ATOMIC_RELAXED
))

106 
±hªad_b¨rõr_t
 
b¨rõr
;

107 
ªt
 = 
	`±hªad_b¨rõr_öô
 (&
b¨rõr
, 
NULL
, 
ö√r_thªad_cou¡
 + 1);

108 i‡(
ªt
 != 0)

110 
î∫o
 = 
ªt
;

111 
	`¥ötf
 ("pthread_barrier_init: %m\n");

112 
	`ab‹t
 ();

114 
i
 = 0; i < 
ö√r_thªad_cou¡
; ++i)

116 *(*
func
) (*);

117 i‡((
i
 % 2) == 0)

118 
func
 = 
mÆloc_fú°_thªad
;

120 
func
 = 
waô_fú°_thªad
;

121 
ªt
 = 
	`±hªad_¸óã
 (
thªads
 + 
i
, 
NULL
, 
func
, &
b¨rõr
);

122 i‡(
ªt
 != 0)

124 
î∫o
 = 
ªt
;

125 
	`¥ötf
 ("error:Öthread_create: %m\n");

126 
	`ab‹t
 ();

129 
ªt
 = 
	`±hªad_b¨rõr_waô
 (&
b¨rõr
);

130 i‡(
ªt
 !0 &&Ñë !
PTHREAD_BARRIER_SERIAL_THREAD
)

132 
î∫o
 = 
ªt
;

133 
	`¥ötf
 ("pthread_wait: %m\n");

134 
	`ab‹t
 ();

136 
i
 = 0; i < 
ö√r_thªad_cou¡
; ++i)

138 
ªt
 = 
	`±hªad_joö
 (
thªads
[
i
], 
NULL
);

139 i‡(
ªt
 != 0)

141 
ªt
 = 
î∫o
;

142 
	`¥ötf
 ("error:Öthread_join: %m\n");

143 
	`ab‹t
 ();

146 
ªt
 = 
	`±hªad_b¨rõr_de°roy
 (&
b¨rõr
);

147 i‡(
ªt
 != 0)

149 
ªt
 = 
î∫o
;

150 
	`¥ötf
 ("pthread_barrier_destroy: %m\n");

151 
	`ab‹t
 ();

155 
	`‰ì
 (
thªads
);

157  
NULL
;

158 
	}
}

161 
	$do_ã°
 ()

166 íum { 
ouãr_thªad_cou¡
 = 2 };

167 i‡(
	`mÆl›t
 (
M_ARENA_MAX
, 8) == 0)

169 
	`¥ötf
 ("error: mallopt (M_ARENA_MAX) failed\n");

174 
timeout
 = 3;

175 i‡(
timeout
 > 
TIMEOUT
)

176 
timeout
 = 
TIMEOUT
 - 1;

178 
±hªad_t
 *
thªads
 = 
	`ˇŒoc
 ( (*thªads), 
ouãr_thªad_cou¡
);

179 i‡(
thªads
 =
NULL
)

181 
	`¥ötf
 ("error: calloc: %m\n");

182 
	`ab‹t
 ();

185 
i
 = 0; i < 
ouãr_thªad_cou¡
; ++i)

187 
ªt
 = 
	`±hªad_¸óã
 (
thªads
 + 
i
, 
NULL
, 
ouãr_thªad
, NULL);

188 i‡(
ªt
 != 0)

190 
î∫o
 = 
ªt
;

191 
	`¥ötf
 ("error:Öthread_create: %m\n");

192 
	`ab‹t
 ();

196 
time•ec
 
ts
 = {
timeout
, 0};

197 i‡(
	`«no¶ìp
 (&
ts
, 
NULL
))

199 
	`¥ötf
 ("error:Érror:Çanosleep: %m\n");

200 
	`ab‹t
 ();

203 
	`__©omic_°‹e_n
 (&
ãrmö©i⁄_ªque°ed
, 
åue
, 
__ATOMIC_RELAXED
);

205 
i
 = 0; i < 
ouãr_thªad_cou¡
; ++i)

207 
ªt
 = 
	`±hªad_joö
 (
thªads
[
i
], 
NULL
);

208 i‡(
ªt
 != 0)

210 
î∫o
 = 
ªt
;

211 
	`¥ötf
 ("error:Öthread_join: %m\n");

212 
	`ab‹t
 ();

215 
	`‰ì
 (
thªads
);

218 
	}
}

	@tst-malloc-thread-fail.c

23 
	~<î∫o.h
>

24 
	~<mÆloc.h
>

25 
	~<±hªad.h
>

26 
	~<°dboﬁ.h
>

27 
	~<°döt.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<sys/ªsour˚.h
>

31 
	~<sys/waô.h
>

32 
	~<uni°d.h
>

36 
__©åibuã__
 ((
noölöe
, 
no˛⁄e
))

37 
	$Æloˇã_zî€d
 (
size_t
 
a
, size_à
b
)

39  
	`ˇŒoc
 (
a
, 
b
);

40 
	}
}

43 
	g∑ge_size
;

46 
size_t
 
	gÆloˇti⁄_size
;

47 
size_t
 
	gÆignmít
;

49 
	mwôh_mÆloc
,

50 
	mwôh_ªÆloc
,

51 
	mwôh_Æig√d_Æloc
,

52 
	mwôh_memÆign
,

53 
	mwôh_posix_memÆign
,

54 
	mwôh_vÆloc
,

55 
	mwôh_pvÆloc
,

56 
	mwôh_ˇŒoc
,

57 
	mœ°_Æloˇti⁄_fun˘i⁄
 = 
wôh_ˇŒoc


58 } 
	gÆloˇti⁄_fun˘i⁄
;

62 c⁄° 
boﬁ
 
	gÆignmít_£nsôive
[
œ°_Æloˇti⁄_fun˘i⁄
 + 1] =

64 [
wôh_Æig√d_Æloc
] = 
åue
,

65 [
wôh_memÆign
] = 
åue
,

66 [
wôh_posix_memÆign
] = 
åue
,

71 
	sÆloˇã_ªsu…
 {

72 *
	mpoöãr
;

73 
size_t
 
	mÆignmít
;

79 
Æloˇã_ªsu…


80 
	$Æloˇã_1
 ()

82 
Æloˇti⁄_fun˘i⁄
)

84 
wôh_mÆloc
:

85  (
Æloˇã_ªsu…
)

86 {
	`mÆloc
 (
Æloˇti⁄_size
), 
	`_Alignof
 (
max_Æign_t
)};

87 
wôh_ªÆloc
:

89 *
p
 = 
	`ªÆloc
 (
NULL
, 16);

90 *
q
;

91 i‡(
p
 =
NULL
)

92 
q
 = 
NULL
;

95 
q
 = 
	`ªÆloc
 (
p
, 
Æloˇti⁄_size
);

96 i‡(
q
 =
NULL
)

97 
	`‰ì
 (
p
);

99  (
Æloˇã_ªsu…
Ë{
q
, 
	`_Alignof
 (
max_Æign_t
)};

101 
wôh_Æig√d_Æloc
:

103 *
p
 = 
	`Æig√d_Æloc
 (
Æignmít
, 
Æloˇti⁄_size
);

104  (
Æloˇã_ªsu…
Ë{
p
, 
Æignmít
};

106 
wôh_memÆign
:

108 *
p
 = 
	`memÆign
 (
Æignmít
, 
Æloˇti⁄_size
);

109  (
Æloˇã_ªsu…
Ë{
p
, 
Æignmít
};

111 
wôh_posix_memÆign
:

113 *
p
;

114 i‡(
	`posix_memÆign
 (&
p
, 
Æignmít
, 
Æloˇti⁄_size
))

116 i‡(
î∫o
 =
ENOMEM
)

117 
p
 = 
NULL
;

120 
	`¥ötf
 ("error:Öosix_memalign (p, %zu, %zu): %m\n",

121 
Æignmít
, 
Æloˇti⁄_size
);

122 
	`ab‹t
 ();

125  (
Æloˇã_ªsu…
Ë{
p
, 
Æignmít
};

127 
wôh_vÆloc
:

129 *
p
 = 
	`vÆloc
 (
Æloˇti⁄_size
);

130  (
Æloˇã_ªsu…
Ë{
p
, 
∑ge_size
};

132 
wôh_pvÆloc
:

134 *
p
 = 
	`pvÆloc
 (
Æloˇti⁄_size
);

135  (
Æloˇã_ªsu…
Ë{
p
, 
∑ge_size
};

137 
wôh_ˇŒoc
:

139 *
p
 = 
	`Æloˇã_zî€d
 (1, 
Æloˇti⁄_size
);

141 i‡(
p
 !
NULL
)

142 
size_t
 
i
 = 0; i < 
Æloˇti⁄_size
; ++i)

143 i‡(
p
[
i
] != 0)

145 
	`¥ötf
 ("îr‹:Ç⁄-zîÿbyãáàoff£à%zu\n", 
i
);

146 
	`ab‹t
 ();

148  (
Æloˇã_ªsu…
Ë{
p
, 
	`_Alignof
 (
max_Æign_t
)};

151 
	`ab‹t
 ();

152 
	}
}

156 
	$Æloˇã
 ()

158 
Æloˇã_ªsu…
 
r
 = 
	`Æloˇã_1
 ();

159 i‡((((
uöçå_t
Ë
r
.
poöãr
Ë& (r.
Æignmít
 - 1)) != 0)

161 
	`¥ötf
 ("error:állocation function %d, size %zuÇotálignedÅo %zu\n",

162 (Ë
Æloˇti⁄_fun˘i⁄
, 
Æloˇti⁄_size
, 
r
.
Æignmít
);

163 
	`ab‹t
 ();

165  
r
.
poöãr
;

166 
	}
}

169 
±hªad_b¨rõr_t
 
	g°¨t_b¨rõr
;

170 
±hªad_b¨rõr_t
 
	gíd_b¨rõr
;

175 
	$Æloˇã_thªad
 (*
˛osuª
)

179 
ªt
 = 
	`±hªad_b¨rõr_waô
 (&
°¨t_b¨rõr
);

180 i‡(
ªt
 !0 &&Ñë !
PTHREAD_BARRIER_SERIAL_THREAD
)

182 
î∫o
 = 
ªt
;

183 
	`¥ötf
 ("error:Öthread_barrier_wait: %m\n");

184 
	`ab‹t
 ();

190 
	sli°
 {

191 
li°
 *
√xt
;

193 
li°
 *
hód
 = 
NULL
;

194 
åue
)

196 
li°
 *
e
 = 
	`Æloˇã
 ();

197 i‡(
e
 =
NULL
)

200 
e
->
√xt
 = 
hód
;

201 
hód
 = 
e
;

206 
ªt
 = 
	`±hªad_b¨rõr_waô
 (&
íd_b¨rõr
);

207 i‡(
ªt
 !0 &&Ñë !
PTHREAD_BARRIER_SERIAL_THREAD
)

209 
î∫o
 = 
ªt
;

210 
	`¥ötf
 ("error:Öthread_barrier_wait: %m\n");

211 
	`ab‹t
 ();

216 
hód
 !
NULL
)

218 
li°
 *
√xt
 = 
hód
->next;

219 
	`‰ì
 (
hód
);

220 
hód
 = 
√xt
;

223  
NULL
;

224 
	}
}

227 íum { 
	mthªad_cou¡
 = 8 };

232 
±hªad_©å_t
 
	gsmÆl_°ack
;

237 
	$run_⁄e
 ()

241 
pid_t
 
pid
 = 
	`f‹k
 ();

242 i‡(
pid
 == 0)

245 
±hªad_t
 
thªads
[
thªad_cou¡
];

247 
i
 = 0; i < 
thªad_cou¡
; ++i)

249 
ªt
 = 
	`±hªad_¸óã
 (
thªads
 + 
i
, &
smÆl_°ack
, 
Æloˇã_thªad
, 
NULL
);

250 i‡(
ªt
 != 0)

252 
î∫o
 = 
ªt
;

253 
	`¥ötf
 ("error:Öthread_create: %m\n");

254 
	`ab‹t
 ();

259 
	`Æloˇã_thªad
 (
NULL
);

261 
i
 = 0; i < 
thªad_cou¡
; ++i)

263 
ªt
 = 
	`±hªad_joö
 (
thªads
[
i
], 
NULL
);

264 i‡(
ªt
 != 0)

266 
î∫o
 = 
ªt
;

267 
	`¥ötf
 ("error:Öthread_join: %m\n");

268 
	`ab‹t
 ();

271 
	`_exô
 (0);

273 i‡(
pid
 < 0)

275 
	`¥ötf
 ("error: fork: %m\n");

276 
	`ab‹t
 ();

280 
°©us
;

281 i‡(
	`waôpid
 (
pid
, &
°©us
, 0) < 0)

283 
	`¥ötf
 ("error: waitpid: %m\n");

284 
	`ab‹t
 ();

286 i‡(
°©us
 != 0)

288 
	`¥ötf
 ("îr‹:Éxô sètu†%d from chûdÖro˚ss\n", 
°©us
);

289 
	`exô
 (1);

291 
	}
}

296 
	$run_Æloˇti⁄_fun˘i⁄s
 ()

298 
af
 = 0;á‡<
œ°_Æloˇti⁄_fun˘i⁄
; ++af)

302 i‡(
Æignmít_£nsôive
[
af
] !(
Æignmít
 != 0))

304 
Æloˇti⁄_fun˘i⁄
 = 
af
;

305 
	`run_⁄e
 ();

307 
	}
}

310 
	$do_ã°
 ()

315 i‡(
	`mÆl›t
 (
M_ARENA_MAX
, 2) == 0)

317 
	`¥ötf
 ("error: mallopt (M_ARENA_MAX) failed\n");

323 
ªt
 = 
	`sysc⁄f
 (
_SC_PAGE_SIZE
);

324 i‡(
ªt
 < 0)

326 
	`¥ötf
 ("error: sysconf (_SC_PAGE_SIZE): %m\n");

329 
∑ge_size
 = 
ªt
;

336 
æimô
 
limô
;

337 i‡(
	`gëæimô
 (
RLIMIT_AS
, &
limô
) != 0)

339 
	`¥ötf
 ("getrlimit (RLIMIT_AS) failed: %m\n");

342 
èrgë
 = 200 * 1024 * 1024;

343 i‡(
limô
.
æim_cur
 =
RLIM_INFINITY
 ||Üimô.æim_cu∏> 
èrgë
)

345 
limô
.
æim_cur
 = 
èrgë
;

346 i‡(
	`£ålimô
 (
RLIMIT_AS
, &
limô
) != 0)

348 
	`¥ötf
 ("setrlimit (RLIMIT_AS) failed: %m\n");

356 
ªt
 = 
	`±hªad_©å_öô
 (&
smÆl_°ack
);

357 i‡(
ªt
 != 0)

359 
î∫o
 = 
ªt
;

360 
	`¥ötf
 ("error:Öthread_attr_init: %m\n");

361 
	`ab‹t
 ();

363 
°ack_size
 = ((256 * 1024Ë/ 
∑ge_size
) *Öage_size;

364 i‡(
°ack_size
 < 4 * 
∑ge_size
)

365 
°ack_size
 = 8 * 
∑ge_size
;

366 
ªt
 = 
	`±hªad_©å_£t°acksize
 (&
smÆl_°ack
, 
°ack_size
);

367 i‡(
ªt
 != 0)

369 
î∫o
 = 
ªt
;

370 
	`¥ötf
 ("error:Öthread_attr_setstacksize: %m\n");

371 
	`ab‹t
 ();

378 
ªt
 = 
	`±hªad_b¨rõr_öô
 (&
°¨t_b¨rõr
, 
NULL
, 
thªad_cou¡
 + 1);

379 i‡(
ªt
 != 0)

381 
î∫o
 = 
ªt
;

382 
	`¥ötf
 ("error:Öthread_barrier_init: %m\n");

383 
	`ab‹t
 ();

386 
ªt
 = 
	`±hªad_b¨rõr_öô
 (&
íd_b¨rõr
, 
NULL
, 
thªad_cou¡
 + 1);

387 i‡(
ªt
 != 0)

389 
î∫o
 = 
ªt
;

390 
	`¥ötf
 ("error:Öthread_barrier_init: %m\n");

391 
	`ab‹t
 ();

395 
Æloˇti⁄_size
 = 144;

396 
	`run_Æloˇti⁄_fun˘i⁄s
 ();

397 
Æloˇti⁄_size
 = 
∑ge_size
;

398 
	`run_Æloˇti⁄_fun˘i⁄s
 ();

400 
Æignmít
 = 128;

401 
Æloˇti⁄_size
 = 512;

402 
	`run_Æloˇti⁄_fun˘i⁄s
 ();

404 
Æloˇti⁄_size
 = 
∑ge_size
;

405 
	`run_Æloˇti⁄_fun˘i⁄s
 ();

407 
Æloˇti⁄_size
 = 17 * 
∑ge_size
;

408 
	`run_Æloˇti⁄_fun˘i⁄s
 ();

412 
ªt
 = 
	`±hªad_b¨rõr_de°roy
 (&
íd_b¨rõr
);

413 i‡(
ªt
 != 0)

415 
î∫o
 = 
ªt
;

416 
	`¥ötf
 ("error:Öthread_barrier_destroy: %m\n");

419 
ªt
 = 
	`±hªad_b¨rõr_de°roy
 (&
°¨t_b¨rõr
);

420 i‡(
ªt
 != 0)

422 
î∫o
 = 
ªt
;

423 
	`¥ötf
 ("error:Öthread_barrier_destroy: %m\n");

426 
ªt
 = 
	`±hªad_©å_de°roy
 (&
smÆl_°ack
);

427 i‡(
ªt
 != 0)

429 
î∫o
 = 
ªt
;

430 
	`¥ötf
 ("error:Öthread_attr_destroy: %m\n");

436 
	}
}

439 
	#TIMEOUT
 30

	)

441 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

442 
	~"../ã°-skñë⁄.c
"

	@tst-malloc-usable.c

21 
	~<mÆloc.h
>

22 
	~<°rög.h
>

23 
	~<°dio.h
>

26 
	$do_ã°
 ()

28 
size_t
 
ußbÀ_size
;

29 *
p
 = 
	`mÆloc
 (7);

30 i‡(!
p
)

32 
	`¥ötf
 ("memoryállocation failed\n");

36 
ußbÀ_size
 = 
	`mÆloc_ußbÀ_size
 (
p
);

37 i‡(
ußbÀ_size
 != 7)

39 
	`¥ötf
 ("mÆloc_ußbÀ_size:Éx≥˘ed 7 buàgŸ %zu\n", 
ußbÀ_size
);

43 
	`mem£t
 (
p
, 0, 
ußbÀ_size
);

44 
	`‰ì
 (
p
);

46 
	}
}

48 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

49 
	~"../ã°-skñë⁄.c
"

	@tst-malloc.c

19 
	~<î∫o.h
>

20 
	~<mÆloc.h
>

21 
	~<°dio.h
>

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$do_ã°
 ()

35 *
p
, *
q
;

36 
ßve
;

38 
î∫o
 = 0;

40 
p
 = 
	`mÆloc
 (-1);

41 
ßve
 = 
î∫o
;

43 i‡(
p
 !
NULL
)

44 
	`mîr‹
 ("malloc (-1) succeeded.");

46 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

47 
	`mîr‹
 ("errno isÇot set correctly");

49 
p
 = 
	`mÆloc
 (10);

50 i‡(
p
 =
NULL
)

51 
	`mîr‹
 ("malloc (10) failed.");

54 
p
 = 
	`ªÆloc
 (p, 0);

55 i‡(
p
 !
NULL
)

56 
	`mîr‹
 ("realloc (p, 0) failed.");

58 
p
 = 
	`mÆloc
 (0);

59 i‡(
p
 =
NULL
)

60 
	`mîr‹
 ("malloc (0) failed.");

62 
p
 = 
	`ªÆloc
 (p, 0);

63 i‡(
p
 !
NULL
)

64 
	`mîr‹
 ("realloc (p, 0) failed.");

66 
p
 = 
	`mÆloc
 (513 * 1024);

67 i‡(
p
 =
NULL
)

68 
	`mîr‹
 ("malloc (513K) failed.");

70 
q
 = 
	`mÆloc
 (-512 * 1024);

71 i‡(
q
 !
NULL
)

72 
	`mîr‹
 ("malloc (-512K) succeeded.");

74 
	`‰ì
 (
p
);

76  
îr‹s
 != 0;

77 
	}
}

79 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

80 
	~"../ã°-skñë⁄.c
"

	@tst-mallocfork.c

3 
	~<as£π.h
>

4 
	~<î∫o.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/waô.h
>

12 
	$sig_h™dÀr
 (
signum
)

14 
pid_t
 
chûd
 = 
	`f‹k
 ();

15 i‡(
chûd
 == 0)

16 
	`exô
 (0);

17 
	`TEMP_FAILURE_RETRY
 (
	`waôpid
 (
chûd
, 
NULL
, 0));

18 
	}
}

21 
	$do_ã°
 ()

23 
pid_t
 
∑ª¡
 = 
	`gëpid
 ();

25 
siga˘i⁄
 
a˘i⁄
 = { .
ß_h™dÀr
 = 
sig_h™dÀr
 };

26 
	`sigem±y£t
 (&
a˘i⁄
.
ß_mask
);

28 
	`mÆloc
 ( ());

30 i‡(
	`siga˘i⁄
 (
SIGALRM
, &
a˘i⁄
, 
NULL
) != 0)

32 
	`puts
 ("sigaction failed");

37 
pid_t
 
chûd
 = 
	`f‹k
 ();

38 i‡(
chûd
 == 0)

40 i‡(
	`kûl
 (
∑ª¡
, 
SIGALRM
) == -1)

41 
	`≥º‹
 ("kill");

42 
	`exô
 (0);

45 
	`TEMP_FAILURE_RETRY
 (
	`waôpid
 (
chûd
, 
NULL
, 0));

48 
	}
}

50 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

51 
	~"../ã°-skñë⁄.c
"

	@tst-mallocfork2.c

27 
	~<î∫o.h
>

28 
	~<sched.h
>

29 
	~<sig«l.h
>

30 
	~<°dboﬁ.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<sys/waô.h
>

35 
	~<time.h
>

36 
	~<uni°d.h
>

39 íum { 
	mmÆloc_obje˘s
 = 1009 };

42 íum { 
	mmÆloc_maximum_size
 = 70000 };

45 íum { 
	msig«l_cou¡
 = 1000 };

47 
do_ã°
 ();

48 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

49 
	~"../ã°-skñë⁄.c
"

52 
pid_t
 
	gsigu§1_£ndî_pid
;

56 vﬁ©ûê
sig_©omic_t
 
	gsigu§1_ª˚ived
;

60 vﬁ©ûê
sig_©omic_t
 
	g¥ogªss_ödiˇt‹
 = 1;

63 
	$sigu§1_h™dÀr
 (
signo
)

67 i‡(
sigu§1_ª˚ived
)

71 i‡(
sigu§1_£ndî_pid
 > 0 && 
	`kûl
 (sigu§1_£ndî_pid, 
SIGSTOP
) != 0)

73 
	`wrôe_mesßge
 ("error: kill (SIGSTOP)\n");

74 
	`ab‹t
 ();

76 
sigu§1_ª˚ived
 = 1;

79 
pid_t
 
pid
 = 
	`f‹k
 ();

80 i‡(
pid
 == -1)

82 
	`wrôe_mesßge
 ("error: fork\n");

83 
	`ab‹t
 ();

85 i‡(
pid
 == 0)

86 
	`_exô
 (0);

87 
°©us
;

88 
ªt
 = 
	`TEMP_FAILURE_RETRY
 (
	`waôpid
 (
pid
, &
°©us
, 0));

89 i‡(
ªt
 < 0)

91 
	`wrôe_mesßge
 ("error: waitpid\n");

92 
	`ab‹t
 ();

94 i‡(
°©us
 != 0)

96 
	`wrôe_mesßge
 ("error: unexpectedÉxit status from subprocess\n");

97 
	`ab‹t
 ();

99 
	}
}

102 
	$livíess_sig«l_h™dÀr
 (
signo
)

104 i‡(
¥ogªss_ödiˇt‹
)

105 
¥ogªss_ödiˇt‹
 = 0;

107 
	`wrôe_mesßge
 ("warning:Örocess seemsÅo be stuck\n");

108 
	}
}

111 
__©åibuã__
 ((
n‹ëu∫
))

112 
	$sig«l_£ndî
 (
signo
, 
boﬁ
 
¶ìp
)

114 
pid_t
 
èrgë
 = 
	`gëµid
 ();

115 
åue
)

117 i‡(
	`kûl
 (
èrgë
, 
signo
) != 0)

119 
	`d¥ötf
 (
STDOUT_FILENO
, "error: kill: %m\n");

120 
	`ab‹t
 ();

122 i‡(
¶ìp
)

123 
	`u¶ìp
 (1 * 1000 * 1000);

126 
	`sched_yõld
 ();

128 
	}
}

131 
	$do_ã°
 ()

133 
siga˘i⁄
 
a˘i⁄
 =

135 .
ß_h™dÀr
 = 
sigu§1_h™dÀr
,

137 
	`sigem±y£t
 (&
a˘i⁄
.
ß_mask
);

139 i‡(
	`siga˘i⁄
 (
SIGUSR1
, &
a˘i⁄
, 
NULL
) != 0)

141 
	`¥ötf
 ("error: sigaction: %m");

145 
a˘i⁄
.
ß_h™dÀr
 = 
livíess_sig«l_h™dÀr
;

146 i‡(
	`siga˘i⁄
 (
SIGUSR2
, &
a˘i⁄
, 
NULL
) != 0)

148 
	`¥ötf
 ("error: sigaction: %m");

152 
pid_t
 
sigu§2_£ndî_pid
 = 
	`f‹k
 ();

153 i‡(
sigu§2_£ndî_pid
 == 0)

154 
	`sig«l_£ndî
 (
SIGUSR2
, 
åue
);

155 
sigu§1_£ndî_pid
 = 
	`f‹k
 ();

156 i‡(
sigu§1_£ndî_pid
 == 0)

157 
	`sig«l_£ndî
 (
SIGUSR1
, 
Ál£
);

159 *
obje˘s
[
mÆloc_obje˘s
] = {};

160 
sig«ls
 = 0;

161 
£ed
 = 1;

162 
time_t
 
œ°_ªp‹t
 = 0;

163 
sig«ls
 < 
sig«l_cou¡
)

165 
¥ogªss_ödiˇt‹
 = 1;

166 
¶Ÿ
 = 
	`ønd_r
 (&
£ed
Ë% 
mÆloc_obje˘s
;

167 
size_t
 
size
 = 
	`ønd_r
 (&
£ed
Ë% 
mÆloc_maximum_size
;

168 i‡(
	`kûl
 (
sigu§1_£ndî_pid
, 
SIGCONT
) != 0)

170 
	`¥ötf
 ("error: kill (SIGCONT): %m\n");

171 
	`sig«l
 (
SIGUSR1
, 
SIG_IGN
);

172 
	`kûl
 (
sigu§1_£ndî_pid
, 
SIGKILL
);

173 
	`kûl
 (
sigu§2_£ndî_pid
, 
SIGKILL
);

176 
sigu§1_ª˚ived
 = 
Ál£
;

177 
	`‰ì
 (
obje˘s
[
¶Ÿ
]);

178 
obje˘s
[
¶Ÿ
] = 
	`mÆloc
 (
size
);

179 i‡(
sigu§1_ª˚ived
)

181 ++
sig«ls
;

182 
time_t
 
cuºít
 = 
	`time
 (0);

183 i‡(
cuºít
 !
œ°_ªp‹t
)

185 
	`¥ötf
 ("öfo: SIGUSR1 sig«»cou¡: %u\n", 
sig«ls
);

186 
œ°_ªp‹t
 = 
cuºít
;

189 i‡(
obje˘s
[
¶Ÿ
] =
NULL
)

191 
	`¥ötf
 ("error: malloc: %m\n");

192 
	`sig«l
 (
SIGUSR1
, 
SIG_IGN
);

193 
	`kûl
 (
sigu§1_£ndî_pid
, 
SIGKILL
);

194 
	`kûl
 (
sigu§2_£ndî_pid
, 
SIGKILL
);

200 
¶Ÿ
 = 0; slŸ < 
mÆloc_obje˘s
; ++slot)

201 
	`‰ì
 (
obje˘s
[
¶Ÿ
]);

205 
	`sig«l
 (
SIGUSR1
, 
SIG_IGN
);

206 
	`kûl
 (
sigu§1_£ndî_pid
, 
SIGKILL
);

207 
	`kûl
 (
sigu§2_£ndî_pid
, 
SIGKILL
);

210 
	}
}

	@tst-mallocstate.c

19 
	~<î∫o.h
>

20 
	~<°dio.h
>

21 
	~"mÆloc.h
"

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$do_ã°
 ()

35 *
p1
, *
p2
;

36 *
ßve_°©e
;

37 
i
;

39 
î∫o
 = 0;

41 
p1
 = 
	`mÆloc
 (10);

42 i‡(
p1
 =
NULL
)

43 
	`mîr‹
 ("malloc (10) failed.");

45 
p2
 = 
	`mÆloc
 (20);

46 i‡(
p2
 =
NULL
)

47 
	`mîr‹
 ("malloc (20) failed.");

49 
	`‰ì
 (
	`mÆloc
 (10));

51 
i
 = 0; i < 100; ++i)

53 
ßve_°©e
 = 
	`mÆloc_gë_°©e
 ();

54 i‡(
ßve_°©e
 =
NULL
)

56 
	`mîr‹
 ("malloc_get_state () failed.");

60 
	`mÆloc_£t_°©e
 (
ßve_°©e
);

61 
p1
 = 
	`ªÆloc
 (p1, 
i
 * 4 + 4);

62 i‡(
p1
 =
NULL
)

63 
	`mîr‹
 ("realloc (i*4) failed.");

64 
	`‰ì
 (
ßve_°©e
);

67 
p1
 = 
	`ªÆloc
 (p1, 40);

68 
	`‰ì
 (
p2
);

69 
p2
 = 
	`mÆloc
 (10);

70 i‡(
p2
 =
NULL
)

71 
	`mîr‹
 ("malloc (10) failed.");

72 
	`‰ì
 (
p1
);

74  
îr‹s
 != 0;

75 
	}
}

83 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

84 
	~"../ã°-skñë⁄.c
"

	@tst-mallopt.c

18 
	~<mÆloc.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

22 
	gîr‹s
 = 0;

25 
	$mîr‹
 (c⁄° *
msg
)

27 ++
îr‹s
;

28 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

29 
	}
}

32 
	$do_ã°
 ()

34 
ªt
;

36 
ªt
 = 
	`mÆl›t
(
M_CHECK_ACTION
, 1);

38 i‡(
ªt
 != 1)

39 
	`mîr‹
 ("mallopt (M_CHECK_ACTION, 1) failed.");

41 
ªt
 = 
	`mÆl›t
(
M_MMAP_MAX
, 64*1024);

43 i‡(
ªt
 != 1)

44 
	`mîr‹
 ("mallopt (M_MMAP_MAX, 64*1024) failed.");

46 
ªt
 = 
	`mÆl›t
(
M_MMAP_THRESHOLD
, 64*1024);

48 i‡(
ªt
 != 1)

49 
	`mîr‹
 ("mallopt (M_MMAP_THRESHOLD, 64*1024) failed.");

51 
ªt
 = 
	`mÆl›t
(
M_MXFAST
, 0);

53 i‡(
ªt
 != 1)

54 
	`mîr‹
 ("mallopt (M_MXFAST, 0) failed.");

56 
ªt
 = 
	`mÆl›t
(
M_PERTURB
, 0xa5);

58 i‡(
ªt
 != 1)

59 
	`mîr‹
 ("mallopt (M_PERTURB, 0xa5) failed.");

61 
ªt
 = 
	`mÆl›t
(
M_TOP_PAD
, 64*1024);

63 i‡(
ªt
 != 1)

64 
	`mîr‹
 ("mallopt (M_TOP_PAD, 64*1024) failed.");

66 
ªt
 = 
	`mÆl›t
(
M_TRIM_THRESHOLD
, -1);

68 i‡(
ªt
 != 1)

69 
	`mîr‹
 ("mallopt (M_TRIM_THRESHOLD, -1) failed.");

71  
îr‹s
 != 0;

72 
	}
}

74 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

75 
	~"../ã°-skñë⁄.c
"

	@tst-mcheck.c

19 
	~<î∫o.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$do_ã°
 ()

35 *
p
, *
q
;

37 
î∫o
 = 0;

39 
p
 = 
	`mÆloc
 (-1);

41 i‡(
p
 !
NULL
)

42 
	`mîr‹
 ("malloc (-1) succeeded.");

43 i‡(
î∫o
 !
ENOMEM
)

44 
	`mîr‹
 ("errno isÇot set correctly.");

46 
p
 = 
	`mÆloc
 (10);

47 i‡(
p
 =
NULL
)

48 
	`mîr‹
 ("malloc (10) failed.");

50 
p
 = 
	`ªÆloc
 (p, 0);

51 i‡(
p
 !
NULL
)

52 
	`mîr‹
 ("realloc (p, 0) failed.");

54 
p
 = 
	`mÆloc
 (0);

55 i‡(
p
 =
NULL
)

56 
	`mîr‹
 ("malloc (0) failed.");

58 
p
 = 
	`ªÆloc
 (p, 0);

59 i‡(
p
 !
NULL
)

60 
	`mîr‹
 ("realloc (p, 0) failed.");

62 
q
 = 
	`mÆloc
 (256);

63 i‡(
q
 =
NULL
)

64 
	`mîr‹
 ("malloc (256) failed.");

66 
p
 = 
	`mÆloc
 (512);

67 i‡(
p
 =
NULL
)

68 
	`mîr‹
 ("malloc (512) failed.");

70 i‡(
	`ªÆloc
 (
p
, -256Ë!
NULL
)

71 
	`mîr‹
 ("realloc (p, -256) succeeded.");

72 i‡(
î∫o
 !
ENOMEM
)

73 
	`mîr‹
 ("errno isÇot set correctly.");

75 
	`‰ì
 (
p
);

77 
p
 = 
	`mÆloc
 (512);

78 i‡(
p
 =
NULL
)

79 
	`mîr‹
 ("malloc (512) failed.");

81 i‡(
	`ªÆloc
 (
p
, -1Ë!
NULL
)

82 
	`mîr‹
 ("realloc (p, -1) succeeded.");

83 i‡(
î∫o
 !
ENOMEM
)

84 
	`mîr‹
 ("errno isÇot set correctly.");

86 
	`‰ì
 (
p
);

87 
	`‰ì
 (
q
);

89  
îr‹s
 != 0;

90 
	}
}

92 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

93 
	~"../ã°-skñë⁄.c
"

	@tst-memalign.c

19 
	~<î∫o.h
>

20 
	~<mÆloc.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
∑gesize
 = 
	`gë∑gesize
 ();

39 
±rvÆ
;

40 
ßve
;

42 
î∫o
 = 0;

46 
p
 = 
	`memÆign
 ( (*), -1);

48 
ßve
 = 
î∫o
;

50 i‡(
p
 !
NULL
)

51 
	`mîr‹
 ("memalign (sizeof (void *), -1) succeeded.");

53 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

54 
	`mîr‹
 ("memalign (sizeof (void *), -1)Érrno isÇot set correctly");

56 
	`‰ì
 (
p
);

58 
î∫o
 = 0;

61 
p
 = 
	`memÆign
 (
∑gesize
, -pagesize);

63 
ßve
 = 
î∫o
;

65 i‡(
p
 !
NULL
)

66 
	`mîr‹
 ("memalign (pagesize, -pagesize) succeeded.");

68 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

69 
	`mîr‹
 ("memalign (pagesize, -pagesize)Érrno isÇot set correctly");

71 
	`‰ì
 (
p
);

73 
î∫o
 = 0;

76 
p
 = 
	`memÆign
 (-1, 
∑gesize
);

78 
ßve
 = 
î∫o
;

80 i‡(
p
 !
NULL
)

81 
	`mîr‹
 ("memalign (-1,Öagesize) succeeded.");

83 i‡(
p
 =
NULL
 && 
ßve
 !
EINVAL
)

84 
	`mîr‹
 ("memalign (-1,Öagesize)Érrno isÇot set correctly");

86 
	`‰ì
 (
p
);

90 
p
 = 
	`memÆign
 ( (*), 0);

92 i‡(
p
 =
NULL
)

93 
	`mîr‹
 ("memalign (sizeof (void *), 0) failed.");

95 
	`‰ì
 (
p
);

98 
p
 = 
	`memÆign
 (0x100, 10);

100 i‡(
p
 =
NULL
)

101 
	`mîr‹
 ("memalign (0x100, 10) failed.");

103 
±rvÆ
 = (Ë
p
;

105 i‡((
±rvÆ
 & 0xff) != 0)

106 
	`mîr‹
 ("pointer isÇotálignedÅo 0x100");

108 
	`‰ì
 (
p
);

110  
îr‹s
 != 0;

111 
	}
}

113 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

114 
	~"../ã°-skñë⁄.c
"

	@tst-mtrace.c

19 
	~<mcheck.h
>

20 
	~<∑ths.h
>

21 
	~<£¨ch.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

27 
¥öt
 (c⁄° *
node
, 
VISIT
 
vÆue
, 
Àvñ
);

30 
FILE
 *
	gÂ
;

34 
	$do_ã°
 ()

36 *
roŸ
 = 
NULL
;

37 
size_t
 
löñí
 = 0;

38 *
löe
 = 
NULL
;

41 
	`måa˚
 ();

45 
Â
 = 
	`f›í
 (
__FILE__
, "r");

46 i‡(
Â
 =
NULL
)

49 
	`ab‹t
 ();

51 !
	`„of
 (
Â
))

53 **
p
;

54 *
c›y
;

55 
ssize_t
 
n
 = 
	`gëlöe
 (&
löe
, &
löñí
, 
Â
);

57 i‡(
n
 < 0)

60 i‡(
n
 == 0)

63 
c›y
 = 
	`°rdup
 (
löe
);

64 i‡(
c›y
 =
NULL
)

65 
	`ab‹t
 ();

67 
p
 = (**Ë
	`t£¨ch
 (
c›y
, &
roŸ
,

68 ((*)(c⁄° *, c⁄° *))
°rcmp
);

69 i‡(*
p
 !
c›y
)

71 
	`‰ì
 (
c›y
);

74 
	`f˛o£
 (
Â
);

76 
Â
 = 
	`f›í
 (
_PATH_DEVNULL
, "w");

77 i‡(
Â
 !
NULL
)

80 
	`twÆk
 (
roŸ
, 
¥öt
);

82 
	`f˛o£
 (
Â
);

86 
	`tde°roy
 (
roŸ
, 
‰ì
);

89 
	`‰ì
 (
löe
);

93 
	}
}

97 
	$¥öt
 (c⁄° *
node
, 
VISIT
 
vÆue
, 
Àvñ
)

99 
˙t
;

100 i‡(
vÆue
 =
po°‹dî
 || vÆuê=
Àaf
)

101 
	`Ârötf
 (
Â
, "%3d: %s", ++
˙t
, *(c⁄° **Ë
node
);

102 
	}
}

104 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

105 
	~"../ã°-skñë⁄.c
"

	@tst-obstack.c

2 
	~<ob°ack.h
>

3 
	~<°döt.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	#ob°ack_chunk_Æloc
 
vîbo£_mÆloc


	)

8 
	#ob°ack_chunk_‰ì
 
vîbo£_‰ì


	)

9 
	#ALIGN_BOUNDARY
 64

	)

10 
	#ALIGN_MASK
 (
ALIGN_BOUNDARY
 - 1)

	)

11 
	#OBJECT_SIZE
 1000

	)

14 
	$vîbo£_mÆloc
 (
size_t
 
size
)

16 *
buf
 = 
	`mÆloc
 (
size
);

17 
	`¥ötf
 ("mÆlo¯(%zuË=> %p\n", 
size
, 
buf
);

18  
buf
;

19 
	}
}

22 
	$vîbo£_‰ì
 (*
buf
)

24 
	`‰ì
 (
buf
);

25 
	`¥ötf
 ("‰ì (%p)\n", 
buf
);

26 
	}
}

29 
	$do_ã°
 ()

31 
ªsu…
 = 0;

32 
Æign
 = 2;

34 
Æign
 <= 64)

36 
ob°ack
 
obs
;

37 
i
;

38 
Æign_mask
 = 
Æign
 - 1;

40 
	`¥ötf
 ("\¿Alignmíàmask: %d\n", 
Æign_mask
);

42 
	`ob°ack_öô
 (&
obs
);

43 
	`ob°ack_Æignmít_mask
 (&
obs
Ë
Æign_mask
;

45 
	`ob°ack_föish
 (&
obs
);

48 
i
 = 15; i > 0; --i)

50 *
obj
 = 
	`ob°ack_Æloc
 (&
obs
, 
OBJECT_SIZE
);

52 
	`¥ötf
 ("ob°ack_Ælo¯(%uË=> %∞\t%s\n", 
OBJECT_SIZE
, 
obj
,

53 ((
uöçå_t
Ë
obj
 & 
Æign_mask
) ? "(notáligned)" : "");

54 
ªsu…
 |((
uöçå_t
Ë
obj
 & 
Æign_mask
) != 0;

58 
	`ob°ack_‰ì
 (&
obs
, 0);

60 
Æign
 <<= 1;

63  
ªsu…
;

64 
	}
}

66 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

67 
	~"../ã°-skñë⁄.c
"

	@tst-posix_memalign.c

19 
	~<î∫o.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
ªt
;

39 
∑gesize
 = 
	`gë∑gesize
 ();

40 
±rvÆ
;

42 
p
 = 
NULL
;

46 
ªt
 = 
	`posix_memÆign
 (&
p
,  (*), -1);

48 i‡(
ªt
 !
ENOMEM
)

49 
	`mîr‹
 ("posix_memalign (&p, sizeof (void *), -1) succeeded.");

51 i‡(
ªt
 =
ENOMEM
 && 
p
 !
NULL
)

52 
	`mîr‹
 ("returnedánÉrror butÖointer was modified");

54 
	`‰ì
 (
p
);

56 
p
 = 
NULL
;

59 
ªt
 = 
	`posix_memÆign
 (&
p
, 
∑gesize
, -pagesize);

61 i‡(
ªt
 !
ENOMEM
)

62 
	`mîr‹
 ("posix_memalign (&p,Öagesize, -pagesize) succeeded.");

64 
	`‰ì
 (
p
);

66 
p
 = 
NULL
;

69 
ªt
 = 
	`posix_memÆign
 (&
p
, -1, 
∑gesize
);

71 i‡(
ªt
 !
EINVAL
)

72 
	`mîr‹
 ("posix_memalign (&p, -1,Öagesize) succeeded.");

74 
	`‰ì
 (
p
);

76 
p
 = 
NULL
;

80 
ªt
 = 
	`posix_memÆign
 (&
p
,  (*), 0);

82 i‡(
ªt
 !0 || 
p
 =
NULL
)

83 
	`mîr‹
 ("posix_memalign (&p, sizeof (void *), 0) failed.");

85 
	`‰ì
 (
p
);

87 
ªt
 = 
	`posix_memÆign
 (&
p
, 0x300, 10);

89 i‡(
ªt
 !
EINVAL
)

90 
	`mîr‹
 ("posix_memalign (&p, 0x300, 10) succeeded.");

92 
ªt
 = 
	`posix_memÆign
 (&
p
, 0, 10);

94 i‡(
ªt
 !
EINVAL
)

95 
	`mîr‹
 ("posix_memalign (&p, 0, 10) succeeded.");

97 
p
 = 
NULL
;

99 
ªt
 = 
	`posix_memÆign
 (&
p
, 0x100, 10);

101 i‡(
ªt
 != 0)

102 
	`mîr‹
 ("posix_memalign (&p, 0x100, 10) failed.");

104 i‡(
ªt
 =0 && 
p
 =
NULL
)

105 
	`mîr‹
 ("returned success butÖointer is NULL");

107 
±rvÆ
 = (Ë
p
;

109 i‡(
ªt
 =0 && (
±rvÆ
 & 0xff) != 0)

110 
	`mîr‹
 ("pointer isÇotálignedÅo 0x100");

112 
	`‰ì
 (
p
);

114  
îr‹s
 != 0;

115 
	}
}

117 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

118 
	~"../ã°-skñë⁄.c
"

	@tst-pvalloc.c

19 
	~<î∫o.h
>

20 
	~<mÆloc.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
∑gesize
 = 
	`gë∑gesize
 ();

39 
±rvÆ
;

40 
ßve
;

42 
î∫o
 = 0;

46 
p
 = 
	`pvÆloc
 (-1);

48 
ßve
 = 
î∫o
;

50 i‡(
p
 !
NULL
)

51 
	`mîr‹
 ("pvalloc (-1) succeeded.");

53 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

54 
	`mîr‹
 ("pvalloc (-1)Érrno isÇot set correctly");

56 
	`‰ì
 (
p
);

58 
î∫o
 = 0;

61 
p
 = 
	`pvÆloc
 (-
∑gesize
);

63 
ßve
 = 
î∫o
;

65 i‡(
p
 !
NULL
)

66 
	`mîr‹
 ("pvalloc (-pagesize) succeeded.");

68 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

69 
	`mîr‹
 ("pvalloc (-pagesize)Érrno isÇot set correctly");

71 
	`‰ì
 (
p
);

75 
p
 = 
	`pvÆloc
 (0);

77 i‡(
p
 =
NULL
)

78 
	`mîr‹
 ("pvalloc (0) failed.");

80 
	`‰ì
 (
p
);

83 
p
 = 
	`pvÆloc
 (32);

85 i‡(
p
 =
NULL
)

86 
	`mîr‹
 ("pvalloc (32) failed.");

88 
±rvÆ
 = (Ë
p
;

90 i‡((
±rvÆ
 & (
∑gesize
 - 1)) != 0)

91 
	`mîr‹
 ("returnedÖointer isÇotÖageáligned.");

93 
	`‰ì
 (
p
);

95  
îr‹s
 != 0;

96 
	}
}

98 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

99 
	~"../ã°-skñë⁄.c
"

	@tst-realloc.c

18 
	~<î∫o.h
>

19 
	~<mÆloc.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$do_ã°
 ()

35 *
p
;

36 *
c
;

37 
ßve
, 
i
, 
ok
;

39 
î∫o
 = 0;

42 
p
 = 
	`ªÆloc
 (
NULL
, -1);

43 
ßve
 = 
î∫o
;

45 i‡(
p
 !
NULL
)

46 
	`mîr‹
 ("realloc (NULL, -1) succeeded.");

49 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

50 
	`mîr‹
 ("errno isÇot set correctly");

52 
î∫o
 = 0;

55 
p
 = 
	`ªÆloc
 (
NULL
, 10);

56 
ßve
 = 
î∫o
;

58 i‡(
p
 =
NULL
)

59 
	`mîr‹
 ("realloc (NULL, 10) failed.");

62 i‡(
p
 !
NULL
 && 
ßve
 != 0)

63 
	`mîr‹
 ("errno is set but shouldÇot be");

65 
	`‰ì
 (
p
);

67 
p
 = 
	`ˇŒoc
 (20, 1);

68 i‡(
p
 =
NULL
)

69 
	`mîr‹
 ("calloc (20, 1) failed.");

72 
p
 = 
	`ªÆloc
 (p, 200);

73 i‡(
p
 =
NULL
)

74 
	`mîr‹
 ("realloc (p, 200) failed.");

76 
c
 = 
p
;

77 
ok
 = 1;

79 
i
 = 0; i < 20; i++)

81 i‡(
c
[
i
] != 0)

82 
ok
 = 0;

85 i‡(
ok
 == 0)

86 
	`mîr‹
 ("first 20 bytes wereÇot cleared");

88 
	`‰ì
 (
p
);

90 
p
 = 
	`ªÆloc
 (
NULL
, 100);

91 i‡(
p
 =
NULL
)

92 
	`mîr‹
 ("realloc (NULL, 100) failed.");

94 
	`mem£t
 (
p
, 0xff, 100);

97 
p
 = 
	`ªÆloc
 (p, 16);

98 i‡(
p
 =
NULL
)

99 
	`mîr‹
 ("realloc (p, 16) failed.");

101 
c
 = 
p
;

102 
ok
 = 1;

104 
i
 = 0; i < 16; i++)

106 i‡(
c
[
i
] != 0xff)

107 
ok
 = 0;

110 i‡(
ok
 == 0)

111 
	`mîr‹
 ("first 16 bytes wereÇot correct");

114 
c
 = 
	`ªÆloc
 (
p
, -1);

115 i‡(
c
 !
NULL
)

116 
	`mîr‹
 ("realloc (p, -1) succeeded.");

118 
c
 = 
p
;

119 
ok
 = 1;

121 
i
 = 0; i < 16; i++)

123 i‡(
c
[
i
] != 0xff)

124 
ok
 = 0;

127 i‡(
ok
 == 0)

128 
	`mîr‹
 ("first 16 bytes wereÇot correctáfter failedÑealloc");

131 
p
 = 
	`ªÆloc
 (p, 0);

132 i‡(
p
 !
NULL
)

133 
	`mîr‹
 ("realloc (p, 0)ÑeturnedÇon-NULL.");

136 
p
 = 
	`ªÆloc
 (
NULL
, 0);

137 i‡(
p
 =
NULL
)

138 
	`mîr‹
 ("realloc (NULL, 0)Ñeturned NULL.");

140 
	`‰ì
 (
p
);

142  
îr‹s
 != 0;

143 
	}
}

145 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

146 
	~"../ã°-skñë⁄.c
"

	@tst-scratch_buffer.c

19 
	~<s¸©ch_buf„r.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
boﬁ


25 
	$unch™ged_¨øy_size
 (
s¸©ch_buf„r
 *
buf
, 
size_t
 
a
, size_à
b
)

27 
size_t
 
ﬁd_Àngth
 = 
buf
->
Àngth
;

28 i‡(!
	`s¸©ch_buf„r_£t_¨øy_size
 (
buf
, 
a
, 
b
))

30 
	`¥ötf
 ("scratch_buffer_set_array_size failed: %zu %zu\n",

31 
a
, 
b
);

32  
Ál£
;

34 i‡(
ﬁd_Àngth
 !
buf
->
Àngth
)

36 
	`¥ötf
 ("scratch_buffer_set_array_size didÇotÖreserve size: %zu %zu\n",

37 
a
, 
b
);

38  
Ál£
;

40  
åue
;

41 
	}
}

43 
boﬁ


44 
	$¨øy_size_mu°_Áû
 (
size_t
 
a
, size_à
b
)

46 
∑ss
 = 0;Öass < 2; ++pass)

48 
s¸©ch_buf„r
 
buf
;

49 
	`s¸©ch_buf„r_öô
 (&
buf
);

50 i‡(
∑ss
 > 0)

51 i‡(!
	`s¸©ch_buf„r_grow
 (&
buf
))

53 
	`¥ötf
 ("scratch_buffer_grow inárray_size_must_fail failed\n");

54  
Ál£
;

56 i‡(
	`s¸©ch_buf„r_£t_¨øy_size
 (&
buf
, 
a
, 
b
))

58 
	`¥ötf
 ("scratch_buffer_set_array_sizeÖassed: %d %zu %zu\n",

59 
∑ss
, 
a
, 
b
);

60  
Ál£
;

62 i‡(
buf
.
d©a
 !buf.
__•a˚
)

64 
	`¥ötf
 ("scratch_buffer_set_array_size didÇot free: %d %zu %zu\n",

65 
∑ss
, 
a
, 
b
);

66  
Ál£
;

69  
åue
;

70 
	}
}

73 
	$do_ã°
 ()

76 
s¸©ch_buf„r
 
buf
;

77 
	`s¸©ch_buf„r_öô
 (&
buf
);

78 
	`mem£t
 (
buf
.
d©a
, ' ', buf.
Àngth
);

79 
	`s¸©ch_buf„r_‰ì
 (&
buf
);

82 
s¸©ch_buf„r
 
buf
;

83 
	`s¸©ch_buf„r_öô
 (&
buf
);

84 
	`mem£t
 (
buf
.
d©a
, ' ', buf.
Àngth
);

85 
size_t
 
ﬁd_Àngth
 = 
buf
.
Àngth
;

86 
	`s¸©ch_buf„r_grow
 (&
buf
);

87 i‡(
buf
.
Àngth
 <
ﬁd_Àngth
)

89 
	`¥ötf
 ("scratch_buffer_grow didÇotÉnlarge buffer\n");

92 
	`mem£t
 (
buf
.
d©a
, ' ', buf.
Àngth
);

93 
	`s¸©ch_buf„r_‰ì
 (&
buf
);

96 
s¸©ch_buf„r
 
buf
;

97 
	`s¸©ch_buf„r_öô
 (&
buf
);

98 
	`mem£t
 (
buf
.
d©a
, '@', buf.
Àngth
);

99 
	`°r˝y
 (
buf
.
d©a
, "prefix");

100 
size_t
 
ﬁd_Àngth
 = 
buf
.
Àngth
;

101 
	`s¸©ch_buf„r_grow_¥e£rve
 (&
buf
);

102 i‡(
buf
.
Àngth
 <
ﬁd_Àngth
)

104 
	`¥ötf
 ("scratch_buffer_grow_preserve didÇotÉnlarge buffer\n");

107 i‡(
	`°rcmp
 (
buf
.
d©a
, "prefix") != 0)

109 
	`¥ötf
 ("scratch_buffer_grow_preserve didÇot copy buffer\n");

112 
i
 = 7; i < 
ﬁd_Àngth
; ++i)

113 i‡(((*)
buf
.
d©a
)[
i
] != '@')

115 
	`¥ötf
 ("scratch_buffer_grow_preserve didÇot copy buffer (%u)\n",

116 
i
);

119 
	`s¸©ch_buf„r_‰ì
 (&
buf
);

122 
s¸©ch_buf„r
 
buf
;

123 
	`s¸©ch_buf„r_öô
 (&
buf
);

124 
∑ss
 = 0;Öass < 4; ++pass)

126 i‡(!(
	`unch™ged_¨øy_size
 (&
buf
, 0, 0)

127 && 
	`unch™ged_¨øy_size
 (&
buf
, 1, 0)

128 && 
	`unch™ged_¨øy_size
 (&
buf
, 0, 1)

129 && 
	`unch™ged_¨øy_size
 (&
buf
, -1, 0)

130 && 
	`unch™ged_¨øy_size
 (&
buf
, 0, -1)

131 && 
	`unch™ged_¨øy_size
 (&
buf
, 1ULL << 16, 0)

132 && 
	`unch™ged_¨øy_size
 (&
buf
, 0, 1ULL << 16)

133 && 
	`unch™ged_¨øy_size
 (&
buf
, (
size_t
) (1ULL << 32), 0)

134 && 
	`unch™ged_¨øy_size
 (&
buf
, 0, (
size_t
) (1ULL << 32))))

136 i‡(!
	`s¸©ch_buf„r_grow
 (&
buf
))

138 
	`¥ötf
 ("s¸©ch_buf„r_grow_Áûed (∑s†%d)\n", 
∑ss
);

141 
	`s¸©ch_buf„r_‰ì
 (&
buf
);

144 i‡(!(
	`¨øy_size_mu°_Áû
 (-1, 1)

145 && 
	`¨øy_size_mu°_Áû
 (-1, -1)

146 && 
	`¨øy_size_mu°_Áû
 (1, -1)

147 && 
	`¨øy_size_mu°_Áû
 (((
size_t
)-1) / 4, 4)

148 && 
	`¨øy_size_mu°_Áû
 (4, ((
size_t
)-1) / 4)))

152 
	}
}

154 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

155 
	~"../ã°-skñë⁄.c
"

	@tst-trim1.c

1 
	~<mÆloc.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	#N
 10000

	)

8 *
	g¨r
[
N
];

11 
	$do_ã°
 ()

13 
i
 = 0; i < 
N
; ++i)

15 
size_t
 
size
 = 
	`øndom
 () % 16384;

17 i‡((
¨r
[
i
] = 
	`mÆloc
 (
size
)Ë=
NULL
)

19 
nomem
:

20 
	`puts
 ("notÉnough memory");

24 
	`mem£t
 (
¨r
[
i
], 
size
, size);

27 *
p
 = 
	`mÆloc
 (256);

28 i‡(
p
 =
NULL
)

29 
nomem
;

30 
	`mem£t
 (
p
, 1, 256);

32 
	`puts
 ("==================================================================");

34 
i
 = 0; i < 
N
; ++i)

35 i‡(
i
 % 13 != 0)

36 
	`‰ì
 (
¨r
[
i
]);

38 
	`puts
 ("==================================================================");

40 
	`mÆloc_åim
 (0);

42 
	`puts
 ("==================================================================");

44 
p
 = 
	`mÆloc
 (30000);

45 i‡(
p
 =
NULL
)

46 
nomem
;

48 
	`mem£t
 (
p
, 2, 30000);

50 
	`mÆloc_åim
 (0);

53 
	}
}

55 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

56 
	~"../ã°-skñë⁄.c
"

	@tst-valloc.c

19 
	~<î∫o.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
∑gesize
 = 
	`gë∑gesize
 ();

39 
±rvÆ
;

40 
ßve
;

42 
î∫o
 = 0;

46 
p
 = 
	`vÆloc
 (-1);

48 
ßve
 = 
î∫o
;

50 i‡(
p
 !
NULL
)

51 
	`mîr‹
 ("valloc (-1) succeeded.");

53 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

54 
	`mîr‹
 ("valloc (-1)Érrno isÇot set correctly");

56 
	`‰ì
 (
p
);

58 
î∫o
 = 0;

61 
p
 = 
	`vÆloc
 (-
∑gesize
);

63 
ßve
 = 
î∫o
;

65 i‡(
p
 !
NULL
)

66 
	`mîr‹
 ("valloc (-pagesize) succeeded.");

68 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

69 
	`mîr‹
 ("valloc (-pagesize)Érrno isÇot set correctly");

71 
	`‰ì
 (
p
);

75 
p
 = 
	`vÆloc
 (0);

77 i‡(
p
 =
NULL
)

78 
	`mîr‹
 ("valloc (0) failed.");

80 
	`‰ì
 (
p
);

83 
p
 = 
	`vÆloc
 (32);

85 i‡(
p
 =
NULL
)

86 
	`mîr‹
 ("valloc (32) failed.");

88 
±rvÆ
 = (Ë
p
;

90 i‡((
±rvÆ
 & (
∑gesize
 - 1)) != 0)

91 
	`mîr‹
 ("returnedÖointer isÇotÖageáligned.");

93 
	`‰ì
 (
p
);

95  
îr‹s
 != 0;

96 
	}
}

98 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

99 
	~"../ã°-skñë⁄.c
"

	@../libio/libioP.h

35 
	~<°ddef.h
>

37 
	~<î∫o.h
>

38 #i‚de‡
__£t_î∫o


39 
	#__£t_î∫o
(
VÆ
Ë
î∫o
 = (VÆ)

	)

41 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

42 
	~<libc-lock.h
>

47 
	~<m©h_ldbl_›t.h
>

49 
	~"iﬁibio.h
"

53 #i‚de‡
libc_hiddí_¥Ÿo


54 
	#libc_hiddí_¥Ÿo
(
«me
)

	)

56 #i‚de‡
libc_hiddí_def


57 
	#libc_hiddí_def
(
«me
)

	)

59 #i‚de‡
libc_hiddí_wók


60 
	#libc_hiddí_wók
(
«me
)

	)

63 #ifde‡
__˝lu•lus


67 
	#_IO_£ek_£t
 0

	)

68 
	#_IO_£ek_cur
 1

	)

69 
	#_IO_£ek_íd
 2

	)

92 #ifde‡
_LIBC


93 
	~<shlib-com∑t.h
>

94 #i‡!
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

98 
	#_G_IO_NO_BACKWARD_COMPAT
 1

	)

102 #i‡(!
deföed
 
_IO_USE_OLD_IO_FILE
 \

103 && (!
deföed
 
_G_IO_NO_BACKWARD_COMPAT
 || _G_IO_NO_BACKWARD_COMPAT == 0))

104 
	#_IO_JUMPS_OFFSET
 1

	)

106 
	#_IO_JUMPS_OFFSET
 0

	)

110 
	#_IO_MEMBER_TYPE
(
TYPE
, 
MEMBER
Ë
	`__ty≥of__
 (((TYPE){}).MEMBER)

	)

114 
	#_IO_CAST_FIELD_ACCESS
(
THIS
, 
TYPE
, 
MEMBER
) \

115 (*(
	`_IO_MEMBER_TYPE
 (
TYPE
, 
MEMBER
Ë*)(((*Ë(
THIS
)) \

116 + 
	`off£tof
(
TYPE
, 
MEMBER
)))

	)

118 
	#_IO_JUMPS
(
THIS
Ë(THIS)->
vèbÀ


	)

119 
	#_IO_JUMPS_FILE_∂us
(
THIS
) \

120 
	`_IO_CAST_FIELD_ACCESS
 ((
THIS
), 
_IO_FILE_∂us
, 
vèbÀ
)

	)

121 
	#_IO_WIDE_JUMPS
(
THIS
) \

122 
	`_IO_CAST_FIELD_ACCESS
 ((
THIS
), 
_IO_FILE
, 
_wide_d©a
)->
_wide_vèbÀ


	)

123 
	#_IO_CHECK_WIDE
(
THIS
) \

124 (
	`_IO_CAST_FIELD_ACCESS
 ((
THIS
), 
_IO_FILE
, 
_wide_d©a
Ë!
NULL
)

	)

126 #i‡
_IO_JUMPS_OFFSET


127 
	#_IO_JUMPS_FUNC
(
THIS
) \

128 (
IO_vÆid©e_vèbÀ
 \

129 (*(
_IO_jump_t
 **Ë((*Ë&
	`_IO_JUMPS_FILE_∂us
 (
THIS
) \

130 + (
THIS
)->
_vèbÀ_off£t
)))

	)

131 
	#_IO_vèbÀ_off£t
(
THIS
Ë(THIS)->
_vèbÀ_off£t


	)

133 
	#_IO_JUMPS_FUNC
(
THIS
Ë(
	`IO_vÆid©e_vèbÀ
 (
	`_IO_JUMPS_FILE_∂us
 (THIS)))

	)

134 
	#_IO_vèbÀ_off£t
(
THIS
Ë0

	)

136 
	#_IO_WIDE_JUMPS_FUNC
(
THIS
Ë
	`_IO_WIDE_JUMPS
(THIS)

	)

137 
	#JUMP_FIELD
(
TYPE
, 
NAME
ËTYPE 
	)
NAME

138 
	#JUMP0
(
FUNC
, 
THIS
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS)

	)

139 
	#JUMP1
(
FUNC
, 
THIS
, 
X1
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1)

	)

140 
	#JUMP2
(
FUNC
, 
THIS
, 
X1
, 
X2
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1, X2)

	)

141 
	#JUMP3
(
FUNC
, 
THIS
, 
X1
,
X2
,
X3
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1,X2, X3)

	)

142 
	#JUMP_INIT
(
NAME
, 
VALUE
Ë
	)
VALUE

143 
	#JUMP_INIT_DUMMY
 
	`JUMP_INIT
(
dummy
, 0), JUMP_INIT (
dummy2
, 0)

	)

145 
	#WJUMP0
(
FUNC
, 
THIS
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS)

	)

146 
	#WJUMP1
(
FUNC
, 
THIS
, 
X1
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1)

	)

147 
	#WJUMP2
(
FUNC
, 
THIS
, 
X1
, 
X2
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1, X2)

	)

148 
	#WJUMP3
(
FUNC
, 
THIS
, 
X1
,
X2
,
X3
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1,X2, X3)

	)

153 (*
_IO_föish_t
Ë(
	t_IO_FILE
 *, );

154 
	#_IO_FINISH
(
FP
Ë
	`JUMP1
 (
__föish
, FP, 0)

	)

155 
	#_IO_WFINISH
(
FP
Ë
	`WJUMP1
 (
__föish
, FP, 0)

	)

160 (*
_IO_ovîÊow_t
Ë(
	t_IO_FILE
 *, );

161 
	#_IO_OVERFLOW
(
FP
, 
CH
Ë
	`JUMP1
 (
__ovîÊow
, FP, CH)

	)

162 
	#_IO_WOVERFLOW
(
FP
, 
CH
Ë
	`WJUMP1
 (
__ovîÊow
, FP, CH)

	)

168 (*
_IO_undîÊow_t
Ë(
	t_IO_FILE
 *);

169 
	#_IO_UNDERFLOW
(
FP
Ë
	`JUMP0
 (
__undîÊow
, FP)

	)

170 
	#_IO_WUNDERFLOW
(
FP
Ë
	`WJUMP0
 (
__undîÊow
, FP)

	)

177 
	#_IO_UFLOW
(
FP
Ë
	`JUMP0
 (
__uÊow
, FP)

	)

178 
	#_IO_WUFLOW
(
FP
Ë
	`WJUMP0
 (
__uÊow
, FP)

	)

182 (*
_IO_pbackÁû_t
Ë(
	t_IO_FILE
 *, );

183 
	#_IO_PBACKFAIL
(
FP
, 
CH
Ë
	`JUMP1
 (
__pbackÁû
, FP, CH)

	)

184 
	#_IO_WPBACKFAIL
(
FP
, 
CH
Ë
	`WJUMP1
 (
__pbackÁû
, FP, CH)

	)

189 
_IO_size_t
 (*
	t_IO_x•uä_t
Ë(
	t_IO_FILE
 *
	tFP
, c⁄° *
	tDATA
,

190 
	t_IO_size_t
 
	tN
);

191 
	#_IO_XSPUTN
(
FP
, 
DATA
, 
N
Ë
	`JUMP2
 (
__x•uä
, FP, DATA, N)

	)

192 
	#_IO_WXSPUTN
(
FP
, 
DATA
, 
N
Ë
	`WJUMP2
 (
__x•uä
, FP, DATA, N)

	)

197 
_IO_size_t
 (*
	t_IO_xsgën_t
Ë(
	t_IO_FILE
 *
	tFP
, *
	tDATA
, 
	t_IO_size_t
 
	tN
);

198 
	#_IO_XSGETN
(
FP
, 
DATA
, 
N
Ë
	`JUMP2
 (
__xsgën
, FP, DATA, N)

	)

199 
	#_IO_WXSGETN
(
FP
, 
DATA
, 
N
Ë
	`WJUMP2
 (
__xsgën
, FP, DATA, N)

	)

206 
_IO_off64_t
 (*
	t_IO_£ekoff_t
Ë(
	t_IO_FILE
 *
	tFP
, 
	t_IO_off64_t
 
	tOFF
, 
	tDIR
,

207 
	tMODE
);

208 
	#_IO_SEEKOFF
(
FP
, 
OFF
, 
DIR
, 
MODE
Ë
	`JUMP3
 (
__£ekoff
, FP, OFF, DIR, MODE)

	)

209 
	#_IO_WSEEKOFF
(
FP
, 
OFF
, 
DIR
, 
MODE
Ë
	`WJUMP3
 (
__£ekoff
, FP, OFF, DIR, MODE)

	)

216 
_IO_off64_t
 (*
	t_IO_£ekpos_t
Ë(
	t_IO_FILE
 *, 
	t_IO_off64_t
, );

217 
	#_IO_SEEKPOS
(
FP
, 
POS
, 
FLAGS
Ë
	`JUMP2
 (
__£ekpos
, FP, POS, FLAGS)

	)

218 
	#_IO_WSEEKPOS
(
FP
, 
POS
, 
FLAGS
Ë
	`WJUMP2
 (
__£ekpos
, FP, POS, FLAGS)

	)

222 
_IO_FILE
* (*
	t_IO_£tbuf_t
Ë(
	t_IO_FILE
 *, *, 
	t_IO_ssize_t
);

223 
	#_IO_SETBUF
(
FP
, 
BUFFER
, 
LENGTH
Ë
	`JUMP2
 (
__£tbuf
, FP, BUFFER, LENGTH)

	)

224 
	#_IO_WSETBUF
(
FP
, 
BUFFER
, 
LENGTH
Ë
	`WJUMP2
 (
__£tbuf
, FP, BUFFER, LENGTH)

	)

229 (*
_IO_sync_t
Ë(
	t_IO_FILE
 *);

230 
	#_IO_SYNC
(
FP
Ë
	`JUMP0
 (
__sync
, FP)

	)

231 
	#_IO_WSYNC
(
FP
Ë
	`WJUMP0
 (
__sync
, FP)

	)

236 (*
_IO_dﬂŒoˇã_t
Ë(
	t_IO_FILE
 *);

237 
	#_IO_DOALLOCATE
(
FP
Ë
	`JUMP0
 (
__dﬂŒoˇã
, FP)

	)

238 
	#_IO_WDOALLOCATE
(
FP
Ë
	`WJUMP0
 (
__dﬂŒoˇã
, FP)

	)

255 
_IO_ssize_t
 (*
	t_IO_ªad_t
Ë(
	t_IO_FILE
 *, *, 
	t_IO_ssize_t
);

256 
	#_IO_SYSREAD
(
FP
, 
DATA
, 
LEN
Ë
	`JUMP2
 (
__ªad
, FP, DATA, LEN)

	)

257 
	#_IO_WSYSREAD
(
FP
, 
DATA
, 
LEN
Ë
	`WJUMP2
 (
__ªad
, FP, DATA, LEN)

	)

263 
_IO_ssize_t
 (*
	t_IO_wrôe_t
Ë(
	t_IO_FILE
 *, c⁄° *, 
	t_IO_ssize_t
);

264 
	#_IO_SYSWRITE
(
FP
, 
DATA
, 
LEN
Ë
	`JUMP2
 (
__wrôe
, FP, DATA, LEN)

	)

265 
	#_IO_WSYSWRITE
(
FP
, 
DATA
, 
LEN
Ë
	`WJUMP2
 (
__wrôe
, FP, DATA, LEN)

	)

271 
_IO_off64_t
 (*
	t_IO_£ek_t
Ë(
	t_IO_FILE
 *, 
	t_IO_off64_t
, );

272 
	#_IO_SYSSEEK
(
FP
, 
OFFSET
, 
MODE
Ë
	`JUMP2
 (
__£ek
, FP, OFFSET, MODE)

	)

273 
	#_IO_WSYSSEEK
(
FP
, 
OFFSET
, 
MODE
Ë
	`WJUMP2
 (
__£ek
, FP, OFFSET, MODE)

	)

279 (*
_IO_˛o£_t
Ë(
	t_IO_FILE
 *);

280 
	#_IO_SYSCLOSE
(
FP
Ë
	`JUMP0
 (
__˛o£
, FP)

	)

281 
	#_IO_WSYSCLOSE
(
FP
Ë
	`WJUMP0
 (
__˛o£
, FP)

	)

287 (*
_IO_°©_t
Ë(
	t_IO_FILE
 *, *);

288 
	#_IO_SYSSTAT
(
FP
, 
BUF
Ë
	`JUMP1
 (
__°©
, FP, BUF)

	)

289 
	#_IO_WSYSSTAT
(
FP
, 
BUF
Ë
	`WJUMP1
 (
__°©
, FP, BUF)

	)

294 (*
_IO_showm™yc_t
Ë(
	t_IO_FILE
 *);

295 
	#_IO_SHOWMANYC
(
FP
Ë
	`JUMP0
 (
__showm™yc
, FP)

	)

296 
	#_IO_WSHOWMANYC
(
FP
Ë
	`WJUMP0
 (
__showm™yc
, FP)

	)

300 (*
_IO_imbue_t
Ë(
	t_IO_FILE
 *, *);

301 
	#_IO_IMBUE
(
FP
, 
LOCALE
Ë
	`JUMP1
 (
__imbue
, FP, LOCALE)

	)

302 
	#_IO_WIMBUE
(
FP
, 
LOCALE
Ë
	`WJUMP1
 (
__imbue
, FP, LOCALE)

	)

305 
	#_IO_CHAR_TYPE
 

	)

306 
	#_IO_INT_TYPE
 

	)

308 
	s_IO_jump_t


310 
JUMP_FIELD
(
size_t
, 
__dummy
);

311 
JUMP_FIELD
(
size_t
, 
__dummy2
);

312 
JUMP_FIELD
(
_IO_föish_t
, 
__föish
);

313 
JUMP_FIELD
(
_IO_ovîÊow_t
, 
__ovîÊow
);

314 
JUMP_FIELD
(
_IO_undîÊow_t
, 
__undîÊow
);

315 
JUMP_FIELD
(
_IO_undîÊow_t
, 
__uÊow
);

316 
JUMP_FIELD
(
_IO_pbackÁû_t
, 
__pbackÁû
);

318 
JUMP_FIELD
(
_IO_x•uä_t
, 
__x•uä
);

319 
JUMP_FIELD
(
_IO_xsgën_t
, 
__xsgën
);

320 
JUMP_FIELD
(
_IO_£ekoff_t
, 
__£ekoff
);

321 
JUMP_FIELD
(
_IO_£ekpos_t
, 
__£ekpos
);

322 
JUMP_FIELD
(
_IO_£tbuf_t
, 
__£tbuf
);

323 
JUMP_FIELD
(
_IO_sync_t
, 
__sync
);

324 
JUMP_FIELD
(
_IO_dﬂŒoˇã_t
, 
__dﬂŒoˇã
);

325 
JUMP_FIELD
(
_IO_ªad_t
, 
__ªad
);

326 
JUMP_FIELD
(
_IO_wrôe_t
, 
__wrôe
);

327 
JUMP_FIELD
(
_IO_£ek_t
, 
__£ek
);

328 
JUMP_FIELD
(
_IO_˛o£_t
, 
__˛o£
);

329 
JUMP_FIELD
(
_IO_°©_t
, 
__°©
);

330 
JUMP_FIELD
(
_IO_showm™yc_t
, 
__showm™yc
);

331 
JUMP_FIELD
(
_IO_imbue_t
, 
__imbue
);

333 
gë_cﬁumn
;

334 
£t_cﬁumn
;

343 
	s_IO_FILE_∂us


345 
_IO_FILE
 
fûe
;

346 c⁄° 
_IO_jump_t
 *
vèbÀ
;

349 #ifde‡
_IO_USE_OLD_IO_FILE


353 
	s_IO_FILE_com∂ëe_∂us


355 
_IO_FILE_com∂ëe
 
fûe
;

356 c⁄° 
_IO_jump_t
 *
vèbÀ
;

361 
	s_IO_cookõ_fûe


363 
_IO_FILE_∂us
 
__Â
;

364 *
__cookõ
;

365 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_fun˘i⁄s
;

368 
_IO_FILE
 *
_IO_f›ícookõ
 (*
cookõ
, c⁄° *
mode
,

369 
_IO_cookõ_io_fun˘i⁄s_t
 
io_fun˘i⁄s
);

374 
_IO_FILE
 *
	t_IO_ITER
;

378 
_IO_swôch_to_maö_gë_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

379 
_IO_swôch_to_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

380 
_IO_swôch_to_gë_mode
 (
_IO_FILE
 *);

381 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_gë_mode
)

382 
_IO_öô_öã∫Æ
 (
_IO_FILE
 *, Ë
©åibuã_hiddí
;

383 
_IO_•utbackc
 (
_IO_FILE
 *, Ë
__THROW
;

384 
libc_hiddí_¥Ÿo
 (
_IO_•utbackc
)

385 
_IO_sungëc
 (
_IO_FILE
 *Ë
__THROW
;

386 
_IO_un_lök
 (
_IO_FILE_∂us
 *Ë
__THROW
;

387 
libc_hiddí_¥Ÿo
 (
_IO_un_lök
)

388 
_IO_lök_ö
 (
_IO_FILE_∂us
 *Ë
__THROW
;

389 
libc_hiddí_¥Ÿo
 (
_IO_lök_ö
)

390 
_IO_dﬂŒocbuf
 (
_IO_FILE
 *Ë
__THROW
;

391 
libc_hiddí_¥Ÿo
 (
_IO_dﬂŒocbuf
)

392 
_IO_unßve_m¨kîs
 (
_IO_FILE
 *Ë
__THROW
;

393 
libc_hiddí_¥Ÿo
 (
_IO_unßve_m¨kîs
)

394 
_IO_£tb
 (
_IO_FILE
 *, *, *, Ë
__THROW
;

395 
libc_hiddí_¥Ÿo
 (
_IO_£tb
)

396 
_IO_adju°_cﬁumn
 (, c⁄° *, Ë
__THROW
;

397 
libc_hiddí_¥Ÿo
 (
_IO_adju°_cﬁumn
)

398 
	#_IO_•uä
(
__Â
, 
__s
, 
__n
Ë
	`_IO_XSPUTN
 (__Â, __s, __n)

	)

400 
_IO_ssize_t
 
_IO_Àa°_wm¨kî
 (
_IO_FILE
 *, 
wch¨_t
 *Ë
	g__THROW
;

401 
libc_hiddí_¥Ÿo
 (
_IO_Àa°_wm¨kî
)

402 
_IO_swôch_to_maö_wgë_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

403 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_maö_wgë_¨ó
)

404 
_IO_swôch_to_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

405 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_wbackup_¨ó
)

406 
_IO_swôch_to_wgë_mode
 (
_IO_FILE
 *);

407 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_wgë_mode
)

408 
_IO_w£tb
 (
_IO_FILE
 *, 
wch¨_t
 *, wch¨_à*, Ë
__THROW
;

409 
libc_hiddí_¥Ÿo
 (
_IO_w£tb
)

410 
wöt_t
 
_IO_•utbackwc
 (
_IO_FILE
 *, wöt_tË
__THROW
;

411 
libc_hiddí_¥Ÿo
 (
_IO_•utbackwc
)

412 
wöt_t
 
_IO_sungëwc
 (
_IO_FILE
 *Ë
__THROW
;

413 
_IO_wdﬂŒocbuf
 (
_IO_FILE
 *Ë
__THROW
;

414 
libc_hiddí_¥Ÿo
 (
_IO_wdﬂŒocbuf
)

415 
_IO_unßve_wm¨kîs
 (
_IO_FILE
 *Ë
__THROW
;

416 
_IO_adju°_wcﬁumn
 (, c⁄° 
wch¨_t
 *, Ë
__THROW
;

417 
_IO_off64_t
 
gë_fûe_off£t
 (
_IO_FILE
 *
Â
);

421 
_IO_öô_m¨kî
 (
_IO_m¨kî
 *, 
_IO_FILE
 *);

422 
_IO_öô_wm¨kî
 (
_IO_m¨kî
 *, 
_IO_FILE
 *);

423 
_IO_ªmove_m¨kî
 (
_IO_m¨kî
 *Ë
__THROW
;

424 
_IO_m¨kî_dif„ªn˚
 (
_IO_m¨kî
 *, _IO_marker *)

425 
__THROW
;

426 
_IO_m¨kî_dñè
 (
_IO_m¨kî
 *Ë
__THROW
;

427 
_IO_wm¨kî_dñè
 (
_IO_m¨kî
 *Ë
__THROW
;

428 
_IO_£ekm¨k
 (
_IO_FILE
 *, 
_IO_m¨kî
 *, Ë
__THROW
;

429 
_IO_£ekwm¨k
 (
_IO_FILE
 *, 
_IO_m¨kî
 *, Ë
__THROW
;

433 
_IO_ITER
 
_IO_ôî_begö
 (Ë
__THROW
;

434 
libc_hiddí_¥Ÿo
 (
_IO_ôî_begö
)

435 
_IO_ITER
 
_IO_ôî_íd
 (Ë
__THROW
;

436 
libc_hiddí_¥Ÿo
 (
_IO_ôî_íd
)

437 
_IO_ITER
 
_IO_ôî_√xt
 (_IO_ITERË
__THROW
;

438 
libc_hiddí_¥Ÿo
 (
_IO_ôî_√xt
)

439 
_IO_FILE
 *
_IO_ôî_fûe
 (
_IO_ITER
Ë
__THROW
;

440 
libc_hiddí_¥Ÿo
 (
_IO_ôî_fûe
)

441 
_IO_li°_lock
 (Ë
__THROW
;

442 
libc_hiddí_¥Ÿo
 (
_IO_li°_lock
)

443 
_IO_li°_u∆ock
 (Ë
__THROW
;

444 
libc_hiddí_¥Ÿo
 (
_IO_li°_u∆ock
)

445 
_IO_li°_ª£éock
 (Ë
__THROW
;

446 
libc_hiddí_¥Ÿo
 (
_IO_li°_ª£éock
)

450 
_IO_deÁu…_undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

451 
_IO_deÁu…_uÊow
 (
_IO_FILE
 *);

452 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_uÊow
)

453 
wöt_t
 
_IO_wdeÁu…_uÊow
 (
_IO_FILE
 *);

454 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_uÊow
)

455 
_IO_deÁu…_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

456 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_dﬂŒoˇã
)

457 
_IO_wdeÁu…_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

458 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_dﬂŒoˇã
)

459 
_IO_deÁu…_föish
 (
_IO_FILE
 *, Ë
__THROW
;

460 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_föish
)

461 
_IO_wdeÁu…_föish
 (
_IO_FILE
 *, Ë
__THROW
;

462 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_föish
)

463 
_IO_deÁu…_pbackÁû
 (
_IO_FILE
 *, Ë
__THROW
;

464 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_pbackÁû
)

465 
wöt_t
 
_IO_wdeÁu…_pbackÁû
 (
_IO_FILE
 *, wöt_tË
__THROW
;

466 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_pbackÁû
)

467 
_IO_FILE
* 
_IO_deÁu…_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

468 
_IO_size_t
 
_IO_deÁu…_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

469 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_x•uä
)

470 
_IO_size_t
 
_IO_wdeÁu…_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

471 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_x•uä
)

472 
_IO_size_t
 
_IO_deÁu…_xsgën
 (
_IO_FILE
 *, *, _IO_size_t);

473 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_xsgën
)

474 
_IO_size_t
 
_IO_wdeÁu…_xsgën
 (
_IO_FILE
 *, *, _IO_size_t);

475 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_xsgën
)

476 
_IO_off64_t
 
_IO_deÁu…_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , )

477 
__THROW
;

478 
_IO_off64_t
 
_IO_deÁu…_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

479 
_IO_ssize_t
 
_IO_deÁu…_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

480 
_IO_ssize_t
 
_IO_deÁu…_ªad
 (
_IO_FILE
 *, *, _IO_ssize_t);

481 
_IO_deÁu…_°©
 (
_IO_FILE
 *, *Ë
__THROW
;

482 
_IO_off64_t
 
_IO_deÁu…_£ek
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

483 
_IO_deÁu…_sync
 (
_IO_FILE
 *Ë
__THROW
;

484 
	#_IO_deÁu…_˛o£
 ((
_IO_˛o£_t
Ë
_IO_deÁu…_sync
)

	)

485 
_IO_deÁu…_showm™yc
 (
_IO_FILE
 *Ë
__THROW
;

486 
_IO_deÁu…_imbue
 (
_IO_FILE
 *, *Ë
__THROW
;

488 c⁄° 
_IO_jump_t
 
_IO_fûe_jumps
;

489 
libc_hiddí_¥Ÿo
 (
_IO_fûe_jumps
)

490 c⁄° 
_IO_jump_t
 
_IO_fûe_jumps_mm≠
 
©åibuã_hiddí
;

491 c⁄° 
_IO_jump_t
 
_IO_fûe_jumps_maybe_mm≠
 
©åibuã_hiddí
;

492 c⁄° 
_IO_jump_t
 
_IO_wfûe_jumps
;

493 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_jumps
)

494 c⁄° 
_IO_jump_t
 
_IO_wfûe_jumps_mm≠
 
©åibuã_hiddí
;

495 c⁄° 
_IO_jump_t
 
_IO_wfûe_jumps_maybe_mm≠
 
©åibuã_hiddí
;

496 c⁄° 
_IO_jump_t
 
_IO_ﬁd_fûe_jumps
 
©åibuã_hiddí
;

497 c⁄° 
_IO_jump_t
 
_IO_°ªambuf_jumps
;

498 c⁄° 
_IO_jump_t
 
_IO_ﬁd_¥oc_jumps
 
©åibuã_hiddí
;

499 c⁄° 
_IO_jump_t
 
_IO_°r_jumps
 
©åibuã_hiddí
;

500 c⁄° 
_IO_jump_t
 
_IO_w°r_jumps
 
©åibuã_hiddí
;

501 c⁄° 
_IO_codecvt
 
__libio_codecvt
 
©åibuã_hiddí
;

502 
_IO_do_wrôe
 (
_IO_FILE
 *, c⁄° *, 
_IO_size_t
);

503 
libc_hiddí_¥Ÿo
 (
_IO_do_wrôe
)

504 
_IO_√w_do_wrôe
 (
_IO_FILE
 *, c⁄° *, 
_IO_size_t
);

505 
_IO_ﬁd_do_wrôe
 (
_IO_FILE
 *, c⁄° *, 
_IO_size_t
);

506 
_IO_wdo_wrôe
 (
_IO_FILE
 *, c⁄° 
wch¨_t
 *, 
_IO_size_t
);

507 
libc_hiddí_¥Ÿo
 (
_IO_wdo_wrôe
)

508 
_IO_Êush_Æl_lockp
 ();

509 
_IO_Êush_Æl
 ();

510 
libc_hiddí_¥Ÿo
 (
_IO_Êush_Æl
)

511 
_IO_˛ónup
 ();

512 
_IO_Êush_Æl_löebuf„ªd
 ();

513 
libc_hiddí_¥Ÿo
 (
_IO_Êush_Æl_löebuf„ªd
)

514 
_IO_√w_fgëpos
 (
_IO_FILE
 *, 
_IO_Âos_t
 *);

515 
_IO_ﬁd_fgëpos
 (
_IO_FILE
 *, 
_IO_Âos_t
 *);

516 
_IO_√w_f£ços
 (
_IO_FILE
 *, c⁄° 
_IO_Âos_t
 *);

517 
_IO_ﬁd_f£ços
 (
_IO_FILE
 *, c⁄° 
_IO_Âos_t
 *);

518 
_IO_√w_fgëpos64
 (
_IO_FILE
 *, 
_IO_Âos64_t
 *);

519 
_IO_ﬁd_fgëpos64
 (
_IO_FILE
 *, 
_IO_Âos64_t
 *);

520 
_IO_√w_f£ços64
 (
_IO_FILE
 *, c⁄° 
_IO_Âos64_t
 *);

521 
_IO_ﬁd_f£ços64
 (
_IO_FILE
 *, c⁄° 
_IO_Âos64_t
 *);

522 
_IO_ﬁd_öô
 (
_IO_FILE
 *
Â
, 
Êags
Ë
__THROW
;

525 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


526 
	#_IO_do_Êush
(
_f
) \

527 ((
_f
)->
_mode
 <= 0 \

528 ? 
	`_IO_do_wrôe
(
_f
, (_f)->
_IO_wrôe_ba£
, \

529 (
_f
)->
_IO_wrôe_±r
-(_f)->
_IO_wrôe_ba£
) \

530 : 
	`_IO_wdo_wrôe
(
_f
, (_f)->
_wide_d©a
->
_IO_wrôe_ba£
, \

531 ((
_f
)->
_wide_d©a
->
_IO_wrôe_±r
 \

532 - (
_f
)->
_wide_d©a
->
_IO_wrôe_ba£
)))

	)

534 
	#_IO_do_Êush
(
_f
) \

535 
	`_IO_do_wrôe
(
_f
, (_f)->
_IO_wrôe_ba£
, \

536 (
_f
)->
_IO_wrôe_±r
-(_f)->
_IO_wrôe_ba£
)

	)

538 
	#_IO_ﬁd_do_Êush
(
_f
) \

539 
	`_IO_ﬁd_do_wrôe
(
_f
, (_f)->
_IO_wrôe_ba£
, \

540 (
_f
)->
_IO_wrôe_±r
-(_f)->
_IO_wrôe_ba£
)

	)

541 
	#_IO_ö_put_mode
(
_Â
Ë((_Â)->
_Êags
 & 
_IO_CURRENTLY_PUTTING
)

	)

542 
	#_IO_mask_Êags
(
Â
, 
f
, 
mask
) \

543 ((
Â
)->
_Êags
 = ((Â)->_Êag†& ~(
mask
)Ë| ((
f
Ë& (mask)))

	)

544 
	#_IO_£tg
(
Â
, 
eb
, 
g
, 
eg
Ë((Â)->
_IO_ªad_ba£
 = (eb),\

545 (
Â
)->
_IO_ªad_±r
 = (
g
), (Â)->
_IO_ªad_íd
 = (
eg
))

	)

546 
	#_IO_w£tg
(
Â
, 
eb
, 
g
, 
eg
Ë((Â)->
_wide_d©a
->
_IO_ªad_ba£
 = (eb),\

547 (
Â
)->
_wide_d©a
->
_IO_ªad_±r
 = (
g
), \

548 (
Â
)->
_wide_d©a
->
_IO_ªad_íd
 = (
eg
))

	)

549 
	#_IO_£ç
(
__Â
, 
__p
, 
__ï
) \

550 ((
__Â
)->
_IO_wrôe_ba£
 = (__Â)->
_IO_wrôe_±r
 \

551 
__p
, (
__Â
)->
_IO_wrôe_íd
 = (
__ï
))

	)

552 
	#_IO_w£ç
(
__Â
, 
__p
, 
__ï
) \

553 ((
__Â
)->
_wide_d©a
->
_IO_wrôe_ba£
 \

554 (
__Â
)->
_wide_d©a
->
_IO_wrôe_±r
 = 
__p
, \

555 (
__Â
)->
_wide_d©a
->
_IO_wrôe_íd
 = (
__ï
))

	)

556 
	#_IO_have_backup
(
Â
Ë((Â)->
_IO_ßve_ba£
 !
NULL
)

	)

557 
	#_IO_have_wbackup
(
Â
Ë((Â)->
_wide_d©a
->
_IO_ßve_ba£
 !
NULL
)

	)

558 
	#_IO_ö_backup
(
Â
Ë((Â)->
_Êags
 & 
_IO_IN_BACKUP
)

	)

559 
	#_IO_have_m¨kîs
(
Â
Ë((Â)->
_m¨kîs
 !
NULL
)

	)

560 
	#_IO_bÀn
(
Â
Ë((Â)->
_IO_buf_íd
 - (Â)->
_IO_buf_ba£
)

	)

561 
	#_IO_wbÀn
(
Â
Ë((Â)->
_wide_d©a
->
_IO_buf_íd
 \

562 - (
Â
)->
_wide_d©a
->
_IO_buf_ba£
)

	)

566 
_IO_fûe_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

567 
libc_hiddí_¥Ÿo
 (
_IO_fûe_dﬂŒoˇã
)

568 
_IO_FILE
* 
_IO_fûe_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

569 
libc_hiddí_¥Ÿo
 (
_IO_fûe_£tbuf
)

570 
_IO_off64_t
 
_IO_fûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

571 
libc_hiddí_¥Ÿo
 (
_IO_fûe_£ekoff
)

572 
_IO_off64_t
 
_IO_fûe_£ekoff_mm≠
 (
_IO_FILE
 *, _IO_off64_t, , )

573 
__THROW
;

574 
_IO_size_t
 
_IO_fûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

575 
libc_hiddí_¥Ÿo
 (
_IO_fûe_x•uä
)

576 
_IO_size_t
 
_IO_fûe_xsgën
 (
_IO_FILE
 *, *, _IO_size_t);

577 
libc_hiddí_¥Ÿo
 (
_IO_fûe_xsgën
)

578 
_IO_fûe_°©
 (
_IO_FILE
 *, *Ë
__THROW
;

579 
libc_hiddí_¥Ÿo
 (
_IO_fûe_°©
)

580 
_IO_fûe_˛o£
 (
_IO_FILE
 *Ë
__THROW
;

581 
libc_hiddí_¥Ÿo
 (
_IO_fûe_˛o£
)

582 
_IO_fûe_˛o£_mm≠
 (
_IO_FILE
 *Ë
__THROW
;

583 
_IO_fûe_undîÊow
 (
_IO_FILE
 *);

584 
libc_hiddí_¥Ÿo
 (
_IO_fûe_undîÊow
)

585 
_IO_fûe_undîÊow_mm≠
 (
_IO_FILE
 *);

586 
_IO_fûe_undîÊow_maybe_mm≠
 (
_IO_FILE
 *);

587 
_IO_fûe_ovîÊow
 (
_IO_FILE
 *, );

588 
libc_hiddí_¥Ÿo
 (
_IO_fûe_ovîÊow
)

589 
	#_IO_fûe_is_›í
(
__Â
Ë((__Â)->
_fûío
 !-1)

	)

590 
_IO_FILE
* 
_IO_fûe_©èch
 (_IO_FILE *, );

591 
libc_hiddí_¥Ÿo
 (
_IO_fûe_©èch
)

592 
_IO_FILE
* 
_IO_fûe_›í
 (_IO_FILE *, const *, , , , );

593 
libc_hiddí_¥Ÿo
 (
_IO_fûe_›í
)

594 
_IO_FILE
* 
_IO_fûe_f›í
 (_IO_FILE *, const *, const *, );

595 
libc_hiddí_¥Ÿo
 (
_IO_fûe_f›í
)

596 
_IO_ssize_t
 
_IO_fûe_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

597 
_IO_ssize_t
 
_IO_fûe_ªad
 (
_IO_FILE
 *, *, _IO_ssize_t);

598 
libc_hiddí_¥Ÿo
 (
_IO_fûe_ªad
)

599 
_IO_fûe_sync
 (
_IO_FILE
 *);

600 
libc_hiddí_¥Ÿo
 (
_IO_fûe_sync
)

601 
_IO_fûe_˛o£_ô
 (
_IO_FILE
 *);

602 
libc_hiddí_¥Ÿo
 (
_IO_fûe_˛o£_ô
)

603 
_IO_off64_t
 
_IO_fûe_£ek
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

604 
libc_hiddí_¥Ÿo
 (
_IO_fûe_£ek
)

605 
_IO_fûe_föish
 (
_IO_FILE
 *, );

606 
libc_hiddí_¥Ÿo
 (
_IO_fûe_föish
)

608 
_IO_FILE
* 
_IO_√w_fûe_©èch
 (_IO_FILE *, );

609 
_IO_√w_fûe_˛o£_ô
 (
_IO_FILE
 *);

610 
_IO_√w_fûe_föish
 (
_IO_FILE
 *, );

611 
_IO_FILE
* 
_IO_√w_fûe_f›í
 (_IO_FILE *, const *, const *,

613 
_IO_no_öô
 (
_IO_FILE
 *, , , 
_IO_wide_d©a
 *,

614 c⁄° 
_IO_jump_t
 *Ë
__THROW
;

615 
_IO_√w_fûe_öô_öã∫Æ
 (
_IO_FILE_∂us
 *)

616 
__THROW
 
©åibuã_hiddí
;

617 
_IO_FILE
* 
_IO_√w_fûe_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

618 
_IO_FILE
* 
_IO_fûe_£tbuf_mm≠
 (_IO_FILE *, *, 
_IO_ssize_t
);

619 
_IO_√w_fûe_sync
 (
_IO_FILE
 *);

620 
_IO_√w_fûe_undîÊow
 (
_IO_FILE
 *);

621 
_IO_√w_fûe_ovîÊow
 (
_IO_FILE
 *, );

622 
_IO_off64_t
 
_IO_√w_fûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

623 
_IO_ssize_t
 
_IO_√w_fûe_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

624 
_IO_size_t
 
_IO_√w_fûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

626 
_IO_FILE
* 
_IO_ﬁd_fûe_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

627 
_IO_off64_t
 
_IO_ﬁd_fûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

628 
_IO_size_t
 
_IO_ﬁd_fûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

629 
_IO_ﬁd_fûe_undîÊow
 (
_IO_FILE
 *);

630 
_IO_ﬁd_fûe_ovîÊow
 (
_IO_FILE
 *, );

631 
_IO_ﬁd_fûe_öô_öã∫Æ
 (
_IO_FILE_∂us
 *)

632 
__THROW
 
©åibuã_hiddí
;

633 
_IO_FILE
* 
_IO_ﬁd_fûe_©èch
 (_IO_FILE *, );

634 
_IO_FILE
* 
_IO_ﬁd_fûe_f›í
 (_IO_FILE *, const *, const *);

635 
_IO_ssize_t
 
_IO_ﬁd_fûe_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

636 
_IO_ﬁd_fûe_sync
 (
_IO_FILE
 *);

637 
_IO_ﬁd_fûe_˛o£_ô
 (
_IO_FILE
 *);

638 
_IO_ﬁd_fûe_föish
 (
_IO_FILE
 *, );

640 
_IO_wfûe_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

641 
_IO_size_t
 
_IO_wfûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

642 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_x•uä
)

643 
_IO_FILE
* 
_IO_wfûe_£tbuf
 (_IO_FILE *, 
wch¨_t
 *, 
_IO_ssize_t
);

644 
wöt_t
 
_IO_wfûe_sync
 (
_IO_FILE
 *);

645 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_sync
)

646 
wöt_t
 
_IO_wfûe_undîÊow
 (
_IO_FILE
 *);

647 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_undîÊow
)

648 
wöt_t
 
_IO_wfûe_ovîÊow
 (
_IO_FILE
 *, wint_t);

649 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_ovîÊow
)

650 
_IO_off64_t
 
_IO_wfûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

651 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_£ekoff
)

654 
_IO_FILE
* 
_IO_¥oc_›í
 (_IO_FILE *, const *, const *)

655 
__THROW
;

656 
_IO_FILE
* 
_IO_√w_¥oc_›í
 (_IO_FILE *, const *, const *)

657 
__THROW
;

658 
_IO_FILE
* 
_IO_ﬁd_¥oc_›í
 (_IO_FILE *, const *, const *);

659 
_IO_¥oc_˛o£
 (
_IO_FILE
 *Ë
__THROW
;

660 
_IO_√w_¥oc_˛o£
 (
_IO_FILE
 *Ë
__THROW
;

661 
_IO_ﬁd_¥oc_˛o£
 (
_IO_FILE
 *);

664 
_IO_°r_undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

665 
libc_hiddí_¥Ÿo
 (
_IO_°r_undîÊow
)

666 
_IO_°r_ovîÊow
 (
_IO_FILE
 *, Ë
__THROW
;

667 
libc_hiddí_¥Ÿo
 (
_IO_°r_ovîÊow
)

668 
_IO_°r_pbackÁû
 (
_IO_FILE
 *, Ë
__THROW
;

669 
libc_hiddí_¥Ÿo
 (
_IO_°r_pbackÁû
)

670 
_IO_off64_t
 
_IO_°r_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , Ë
__THROW
;

671 
libc_hiddí_¥Ÿo
 (
_IO_°r_£ekoff
)

672 
_IO_°r_föish
 (
_IO_FILE
 *, Ë
__THROW
;

675 
	g_IO_°rfûe_
;

676 
_IO_ssize_t
 
_IO_°r_cou¡
 (
_IO_FILE
 *Ë
__THROW
;

679 
_IO_w°r_öô_°©ic
 (
_IO_FILE
 *, 
wch¨_t
 *, 
_IO_size_t
, wchar_t *)

680 
__THROW
;

681 
_IO_ssize_t
 
_IO_w°r_cou¡
 (
_IO_FILE
 *Ë
__THROW
;

682 
_IO_wöt_t
 
_IO_w°r_ovîÊow
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

683 
_IO_wöt_t
 
_IO_w°r_undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

684 
_IO_off64_t
 
_IO_w°r_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , )

685 
__THROW
;

686 
_IO_wöt_t
 
_IO_w°r_pbackÁû
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

687 
_IO_w°r_föish
 (
_IO_FILE
 *, Ë
__THROW
;

689 
_IO_va•rötf
 (**
ªsu…_±r
, c⁄° *
f‹m©
,

690 
_IO_va_li°
 
¨gs
Ë
__THROW
;

691 
_IO_vd¥ötf
 (
d
, c⁄° *
f‹m©
, 
_IO_va_li°
 
¨g
);

692 
_IO_v¢¥ötf
 (*
°rög
, 
_IO_size_t
 
maxÀn
,

693 c⁄° *
f‹m©
, 
_IO_va_li°
 
¨gs
Ë
__THROW
;

696 
_IO_size_t
 
_IO_gëlöe
 (
_IO_FILE
 *,*, _IO_size_t, , );

697 
libc_hiddí_¥Ÿo
 (
_IO_gëlöe
)

698 
_IO_size_t
 
_IO_gëlöe_öfo
 (
_IO_FILE
 *,*, _IO_size_t,

700 
libc_hiddí_¥Ÿo
 (
_IO_gëlöe_öfo
)

701 
_IO_ssize_t
 
_IO_gëdñim
 (**, 
_IO_size_t
 *, , 
_IO_FILE
 *);

702 
_IO_size_t
 
_IO_gëwlöe
 (
_IO_FILE
 *,
wch¨_t
 *, _IO_size_t, 
wöt_t
, );

703 
_IO_size_t
 
_IO_gëwlöe_öfo
 (
_IO_FILE
 *,
wch¨_t
 *, _IO_size_t,

704 
wöt_t
, , wint_t *);

706 
_IO_FILE_∂us
 *
_IO_li°_Æl
;

707 
libc_hiddí_¥Ÿo
 (
_IO_li°_Æl
)

708 (*
_IO_˛ónup_ªgi°øti⁄_√eded
) ();

710 
_IO_°r_öô_°©ic_öã∫Æ
 (
_IO_°rfûe_
 *, *,

711 
_IO_size_t
, *Ë
__THROW
;

712 
_IO_off64_t
 
_IO_£ekoff_u∆ocked
 (
_IO_FILE
 *, _IO_off64_t, , )

713 
©åibuã_hiddí
;

714 
_IO_off64_t
 
_IO_£ekpos_u∆ocked
 (
_IO_FILE
 *, _IO_off64_t, )

715 
©åibuã_hiddí
;

717 #i‚de‡
EOF


718 
	#EOF
 (-1)

	)

720 #i‚de‡
NULL


721 #i‡
deföed
 
__GNUG__
 && \

722 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

723 
	#NULL
 (
__nuŒ
)

	)

725 #i‡!
deföed
(
__˝lu•lus
)

726 
	#NULL
 ((*)0)

	)

728 
	#NULL
 (0)

	)

733 #i‡
_G_HAVE_MMAP


735 
	~<uni°d.h
>

736 
	~<f˙é.h
>

737 
	~<sys/mm™.h
>

738 
	~<sys/∑øm.h
>

740 #i‡!
deföed
(
MAP_ANONYMOUS
Ë&& deföed(
MAP_ANON
)

741 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

744 #i‡!
deföed
(
MAP_ANONYMOUS
Ë|| !deföed(
EXEC_PAGESIZE
)

745 #unde‡
_G_HAVE_MMAP


746 
	#_G_HAVE_MMAP
 0

	)

751 #i‡
_G_HAVE_MMAP


753 #ifde‡
_LIBC


755 
	#mm≠
 
__mm≠


	)

756 
	#munm≠
 
__munm≠


	)

757 
	#·runˇã
 
__·runˇã


	)

761 #i‚de‡
OS_FSTAT


762 
	#OS_FSTAT
 
f°©


	)

764 
_IO_vsˇnf
 (c⁄° *, 
_IO_va_li°
Ë
__THROW
;

767 #i‚de‡
_IO_pos_BAD


768 
	#_IO_pos_BAD
 ((
_IO_off64_t
Ë-1)

	)

771 #i‚de‡
_IO_pos_adju°


772 
	#_IO_pos_adju°
(
pos
, 
dñè
Ë(’osË+(dñè))

	)

775 #i‚de‡
_IO_pos_0


776 
	#_IO_pos_0
 ((
_IO_off64_t
Ë0)

	)

779 #ifde‡
__˝lu•lus


783 #ifde‡
_IO_MTSAFE_IO


785 #ifde‡
_IO_USE_OLD_IO_FILE


786 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

787 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

788 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

789 0, 
_IO_pos_BAD
, 0, 0, { 0 }, &
_IO_°dfûe_
##
FD
##
_lock
 }

	)

791 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


792 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

793 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

794 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

795 0, 
_IO_pos_BAD
, 0, 0, { 0 }, &
_IO_°dfûe_
##
FD
##
_lock
, _IO_pos_BAD,\

796 
NULL
, 
WDP
, 0 }

	)

798 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

799 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

800 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

801 0, 
_IO_pos_BAD
, 0, 0, { 0 }, &
_IO_°dfûe_
##
FD
##
_lock
, _IO_pos_BAD,\

802 0 }

	)

806 #ifde‡
_IO_USE_OLD_IO_FILE


807 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

808 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

809 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

810 0, 
_IO_pos_BAD
 }

	)

812 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


813 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

814 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

815 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

816 0, 
_IO_pos_BAD
, 0, 0, { 0 }, 0, _IO_pos_BAD, \

817 
NULL
, 
WDP
, 0 }

	)

819 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

820 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

821 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

822 0, 
_IO_pos_BAD
, 0, 0, { 0 }, 0, _IO_pos_BAD, \

823 0 }

	)

828 
	#_IO_va_°¨t
(
¨gs
, 
œ°
Ë
	`va_°¨t
◊rgs,Üa°)

	)

830 
_IO_Áke_°diobuf
 
_IO_°dö_buf
, 
_IO_°dout_buf
, 
_IO_°dîr_buf
;

833 
	#COERCE_FILE
(
FILE
Ë

	)

836 
	#COERCE_FILE
(
FILE
) \

837 (((
FILE
)->
_IO_fûe_Êags
 & 
_IO_MAGIC_MASK
Ë=
_OLD_MAGIC_MASK
 \

838 && (
FILE
Ë*(FILE**)&((*)
Â
)[1])

	)

841 #ifde‡
EINVAL


842 
	#MAYBE_SET_EINVAL
 
	`__£t_î∫o
 (
EINVAL
)

	)

844 
	#MAYBE_SET_EINVAL


	)

847 #ifde‡
IO_DEBUG


848 
	#CHECK_FILE
(
FILE
, 
RET
) \

849 i‡((
FILE
Ë=
NULL
Ë{ 
MAYBE_SET_EINVAL
;  
RET
; } \

850 { 
	`COERCE_FILE
(
FILE
); \

851 i‡(((
FILE
)->
_IO_fûe_Êags
 & 
_IO_MAGIC_MASK
Ë!
_IO_MAGIC
) \

852 { 
MAYBE_SET_EINVAL
;  
RET
; }}

	)

854 
	#CHECK_FILE
(
FILE
, 
RET
Ë
	`COERCE_FILE
 (FILE)

	)

857 
ölöe
 

858 
__©åibuã__
 ((
__Æways_ölöe__
))

859 
_IO_acquúe_lock_f˘
 (
_IO_FILE
 **
p
)

861 
_IO_FILE
 *
	gÂ
 = *
p
;

862 i‡((
	gÂ
->
	g_Êags
 & 
	g_IO_USER_LOCK
) == 0)

863 
_IO_fu∆ockfûe
 (
Â
);

866 
ölöe
 

867 
__©åibuã__
 ((
__Æways_ölöe__
))

868 
_IO_acquúe_lock_˛ór_Êags2_f˘
 (
_IO_FILE
 **
p
)

870 
_IO_FILE
 *
	gÂ
 = *
p
;

871 
	gÂ
->
	g_Êags2
 &~(
_IO_FLAGS2_FORTIFY
 | 
_IO_FLAGS2_SCANF_STD
);

872 i‡((
	gÂ
->
	g_Êags
 & 
	g_IO_USER_LOCK
) == 0)

873 
_IO_fu∆ockfûe
 (
Â
);

876 #i‡!
deföed
 
_IO_MTSAFE_IO
 && 
IS_IN
 (
libc
)

877 
	#_IO_acquúe_lock
(
_Â
) \

879 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 = 
NULL


	)

880 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

882 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 = (
_Â
)

	)

883 
	#_IO_ªÀa£_lock
(
_Â
) \

884 i‡(
_IO_acquúe_lock_fûe
 !
NULL
) \

885 
_IO_acquúe_lock_fûe
->
_Êags2
 &~(
_IO_FLAGS2_FORTIFY
 \

886 | 
_IO_FLAGS2_SCANF_STD
); \

887 } 0)

	)

892 
symbﬁ_£t_de˛¨e
 (
__libc_IO_vèbÀs
)

896 
	#libio_vèbÀ
 
	`__©åibuã__
 ((
	`£˘i⁄
 ("__libc_IO_vèbÀs")))

	)

898 #ifde‡
SHARED


902 (*
IO_ac˚±_f‹eign_vèbÀs
Ë(Ë
©åibuã_hiddí
;

906 
ölöe
 

907 
IO_£t_ac˚±_f‹eign_vèbÀs
 ((*
Êag
) ())

909 #ifde‡
PTR_MANGLE


910 
PTR_MANGLE
 (
Êag
);

912 
©omic_°‹e_ªœxed
 (&
IO_ac˚±_f‹eign_vèbÀs
, 
Êag
);

918 
ölöe
 

919 
IO_£t_ac˚±_f‹eign_vèbÀs
 ((*
Êag
) ())

927 
_IO_vèbÀ_check
 (Ë
	g©åibuã_hiddí
;

931 
ölöe
 c⁄° 
_IO_jump_t
 *

932 
IO_vÆid©e_vèbÀ
 (c⁄° 
_IO_jump_t
 *
vèbÀ
)

936 
uöçå_t
 
	g£˘i⁄_Àngth
 = 
__°›___libc_IO_vèbÀs
 - 
__°¨t___libc_IO_vèbÀs
;

937 c⁄° *
	g±r
 = (c⁄° *Ë
vèbÀ
;

938 
uöçå_t
 
	goff£t
 = 
±r
 - 
__°¨t___libc_IO_vèbÀs
;

939 i‡(
__glibc_u∆ikñy
 (
off£t
 >
£˘i⁄_Àngth
))

942 
_IO_vèbÀ_check
 ();

943  
	gvèbÀ
;

	@../test-skeleton.c

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<gë›t.h
>

24 
	~<mÆloc.h
>

25 
	~<∑ths.h
>

26 
	~<£¨ch.h
>

27 
	~<sig«l.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<uni°d.h
>

32 
	~<sys/ªsour˚.h
>

33 
	~<sys/waô.h
>

34 
	~<sys/∑øm.h
>

35 
	~<time.h
>

40 #i‚de‡
TEST_FUNCTION


41 
	#TEST_FUNCTION
 
	`do_ã°
 (
¨gc
, 
¨gv
)

	)

44 #i‚de‡
TEST_DATA_LIMIT


45 
	#TEST_DATA_LIMIT
 (64 << 20Ë

	)

48 #i‚de‡
TIMEOUT


51 
	#TIMEOUT
 20

	)

54 
	#OPT_DIRECT
 1000

	)

55 
	#OPT_TESTDIR
 1001

	)

57 
›ti⁄
 
	g›ti⁄s
[] =

59 #ifde‡
CMDLINE_OPTIONS


60 
CMDLINE_OPTIONS


62 { "dúe˘", 
no_¨gumít
, 
NULL
, 
OPT_DIRECT
 },

63 { "ã°-dú", 
ªquúed_¨gumít
, 
NULL
, 
OPT_TESTDIR
 },

64 { 
NULL
, 0, NULL, 0 }

68 
pid_t
 
	gpid
;

71 c⁄° *
	gã°_dú
;

74 
	$oom_îr‹
 (c⁄° *
‚
, 
size_t
 
size
)

76 
	`¥ötf
 ("%s: u«bÀÅÿÆloˇã %zu byãs: %m\n", 
‚
, 
size
);

77 
	`exô
 (1);

78 
	}
}

81 
__©åibuã__
 ((
unu£d
))

83 
	$xmÆloc
 (
size_t
 
n
)

85 *
p
;

87 
p
 = 
	`mÆloc
 (
n
);

88 i‡(
p
 =
NULL
)

89 
	`oom_îr‹
 ("mÆloc", 
n
);

90  
p
;

91 
	}
}

94 
__©åibuã__
 ((
unu£d
))

96 
	$xˇŒoc
 (
size_t
 
n
, size_à
s
)

98 *
p
;

100 
p
 = 
	`ˇŒoc
 (
n
, 
s
);

101 i‡(
p
 =
NULL
)

102 
	`oom_îr‹
 ("ˇŒoc", 
n
 * 
s
);

103  
p
;

104 
	}
}

108 
__©åibuã__
 ((
unu£d
))

110 
	$xªÆloc
 (*
p
, 
size_t
 
n
)

112 *
ªsu…
 = 
	`ªÆloc
 (
p
, 
n
);

113 i‡(
ªsu…
 =
NULL
 && (
n
 > 0 || 
p
 == NULL))

114 
	`oom_îr‹
 ("ªÆloc", 
n
);

115  
ªsu…
;

116 
	}
}

121 
__©åibuã__
 ((
unu£d
))

122 
	$wrôe_mesßge
 (c⁄° *
mesßge
)

124 
ssize_t
 
unu£d
 
	`__©åibuã__
 ((unused));

125 
unu£d
 = 
	`wrôe
 (
STDOUT_FILENO
, 
mesßge
, 
	`°æí
 (message));

126 
	}
}

129 
	sãmp_«me_li°


131 
qñem
 
	mq
;

132 *
	m«me
;

133 } *
	gãmp_«me_li°
;

137 
__©åibuã__
 ((
unu£d
))

138 
	$add_ãmp_fûe
 (c⁄° *
«me
)

140 
ãmp_«me_li°
 *
√wp


141 (
ãmp_«me_li°
 *Ë
	`xˇŒoc
 ( (*
√wp
), 1);

142 *
√w«me
 = 
	`°rdup
 (
«me
);

143 i‡(
√w«me
 !
NULL
)

145 
√wp
->
«me
 = 
√w«me
;

146 i‡(
ãmp_«me_li°
 =
NULL
)

147 
ãmp_«me_li°
 = (ãmp_«me_li° *Ë&
√wp
->
q
;

149 
	`ösque
 (
√wp
, 
ãmp_«me_li°
);

152 
	`‰ì
 (
√wp
);

153 
	}
}

157 
	$dñëe_ãmp_fûes
 ()

159 
ãmp_«me_li°
 !
NULL
)

161 
	`ªmove
 (
ãmp_«me_li°
->
«me
);

162 
	`‰ì
 (
ãmp_«me_li°
->
«me
);

164 
ãmp_«me_li°
 *
√xt


165 (
ãmp_«me_li°
 *Ëãmp_«me_li°->
q
.
q_f‹w
;

166 
	`‰ì
 (
ãmp_«me_li°
);

167 
ãmp_«me_li°
 = 
√xt
;

169 
	}
}

176 
__©åibuã__
 ((
unu£d
))

177 
	$¸óã_ãmp_fûe
 (c⁄° *
ba£
, **
fûíame
)

179 *
‚ame
;

180 
fd
;

182 
‚ame
 = (*Ë
	`xmÆloc
 (
	`°æí
 (
ã°_dú
Ë+ 1 + såÀ¿(
ba£
)

184 
	`°r˝y
 (
	`°p˝y
 (°p˝y (°p˝y (
‚ame
, 
ã°_dú
), "/"), 
ba£
), "XXXXXX");

186 
fd
 = 
	`mk°emp
 (
‚ame
);

187 i‡(
fd
 == -1)

189 
	`¥ötf
 ("ˇ¬Ÿ o≥¿ãmp‹¨y fûê'%s': %m\n", 
‚ame
);

190 
	`‰ì
 (
‚ame
);

194 
	`add_ãmp_fûe
 (
‚ame
);

195 i‡(
fûíame
 !
NULL
)

196 *
fûíame
 = 
‚ame
;

198 
	`‰ì
 (
‚ame
);

200  
fd
;

201 
	}
}

205 
__©åibuã__
 ((
n‹ëu∫
))

206 
sig«l_h™dÀr
 (
sig
 
__©åibuã__
 ((
unu£d
)))

208 
	gkûÀd
;

209 
	g°©us
;

211 
as£π
 (
pid
 > 1);

213 
kûl
 (-
pid
, 
SIGKILL
);

215 
kûl
 (
pid
, 
SIGKILL
);

218 
	gi
;

219 
	gi
 = 0; i < 5; ++i)

221 
	gkûÀd
 = 
waôpid
 (
pid
, &
°©us
, 
WNOHANG
|
WUNTRACED
);

222 i‡(
	gkûÀd
 != 0)

229 
time•ec
 
	gts
;

230 
	gts
.
	gtv_£c
 = 0;

231 
	gts
.
	gtv_n£c
 = 100000000;

232 
«no¶ìp
 (&
ts
, 
NULL
);

234 i‡(
	gkûÀd
 !0 && 
kûÀd
 !
pid
)

236 
¥ötf
 ("FailedÅo killÅestÖrocess: %m\n");

237 
exô
 (1);

240 #ifde‡
CLEANUP_HANDLER


241 
	gCLEANUP_HANDLER
;

244 i‡(
	gsig
 =
SIGINT
)

246 
sig«l
 (
sig
, 
SIG_DFL
);

247 
øi£
 (
sig
);

251 #ifde‡
EXPECTED_SIGNAL


252 i‡(
	gEXPECTED_SIGNAL
 =
SIGALRM
)

253 
exô
 (0);

256 i‡(
	gkûÀd
 =0 || (
WIFSIGNALED
 (
°©us
Ë&& 
WTERMSIG
 (°©usË=
SIGKILL
))

257 
puts
 ("Timed out: killedÅhe childÖrocess");

258 i‡(
WIFSTOPPED
 (
°©us
))

259 
¥ötf
 ("Timed out:Åhe childÖrocess was %s\n",

260 
°rsig«l
 (
WSTOPSIG
 (
°©us
)));

261 i‡(
WIFSIGNALED
 (
°©us
))

262 
¥ötf
 ("Timed out:Åhe childÖrocess got signal %s\n",

263 
°rsig«l
 (
WTERMSIG
 (
°©us
)));

265 
¥ötf
 ("Timed out: killedÅhe childÖrocess but itÉxited %d\n",

266 
WEXITSTATUS
 (
°©us
));

269 
exô
 (1);

274 
__©åibuã__
 ((
unu£d
))

275 
	$ign‹e_°dîr
 ()

277 
fd
 = 
	`›í
 (
_PATH_DEVNULL
, 
O_WRONLY
);

278 i‡(
fd
 == -1)

279 
	`˛o£
 (
STDERR_FILENO
);

282 
	`dup2
 (
fd
, 
STDERR_FILENO
);

283 
	`˛o£
 (
fd
);

285 
	`£ãnv
 ("LIBC_FATAL_STDERR_", "1", 1);

286 
	}
}

291 
__©åibuã__
 ((
unu£d
))

292 
	$£t_f‹tify_h™dÀr
 ((*
h™dÀr
Ë(
sig
))

294 
siga˘i⁄
 
ß
;

296 
ß
.
ß_h™dÀr
 = 
h™dÀr
;

297 
ß
.
ß_Êags
 = 0;

298 
	`sigem±y£t
 (&
ß
.
ß_mask
);

300 
	`siga˘i⁄
 (
SIGABRT
, &
ß
, 
NULL
);

301 
	`ign‹e_°dîr
 ();

302 
	}
}

306 
	$ußge
 ()

308 
size_t
 
i
;

310 
	`¥ötf
 ("Usage: %s [options]\n"

316 
¥ogøm_övoˇti⁄_sh‹t_«me
);

317 
	`¥ötf
 ("Options:\n");

318 
i
 = 0; 
›ti⁄s
[i].
«me
; ++i)

320 
ödít
;

322 
ödít
 = 
	`¥ötf
 (" --%s", 
›ti⁄s
[
i
].
«me
);

323 i‡(
›ti⁄s
[
i
].
has_¨g
 =
ªquúed_¨gumít
)

324 
ödít
 +
	`¥ötf
 (" <arg>");

325 
	`¥ötf
 ("%*s", 25 - 
ödít
, "");

326 
›ti⁄s
[
i
].
vÆ
)

328 
OPT_DIRECT
:

329 
	`¥ötf
 ("RunÅheÅest directly (instead of forking & monitoring)");

331 
OPT_TESTDIR
:

332 
	`¥ötf
 ("OverrideÅhe TMPDIRÉnv var");

335 
	`¥ötf
 ("\n");

337 
	}
}

341 
	$maö
 (
¨gc
, *
¨gv
[])

343 
dúe˘
 = 0;

344 
°©us
;

345 
›t
;

346 
timeoutÁ˘‹
 = 1;

347 
pid_t
 
ãrmpid
;

350 
	`mÆl›t
 (
M_PERTURB
, 42);

352 #ifde‡
STDOUT_UNBUFFERED


353 
	`£tbuf
 (
°dout
, 
NULL
);

356 (
›t
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "+", 
›ti⁄s
, 
NULL
)) != -1)

357 
›t
)

360 
	`ußge
 ();

361 
	`exô
 (1);

362 
OPT_DIRECT
:

363 
dúe˘
 = 1;

365 
OPT_TESTDIR
:

366 
ã°_dú
 = 
›èrg
;

368 #ifde‡
CMDLINE_PROCESS


369 
CMDLINE_PROCESS


375 *
ív°r_timeoutÁ˘‹
 = 
	`gëív
 ("TIMEOUTFACTOR");

376 i‡(
ív°r_timeoutÁ˘‹
 !
NULL
)

378 *
ív°r_c⁄v
 = 
ív°r_timeoutÁ˘‹
;

379 
ív_Á˘
;

381 
ív_Á˘
 = 
	`°πoul
 (
ív°r_timeoutÁ˘‹
, &
ív°r_c⁄v
, 0);

382 i‡(*
ív°r_c⁄v
 ='\0' &&Énv°r_c⁄v !
ív°r_timeoutÁ˘‹
)

383 
timeoutÁ˘‹
 = 
	`MAX
 (
ív_Á˘
, 1);

387 i‡(
ã°_dú
 !
NULL
)

389 
	`£ãnv
 ("TMPDIR", 
ã°_dú
, 1);

391 i‡(
	`chdú
 (
ã°_dú
) < 0)

393 
	`¥ötf
 ("chdir: %m\n");

394 
	`exô
 (1);

399 
ã°_dú
 = 
	`gëív
 ("TMPDIR");

400 i‡(
ã°_dú
 =
NULL
 ||Åest_dir[0] == '\0')

401 
ã°_dú
 = "/tmp";

405 
	`£tvbuf
 (
°dout
, 
NULL
, 
_IONBF
, 0);

408 
	`©exô
 (
dñëe_ãmp_fûes
);

411 
¨gv
[
›töd
 - 1] =árgv[0];

412 
¨gv
 +
›töd
 - 1;

413 
¨gc
 -
›töd
 - 1;

416 #ifde‡
PREPARE


417 
	`PREPARE
 (
¨gc
, 
¨gv
);

420 c⁄° *
ív°r_dúe˘
 = 
	`gëív
 ("TEST_DIRECT");

421 i‡(
ív°r_dúe˘
 !
NULL
)

423 
FILE
 *
f
 = 
	`f›í
 (
ív°r_dúe˘
, "w");

424 i‡(
f
 =
NULL
)

426 
	`¥ötf
 ("cannot open TEST_DIRECT output file '%s': %m\n",

427 
ív°r_dúe˘
);

428 
	`exô
 (1);

431 
	`Ârötf
 (
f
, "timeout=%u\¡imeoutÁ˘‹=%u\n", 
TIMEOUT
, 
timeoutÁ˘‹
);

432 #ifde‡
EXPECTED_STATUS


433 
	`Ârötf
 (
f
, "exô=%u\n", 
EXPECTED_STATUS
);

435 #ifde‡
EXPECTED_SIGNAL


436 
EXPECTED_SIGNAL
)

438 : 
	`ab‹t
 ();

439 
	#öô_sig
(
signo
, 
«me
, 
ãxt
) \

440 
signo
: 
	`Ârötf
 (
f
, "sig«l=%s\n", 
«me
); ;

	)

441 
	~<sigli°.h
>

442 #unde‡
öô_sig


446 i‡(
ãmp_«me_li°
 !
NULL
)

448 
ãmp_«me_li°
 *
n
;

449 
	`Ârötf
 (
f
, "temp_files=(\n");

450 
n
 = 
ãmp_«me_li°
;

451 
n
 !
NULL
;

452 
n
 = (
ãmp_«me_li°
 *Ën->
q
.
q_f‹w
)

453 
	`Ârötf
 (
f
, " '%s'\n", 
n
->
«me
);

454 
	`Ârötf
 (
f
, ")\n");

457 
	`f˛o£
 (
f
);

458 
dúe˘
 = 1;

462 i‡(
dúe˘
)

463  
TEST_FUNCTION
;

470 
pid
 = 
	`f‹k
 ();

471 i‡(
pid
 == 0)

474 #ifde‡
RLIMIT_CORE


476 
æimô
 
c‹e_limô
;

477 
c‹e_limô
.
æim_cur
 = 0;

478 
c‹e_limô
.
æim_max
 = 0;

479 
	`£ålimô
 (
RLIMIT_CORE
, &
c‹e_limô
);

484 i‡(
	`£çgid
 (0, 0) != 0)

485 
	`¥ötf
 ("FailedÅo setÅheÖrocess group ID: %m\n");

488 
	`exô
 (
TEST_FUNCTION
);

490 i‡(
pid
 < 0)

492 
	`¥ötf
 ("Cannot forkÅestÖrogram: %m\n");

493 
	`exô
 (1);

497 
	`sig«l
 (
SIGALRM
, 
sig«l_h™dÀr
);

498 
	`Æ¨m
 (
TIMEOUT
 * 
timeoutÁ˘‹
);

501 
	`sig«l
 (
SIGINT
, 
sig«l_h™dÀr
);

504 
ãrmpid
 = 
	`TEMP_FAILURE_RETRY
 (
	`waôpid
 (
pid
, &
°©us
, 0));

505 i‡(
ãrmpid
 == -1)

507 
	`¥ötf
 ("Waiting forÅestÖrogram failed: %m\n");

508 
	`exô
 (1);

510 i‡(
ãrmpid
 !
pid
)

512 
	`¥ötf
 ("Oops, wrongÅestÖrogramÅerminated:Éxpected %ld, got %ld\n",

513 (Ë
pid
, (Ë
ãrmpid
);

514 
	`exô
 (1);

518 i‡(
	`WIFEXITED
 (
°©us
))

520 #i‚de‡
EXPECTED_STATUS


521 #i‚de‡
EXPECTED_SIGNAL


523  
	`WEXITSTATUS
 (
°©us
);

525 
	`¥ötf
 ("Expected signal '%s' from child, gotÇone\n",

526 
	`°rsig«l
 (
EXPECTED_SIGNAL
));

527 
	`exô
 (1);

530 i‡(
	`WEXITSTATUS
 (
°©us
Ë!
EXPECTED_STATUS
)

532 
	`¥ötf
 ("Expected status %d, got %d\n",

533 
EXPECTED_STATUS
, 
	`WEXITSTATUS
 (
°©us
));

534 
	`exô
 (1);

543 #i‚de‡
EXPECTED_SIGNAL


544 
	`¥ötf
 ("Didn'tÉxpect signal from child: got `%s'\n",

545 
	`°rsig«l
 (
	`WTERMSIG
 (
°©us
)));

546 
	`exô
 (1);

548 i‡(
	`WTERMSIG
 (
°©us
Ë!
EXPECTED_SIGNAL
)

550 
	`¥ötf
 ("Incorrect signal from child: got `%s',Çeed `%s'\n",

551 
	`°rsig«l
 (
	`WTERMSIG
 (
°©us
)),

552 
	`°rsig«l
 (
EXPECTED_SIGNAL
));

553 
	`exô
 (1);

559 
	}
}

	@../version.h

3 
	#RELEASE
 "°abÀ"

	)

4 
	#VERSION
 "2.24"

	)

	@
1
.
0
45
706
arena.c
hooks.c
malloc-hooks.h
malloc-internal.h
malloc.c
malloc.h
mallocbug.c
mcheck-init.c
mcheck.c
mcheck.h
memusage.c
memusagestat.c
morecore.c
mtrace.c
obstack.c
obstack.h
scratch_buffer_grow.c
scratch_buffer_grow_preserve.c
scratch_buffer_set_array_size.c
set-freeres.c
thread-freeres.c
tst-calloc.c
tst-malloc-backtrace.c
tst-malloc-fork-deadlock.c
tst-malloc-thread-exit.c
tst-malloc-thread-fail.c
tst-malloc-usable.c
tst-malloc.c
tst-mallocfork.c
tst-mallocfork2.c
tst-mallocstate.c
tst-mallopt.c
tst-mcheck.c
tst-memalign.c
tst-mtrace.c
tst-obstack.c
tst-posix_memalign.c
tst-pvalloc.c
tst-realloc.c
tst-scratch_buffer.c
tst-trim1.c
tst-valloc.c
../libio/libioP.h
../test-skeleton.c
../version.h
